//Add default values for translations here. It should be used only for translate filter
//as translate filter doenst support default values.
//translate, translatea-attr directives already support defaults which can be specified in templates itself


var _locales_ = _locales_ || {en: {}}
var _tr_ = {en:{}}
_tr_.en ={
    // "$a$.m.foo.tooltip": "foo's default tooltip msg"
    "$a$.m.email_otp.email_id.tooltip" : "Account With Private Email IDs (E.G. Google, Yahoo Etc.) Will Not Be Activated On GeM Portal",
    "$a$.m.register.activate_user.user_id.tooltip" : "User Id may contain alphabets, numbers and any of the following special characters (-,_,@ and .)\n The allowed special characters cannot be used as a prefix of the user Id.",
    "$a$.m.register.activate_user.password.tooltip" : "Password must contain 1 uppercase, 1 lowercase, 1 numeric, could be between 8 To 16 characters and one special character.\nThe allowed special characters are: ~!@#$%?^&/*[]()_+={}|:'\",<.>\nTwo consecutive same characters, leading and trailing spaces are restricted.\nPassword cannot contain user Id, first name and last name.",
    "$a$.m.user.add_or_invite.tooltip" : "Create division before adding post, Create post & Assign roles, Link post to the user",
    "$a$.m.user.email.tooltip" : "Email IDs gov.in/nic.in/gembuyer.in are preferred",
    "$a$.m.user.division.gst_in.tooltip" : "Example- DigitCheck: 15 digit, Format: 29ABCDE1234F2Z5, 29-(State code 2 digit), ABCDE1234F-(PAN card number of   the manufacturer/Traders/Exporters/Dealer), 2-(Number of registration on within state) ,Z-(Default digit), 5-(Check code to detect errors)",
    "$a$.m.user.profile.my_team.tooltip" : "Primary User to create team Buyer, consignee, DDO & PAO.",
    "$a$.m.user.seller_profile.my_team.tooltip" : "Primary User to add secondary user under Business Unit",
    "$a$.m.user.profile.deactivate_account.tooltip" : "All the transactions will be transferred to the New HOD",
    "$a$.m.user_list.new_user.tooltip" : "Create division before adding post, Create post & Assign roles, Link post to the user",
    "$a$.m.primary_user_deactivate_msg" : "{{first_name}} {{last_name}} ({{email}}) has been successfully deactivated from {{org_tree}}",
    "$a$.m.user_role_issue_msg" : "{{first_name}} cannot be assigned to {{post_name}}",
    "$a$.m.user_post_issue_msg" : "{{first_name}} {{last_name}} is already assigned to {{post_name}}",
    "$a$.m.entity.name.restriction.tooltip" : "Only Alphanumeric characters are allowed",
    "$a$.m.referral_verification.email.tooltip" : "Allowed Email ID ending with gov.in / nic.in / gembuyer.in",
    "$a$.m.user.address.contact_number.description.tooltip" : "STD Code should have minimum of 3 digits.Office Contact Number should have minimum of 5 digits.Total number of digits in STD Code and Office Contact Number should be 10, excluding the leading zero of STD Code.Extension Number is optional.",
    "$a$.m.seller.cin.tooltip" : "Please enter your Corporate Identity Number (CIN) alloted by Ministry of Corporate Affairs (MCA)",
    "$a$.m.seller.company_name.tooltip" : "Specify your Company or Business Unit Name. Business / Organisation Name cannot exceed 180 characters.Company Name can contain maximum of 5 digits only.",
    "$a$.m.seller.date_of_incorporation.tooltip" : "Enter date of incorporation of your business unit.",
    "$a$.m.seller.pan_number.tooltip" : "Specify personal PAN number.",
    "$a$.m.seller.pan_name.tooltip" : "Please enter exact Name as mentioned in PAN",
    "$a$.m.seller.business_pan_number.tooltip" : "Enter your business PAN as used for Income Tax. Sole Proprietors may use Personal PAN.",
    "$a$.m.seller.acknowledgement_number.tooltip" : "Specify acknowledgement number as in authentication record.",
    "$a$.m.seller.profit_gain.tooltip" : "Specify Profit and Gain from Business or Profession",
    "$a$.m.seller.gross_sale_itr.tooltip" : "Gross sale/receipts value from ITR. Please fill your values as per ITR only.",
    "$a$.m.seller.e1b_itr.tooltip" : "Please fill your values as per ITR only.",
    "$a$.m.seller.aadhaar_mobile.tooltip" : "Please enter Mobile Number linked with UAM",
    "$a$.m.seller.uam_number.tooltip" : "Please enter your Udyog Aadhaar Memorandum (UAM) Number alloted by MSME",
    "$a$.m.seller.constituition_name_for_company.tooltip" : "Business / Organisation Name gets auto populated from MCA21 of CIN verification",
    "$a$.m.seller.startup.dipp.tooltip" : "Enter DIPP number alloted by Department of Industrial Policy and Promotion after registering with Startup India",
    "$a$.m.seller.startup.dipp_mobile.tooltip"  : "Enter Mobile Number linked with DIPP Number",
    "$a$.m.seller.cin.date_of_incorporation.tooltip" : "Date of incorporation of your business unit",
    "$a$.m.email_otp.verify_email_info.tooltip": "After entering the correct OTP. Please click on verify OTP button.",
    "$a$.m.order.consignee_prc.received_qty.tooltip": "Only Whole numbers are allowed as quantity",
    "$a$.m.seller.gross_sale_itr_IAS_opted.tooltip" : "Sale/Gross Receipts of business from the schedule- Part A-P& L - Ind AS(1 A - VI)",
    "$a$.m.seller_reg.constitution_name.tooltip" : "##Please enter your Business / Organisation Name. \nOrganisation Name cannot exceed 180 characters. \nOrganisation Name can contain maximum of 5 digits only.",
    "$a$.m.seller_reg.constitution_type.tooltip" : "##Please select your Business/Organisation type: \n Proprietorship (If you are registering as a sole proprietor business)\nFirm (If you are registering as a Partnership/LLP Firm)\nCompany (If you are registering as a Private ltd./Public ltd. etc.)\nTrust/Society (If you are registering as a Trust/Society)\nGovernment Entity (If you are registering as a Government Entity)",
    "$a$.m.seller_reg.pan_number.tooltip" : "Please enter your personal PAN number as mentioned in PAN.",
    "$a$.m.seller_reg.pan_name.tooltip" : "Your Name as in PAN. Please enter with exact case match.",
    "$a$.m.seller_contact_info.tooltip" : "If you are specifying landline number, please start with std code. If you are specifying mobile number, please start with 0",
    "$a$.m.verify_aadhaar.aadhaar_or_virtual.tooltip" : "Please enter 12 digit Aadhaar number or 16 digit Virtual Aadhaar",
    "$a$.m.seller.sec_user.roles.tooltip": "Can Participate in Bid/RA - If the seller can pariticipate in Bid or RA\nCan Create Catalogue - If the seller can create and manage catalogues\nCan Manage Order Fulfillment - If the seller can manage / fulfil orders\nCan Participate In Purchase Requisition - If the seller can participate in purhcase requisition",
    "$a$.m.seller.participate_in_bid" : "You will have to complete the verification of your tax assessment to participate in bids if your date of incorporation is before {{two_years_back_from_now | date: 'dd/MM/yyyy'}}",
    "$a$.m.seller_reg.tan_number.tooltip" : "Please enter your TAN number",
    "$a$.m.seller_reg.tan_name.tooltip" : "Your Name as in TAN. Please enter with exact case match.",
    "$a$.m.srvc.rate_sheet_search.service_detail.link_name" : "Service Details",
    "$a$.m.srvc.service_detail.show_detail" : "Show Detail",
    "$a$.m.register.govt_registered_community_registration.basic_details_edit.placeholder.provide.seller_type.msg" : "Please provide a {{a_m_user_seller_type}} ID",
    "$a$.m.srvc.rate_sheet.start_date.tooltip" : "Not able to select a specific start date? This is because some services require lead days by the Service provider to start the service. Please select any date from the active dates as the start date of the service to proceed ahead.",
    "$a$.m.srvc.rate_sheet.intent_of_buying.tooltip" : "Please select this option if you require to bunch multiple variants of this service or any related service in the same contract",
    "$a$.m.prc.not.available.error" : "Shipment is not Available for Prc",
    "$a$.m.prc.confimation.required" : "Confirmation required for editing Auto Generated PRC",
    "$a$.m.prc.data.error" : "Error in fetching the data. Please try again",
    "$a$.m.receipt.voucher.no.empty" : "Goods Receipt Voucher No is Empty!",
    "$a$.m.receipt.voucher.date.empty" : "Goods Receipt Voucher date is Empty!",
    "$a$.m.received_qty_empty" : "Quantity should be a valid Number!",
    "$a$.m.received_qty_greater_then_dispatched_qty" : "Received Quantity is Greater than Dispatched Quantity!",
    "$a$.m.not_received_qty_prc" : "Received Quantity and Not received Quantity should match with shipped Quantity",
    "$a$.m.comment_for_not_recieved_qty" : "Please enter reason for not received quantity",
    "$a$.m.delivery_date_missing" : "Delivery Date is missing!",
    "$a$.m.terms_auto_crac_acceptance_empty" : "Please accept the terms for generating the auto crac",
    "$a$.m.crac.not.available.error" : "Shipment is not Available for CRAC",
    "$a$.m.crac.confimation.required" : "Confirmation required for editing Auto Generated CRAC",
    "$a$.m.prc.data.error" : "Error in fetching the data. Please try again",
    "$a$.m.page_no_is_missing" : "Page Number missing in Book Entry Details!",
    "$a$.m.serial_no_is_missing" : "Serial Number missing in Book Entry Details!",
    "$a$.m.accepted_qty_not_a_number" : "Accepted Quantity should be a number",
    "$a$.m.rejected_qty_not_a_number" : "Rejected Quantity should be a number",
    "$a$.m.accepted_qty_greater_than_received_qty" : "Accepted Quantity is Greater than Received Quantity!",
    "$a$.m.accepted_qty_mismatch" : "Accepted Quantity and not accepted quantity should match with received quantity!",
    "$a$.m.reason.empty" : "Reason Cannot be Empty for Not Accepted Quantity!",
    "$a$.m.not_accepted_qty_reason" : "Please mention reason for not accepted qty",
    "$a$.m.reason.cannot_fit" : "Reason Cannot be More than 255 characters!",
    "$a$.m.freight_charge_invalid" : "Freight Intensive Charge is Empty or Invalid!",
    "$a$.m.select_inspected_by" : "Please Select Inspected By option!",
    "$a$.m.inspection_certificate_no_missing" : "Inspection Certificate Number missing!",
    "$a$.m.inspection_certificate_date_missing" : "Date of Inspection missing!",
    "$a$.m.inspection_certificate_agency_missing" : "Inspection Agency Name missing!",
    "$a$.m.freight_charges_update_disabled" : "Freight Charges Cannot be applied for this shipment",
    "$a$.m.crac.verify.not.available.error" : "Shipment is not Available for CRAC Verify",
    "$a$.m.crac.confimation.required" : "Confirmation required for editing Auto Generated CRAC",
    "$a$.m.download_purchase_error_msg" : "Download Purchases Failed. Try Again!",
    "$a$.m.demand_declined_failure_msg" : "Decline Demand Failed. Try Again!",
    "$a$.m.user_activation_successful_msg" : "You have been activated successfully",
    "$a$.m.srvc.rate_sheet_search.end_date_less_than_start_date_error" : "Contract End Date can not be less than or equal to Start Date",
    "$a$.m.srvc.rate_sheet_search.start_date_greater_max_error" : "Contract Start Date can not be greater than 180 days from today",
    "$a$.m.srvc.rate_sheet_search.end_date_greater_max_error" : "Contract End Date can not be greater than 365 days from start date",
    "$a$.m.srvc.rate_sheet_search.date_less_than_today_error" : "Contract Dates can not be less than or equal to today",
    "$a$.m.srvc.rate_sheet_search.consignee_field_error" : "Please fill all consignee fields properly",
    "$a$.m.srvc.rate_sheet_search.location_quantity_error" : "Please select location and quantity",
    "$a$.m.srvc.rate_sheet_search.consignee_error" : "Please select consignee to proceed",
    "$a$.m.srvc.rate_sheet_search.location_error" : "Please select location to proceed",
    "$a$.m.unknown_error_msg" : "Something went wrong. Please Try again!",
    "$a$.m.email_update_success_msg" : "Email ID updated successfully",
    "$a$.m.post_details_edit_success_msg" : "Post details updated successfully",
    "$a$.m.assessment_year_error_msg" : "Could not fetch assessment year options.Try Again!",
    "$a$.m.user_detail_update_success_msg" : "Your details has been updated successfully!",
    "$a$.m.mobile_number_update_success_msg" : "Your mobile number has been updated successfully.",
    "$a$.m.no_division_info_msg" : "No division found. Create division and proceed with user creation.",
    "$a$.m.ekyc.aadhaar.verification.successful" : "Aadhaar verification successful",
    "$a$.m.srvc.invalid.item.limit.for.service.compare" : "Add more than 3 items to service compare!",
    "$a$.m.srvc.consignee.data.not.uniq" : "Consignee data should be unique",
    "$a$.m.srvc.rate_sheet_search.end_date_less_than_start_date_error" : "Contract End Date can not be less than or equal to Start Date",
    "$a$.m.srvc.rate_sheet_search.start_date_greater_max_error" : "Contract Start Date can not be greater than 180 days from today",
    "$a$.m.srvc.rate_sheet_search.end_date_greater_max_error" : "Contract End Date can not be greater than 365 days from start date",
    "$a$.m.srvc.rate_sheet_search.date_less_than_today_error" : "Contract Dates can not be less than or equal to today",
    "$a$.m.srvc.empty.custom.filter" : "Custom filter value is empty!",
    "$a$.m.srvc.rate_sheet_search.consignee_field_error" : "Please fill all consignee fields properly",
    "$a$.m.srvc.rate_sheet_search.location_quantity_error" : "Please select location and quantity",
    "$a$.m.srvc.rate_sheet_search.consignee_error" : "Please select consignee to proceed",
    "$a$.m.srvc.rate_sheet_search.location_error" : "Please select location to proceed",
    "$a$.m.srvc.rate_sheet_search.seller_details_view_restriction_error" : "You can't view the details of this seller!",
    "$a$.m.srvc.rate_sheet_search.mandatory_buyer_param_error" : "Enter all buyer parameters",
    "$a$.m.srvc.rate_sheet_search.add_to_cart_failure_error" : "Item is not added to Cart. Please try again later",
    "$a$.m.srvc.rate_sheet_search.max_limit_reached" : "Maximum limit reached",
    "$a$.m.srvc.rate_sheet_search.invalid_number" : "Not a valid number!",
    "$a$.m.srvc.rate_sheet_search.rating_data_fetch_failure" : "Not able fetch rating data!",
    "$a$.m.srvc.rate_sheet_search.add_to_cart_success" :"Item Added to Cart",
    "$a$.m.srvc.rate_sheet_search.remove_item.cart.success" :"Removed item successfully",
    "$a$.m.invalid_freight_charges" : "Invalid Freight charges. Maximum allowed value for freight charges is {{freight_charge}}",
    "$a$.m.dashboard.product.prc.already_completed" : "PRC is already completed !!",
    "$a$.m.dashboard.product.crac.already_completed" : "CRAC is already completed !!",
    "$a$.m.dashboard.product.crac.auto_crac.extended": "Auto CRAC extended successfully!",
    "$a$.m.dashboard.product.crac.successfully_saved": "CRAC has been saved successfully !!",
    "$a$.m.dashboard.product.decline_demand.pending": "Pending decline demand request exists",
    "$a$.m.dashboard.product.amendment.cancelled": "Amendment Canceled",
    "$a$.m.dashboard.product.amendment.not_cancelled": "Amendment not canceled",
    "$a$.m.successfully_uploaded": "Successfully uploaded",
    "$a$.m.cancelled_successfully": "Cancelled successfully",
    "$a$.m.error_in_uploading": "Error in uploading",
    "$a$.m.dashboard.product.contract_generation.error": "Error while generating the contract",
    "$a$.m.dashboard.product.document.update.error.try_again": "Error while updating document. Please try again",
    "$a$.m.dashboard.product.requested_for_cancellation": "Requested For Cancellation",
    "$a$.m.dashboard.product.request_for_cancellation.failed": "Request for Cancellation failed",
    "$a$.m.dashboard.product.unblock.successful": "Unblock Successful",
    "$a$.m.dashboard.product.epbg.verify.error": "Please verify Epbg to proceed further",
    "$a$.m.dashboard.product.contract.end_date.invalid": "Selected Contract End Date is invalid",
    "$a$.m.dashboard.product.amendment.cannot_create": "Cannot create Amendment",
    "$a$.m.dashboard.product.amendment.cannot_cancel": "Cannot cancel amendment",
    "$a$.m.dashboard.product.epbg.verify.successful": "EPBG successfully verified",
    "$a$.m.dashboard.product.select.valid_date": "Please select valid Date!!",
    "$a$.m.user.itr_exemption.saved": "ITR Exemption Details have been successfuly saved",
    "$a$.m.user.email.already.exists": "Email already exists.",
    "$a$.m.user.primary_user.cannot.become.secondary_user": "Primary User cannot become secondary user",
    "$a$.m.user.email.suffix.error": "Please enter gov.in/nic.in/gembuyer.in email id",
    "$a$.m.dashboard.pcm.atleast.one_item.present": "Atleast One Item should be present for new order",
    "$a$.m.dashboard.pcm.additional_qty.cannot.more.max_allowed_qty": "For any items, Additional Quantity cannot be more than Max allowed Quantity",
    "$a$.m.dashboard.pcm.invalid.qty": "Invalid Quantity for {{titles}}",
    "$a$.m.dashboard.pcm.order_not_modified.modify.qty": "Order is Not Modified! Please make some valid change in Quantity",
    "$a$.m.dashboard.pcm.modify.qty": "Please make some valid change in Quantity",
    "$a$.m.dashboard.pcm.qty_increase.exceeded": "Quantity increase/decrease per item should not exceed {{allowed_variance}} from original quantity",
    "$a$.m.dashboard.pcm.qty_increase.precontract.exceeded": "Quantity increase/decrease per item should not exceed {{allowed_variance}}% from original quantity",
    "$a$.m.dashboard.pcm.qty_increase.precontract.success": "Updated Successfully!!",
    "$a$.m.dashboard.pcm.should.have.valid_changes": "Amendment should have valid changes",
    "$a$.m.dashboard.pcm.invalid_delivery_days": "Invalid delivery days for {{error}}",
    "$a$.m.dashboard.pcm.contract.end_date.missing": "Contract End Date is Missing!",
    "$a$.m.dashboard.pcm.order_not_modified.modify.est_params.values": "Estimator parameter values are not Valid for {{invalid_usages}}",
        "$a$.m.dashboard.pcm.contract.start_date.missing": "Contract Start Date is Missing!",
    "$a$.m.dashboard.pcm.contract.end_date.cannot.gt.start_date": "Contract end Date cannot be less than start date",
    "$a$.m.dashboard.pcm.contract.end_date.cannot.more.max_allowed_date": "Contract End Date cannot be more than max allowed date",
    "$a$.m.dashboard.pcm.contract.start_date.cannot.lt.min_allowed_date": "Contract Start Date cannot be less than min allowed date",
    "$a$.m.dashboard.pcm.contract.invalid.date": "Invalid Contract Date! Please choose valid start and end date",
    "$a$.m.dashboard.consignee_qty.enter_valid_qty": "Enter valid quantity",
    "$a$.m.user.personal_info.updated_successfully": "Personal Information updated successfully",
    "$a$.m.srvc.rate_sheet_search.contract_period_less_than_service_days" : "Contract Period can not be less than {{minimum_contract_period}} days for this service.",
    "$a$.m.srvc.rate_sheet_search.contract_period_more_than_service_days" : "Contract Period can not be more than {{maximum_contract_period}} days for this service.",
    "$a$.m.srvc.rate_sheet_search.select_relevant_filter" : "Please select relevant filters {{unselected_filters}} to proceed",
    "$a$.m.srvc.rate_sheet_search.charecter_limit_crossed" : "Character limit crossed. Maintain less than {{character_limit}} characters to proceed",
    "$a$.m.srvc.rate_sheet_search.empty_usage_values" : "Please fill {{usage_arr}}.",
    "$a$.m.user.invite_seller.placeholder.enter.email.msg" : "Add Email Address",
    "$a$.m.user.invite_seller.msg.tooltip" : "You can invite a maximum of 10 sellers at once",
    "$a$.m.user.invite_seller.csv.invalid.email.tooltip" : "Invalid emails will not be processed",
    "$a$.m.dashboard.orders.products.all_contracts.label" : "ALL CONTRACTS",
    "$a$.m.dashboard.orders.products.bid_contracts.label" : "BID CONTRACTS",
    "$a$.m.dashboard.orders.products.ra_contracts.label" : "RA CONTRACTS",
    "$a$.m.dashboard.orders.products.pr_contracts.label" : "PR CONTRACTS",
    "$a$.m.dashboard.orders.products.direct_contracts.label" : "DIRECT CONTRACTS",
    "$a$.m.dashboard.orders.products.ict_approvals.label" : "ICT APPROVALS",
    "$a$.m.dashboard.orders.products.all_demands.label" : "ALL DEMANDS",
    "$a$.m.dashboard.orders.products.declined_demands.label" : "DECLINED DEMANDS",
    "$a$.m.dashboard.orders.products.archive-demands.label" : "ARCHIVE DEMANDS",
    "$a$.m.dashboard.orders.products.demands.label" : "DEMANDS",
    "$a$.m.dashboard.orders.products.ulpo_all_demands.label" : "ULPO ALL DEMANDS",
    "$a$.m.dashboard.orders.products.ulpo_waiting_for_hod_approval_demands.label" : "ULPO WAITING FOR HOD APPROVAL DEMANDS",
    "$a$.m.dashboard.orders.products.ulpo_approved_demands.label" : "ULPO APPROVED DEMANDS",
    "$a$.m.dashboard.orders.products.ulpo_rejected_demands.label" : "ULPO REJECTED DEMANDS",
    "$a$.m.srvc.rate_sheet_search.not_verified.tooltip" : "Experience not verified",
    "$a$.m.signup.buyer_registration.user_type.tooltip" : "Please select and register for your respective user role in buyer organisation",
    "$a$.m.email_otp.registration.email_id.tooltip": "Account with non-government(non-nic) mail Ids (E.G. Google, yahoo etc.) are not acceptable on GeM for Primary user (HOD) Registration"

}

Object.assign(_locales_.en, _tr_.en)

//Add default values for translations here. It should be used only for translate filter
//as translate filter doenst support default values.
//translate, translatea-attr directives already support defaults which can be specified in templates itself


// translation for shared components
var _locales_ = _locales_ || {en: {}}
var _tr_ = {en: {}}
_tr_.en = {
  "$a$.g.ui_browse_node_search.placeholder.text": "Search Service Name/ID",
  "$a$.g.unknown_error_msg" : "Something went wrong. Please Try again!",
  "$a$.g.email_update_success_msg" : "Email ID updated successfully",
  "$a$.g.user_detail_update_success_msg" : "Your details has been updated successfully!",
  "$a$.g.cat_spec_service.title_format.error.message.1": "Please Enter atleast one value in the format",
  "$a$.g.cat_spec_service.title_format.error.message.2": "Please Enter valid values in the format",
  "$a$.g.cat_spec_service.title_format.error.message.3": "Please Accept that Title Format is adequate",
  "$a$.g.specification.is.not.valid" : "Specification is not valid",
  "$a$.g.name.shouldnt.contain.fullstop" : "Name shouldn't contain fullstop",
  "$a$.g.unique.name.spec.set.and.spec" : "Please enter unique name for Spec Set and Spec.",
  "$a$.g.no.spec.set.created" : "No Spec Set created",
  "$a$.g.catalog.upload.fill.mandatory.fields" : "Please fill the mandatory/highlighted fields",
  "$a$.g.catalog.upload.enter.capthca" : "Please enter captcha",
  "$a$.g.catalog.upload.fix.errors.to.publish" : "Please fix the errors to publish.",
  "$a$.g.catalog.upload.upload.distinct.images" : "Please Upload distinct images",
  "$a$.g.catalog.upload.location.zone.confirm" : "With your current choice, you are agreeing to provide servicibility in all district/pincode in states belonging to this zone. Consequently, Your existing selections(if any)for district and pincode within this zone will be removed. Click ok to proceed.",
  "$a$.g.catalog.upload.location.picker.confirm" : "You already have added district and pincodes in {{selected_value}}. With your current choice as {{selection_type}} you are agreeing to provide servicibility in all {{affected_types_slash}} in {{selected_value}}. Consequently, Your existing selections for {{affected_types_and}} within {{selected_value}} will be removed. Click ok to proceed.",
  "$a$.g.search.bn.placeholder.default" : "Search Category",
}

Object.assign(_locales_.en, _tr_.en)

angular.module('siteTranslate', ['pascalprecht.translate'])
.service('i18nTranslateService', ['$q', 'babRA',  function($q, babRA) {
  function LocalStorage(){
    this.key = '_i18n_';
    this.expiry = 10*60*1000; //10 mins
    this.isAvailable = (function(){
      var test = 'test';
      try {
          localStorage.setItem(test, test);
          localStorage.removeItem(test);
          return true;
      } catch(e) {
          return false;
      }
    })();
    this.setItem = function(key, value){
      if(this.isAvailable){
        var data = {
          k: key,
          v: value,
          t: new Date()
        };
        localStorage.setItem(this.key, JSON.stringify(data));
        return true;
      }else return false;
    }
    this.getItem = function(key){
      if(this.isAvailable){
        var data = JSON.parse(localStorage.getItem(this.key));
        if(data && typeof data === 'object' && data.k == key) {
          var expired = !data.t || (new Date() - new Date(data.t)) > this.expiry;
          return {val: data.v, expired: expired};
        }
      }
      return null;
    }
  }
  // var i18n = this;
  // i18n.getTranslations = function(locale){
  //   return babRA.one('i18n')
  //   .customGET('translations', {_ln: locale}).then(function(response){
  //     return response;
  //   })
  // }


  var i18n = this;
  i18n.getTranslations = function(locale){
    var storageKey = locale + '-tr';
    var storage = new LocalStorage();
    var localData = storage.getItem(storageKey);
    if(localData && !localData.expired){
      console.log('tr cache hit:')
      return $q.when(localData.val);
    }else
      return babRA.withConfig(function(RestangularConfigurer) {
        RestangularConfigurer.setBaseUrl("/api/v1");
      }).one('i18n')
      .customGET('translations', {_ln: locale}).then(function(response){
        storage.setItem(storageKey, response);
        return response;
      })
  }
}])
.factory('asyncLoader', ['i18nTranslateService', '$q', function(i18nTranslateService, $q) {
  return function (options) {
    return i18nTranslateService.getTranslations(options.key).then(function(response){
      return response.translations;
    },function () {
        return $q.reject(options.key);
      }
    )
  };
}])
.config(['$translateProvider', function($translateProvider) {
  var lang = (document.documentElement && document.documentElement.lang) || 'en';
  if(lang != 'en')  $translateProvider.useLoader('asyncLoader');

  // $translateProvider.useStaticFilesLoader({
  //   prefix: '/javascripts/site_angular/locales/',
  //   suffix: '.js'
  // })

  //_locales_.en is defined in locales/en.js file
  var translateFilterDefaults = _locales_ && _locales_.en || {}

  $translateProvider
    .keepContent(true)
    .translations('en', translateFilterDefaults)
    .preferredLanguage(lang)
    .useSanitizeValueStrategy('escapeParameters')
    .fallbackLanguage('en');
}])

angular.module('siteApp',["ui.router","restangular",'LocalStorageModule','angular-loading-bar','ui.bootstrap','ui.select','ui.validate','rzModule','ngAnimate','siteTranslate','ngCookies','ngNotify','720kb.tooltips','angularjs-dropdown-multiselect', 'ngSanitize', 'textAngular', 'ngFileUpload','angular-cache','ui.sortable','ui.grid','ui.grid.pagination', 'ui.grid.selection', 'ui.grid.cellNav', 'ngTagsInput', 'angulartics', 'angulartics.google.analytics', 'ngCsv'])

.config(['$stateProvider', 'RestangularProvider', '$httpProvider', function($stateProvider,RestangularProvider, $httpProvider){
	if(BAB && BAB.relativeRoot){
		$httpProvider.interceptors.push(['$templateCache', function($templateCache) {
			return {
				'request' : function(request) {
					if(request.method === 'GET'){
						if($templateCache.get(request.url) === undefined)
							request.url = BAB.rewriteUrl(request.url);
					}else request.url = BAB.rewriteUrl(request.url);
					return request;
				}
			};
		}]);
	}

	RestangularProvider.setRequestSuffix('.json');
	RestangularProvider.setDefaultHeaders({
		'Content-Type': 'application/json',
		'X-Requested-With': 'XMLHttpRequest'
	});
	RestangularProvider.setDefaultHttpFields({
		'withCredentials': true
	});

	RestangularProvider.setResponseExtractor (function (response) {
		if(response.result == undefined) {
			response.result = {}
		}
		if(response.meta != undefined) {
			response.result.meta = response.meta
		}
		if(response.result && response.result.route){ // webintend api confict with Restangular's route field
			response.result.routes = response.result.route;
		}
    if (response.result){
		  response.result._headers = response.headers;
    }
    if (!response.result){
      return response
    }else{
		  return response.result;
    }
	});

	RestangularProvider.addResponseInterceptor (function (data, operation, what, url, response, deferred) {
		console.log("returning ..", url, response.status);
		return data;
	})

	RestangularProvider.addFullRequestInterceptor (function (element, operation, route, url, headers, params, httpConfig) {
		console.log("calling ..", url, JSON.stringify(params));
		return {};
	})

	$stateProvider
  .state('errorPage', {
		url: '/error',
		templateUrl: "/javascripts/angular_components/templates/500.html"
	})

}])

.service("notificationService",['ngNotify','$injector',function(ngNotify,$injector){
	function showMsg(msg,type,translateInfo){
		if(_.isArray(msg)) msg = _.join(msg);
		var config= {
			theme: 'pure',
	    position: 'top',
	    duration: 5000 ,
	    type: type,
	    sticky: false,
	    html: true
		}

    key = ""
    if(/^\$a\$.[a,m,g,c]/.test(msg)){
      key = msg
    }else if(translateInfo && translateInfo.translationKey){
      key = translateInfo.translationKey
    }

		if(key){
			var $t= $injector.get('$translate')
      var tr_values = (translateInfo && translateInfo.translationValues) || {}
			$t(key, tr_values).then(function (translated_msg) {
	      ngNotify.set(translated_msg,config)
	    }, function (non_translated_msg) {
	      ngNotify.set(msg,config)
	    });
		}else{
			ngNotify.set(msg,config)
		}
	}
	return {
		error: function(msg,translateInfo){
			showMsg(msg,"error",translateInfo)
		},
		success: function(msg,translateInfo){
			showMsg(msg,"success",translateInfo)
		},
		info: function(msg,translateInfo){
			showMsg(msg,"info",translateInfo)
		},
		warning: function(msg,translateInfo){
			showMsg(msg,"warning",translateInfo)
		}
	}
}])

.service('seoService', [function(){
  var setTitle = function(title){
    var namespacedTitle = title + " on GeM";
    if(document.title != namespacedTitle) {
      document.title = namespacedTitle;
    }
  };
  var setDescription = function(description){
    if(document.head.querySelector('meta[name="description"]')){
        document.head.querySelector('meta[name="description"]').setAttribute("content", description)
    }
    else{
        var meta = document.createElement('meta');
        meta.name = 'description';
        meta.content = description;
        document.getElementsByTagName('head')[0].appendChild(meta);
    }
  }
  return {
    setTitle: setTitle,
    setDescription: setDescription
  };
}])

.service('debounceNetService', ['$q', function($q){
  var self = this
  self.namespaces = {};

  return function(config){
    var namespace = config.namespace,
      remote = config.remote,
      action = config.action,
      defer = $q.defer()
    var deferredRemote = remote.withHttpConfig({timeout: defer.promise})
    var clearNamespace = function(){
      if(self.namespaces[config.namespace]){
        self.namespaces[config.namespace].net.resolve()
        clearTimeout(self.namespaces[config.namespace].debounce)
        console.log("n/w debounce cancelled", self.namespaces[config.namespace])
      }
      self.namespaces[config.namespace] = null
    }
    clearNamespace()
    //defer.promise.then(clearNamespace)
    console.log("Initing n/w debounce", (new Date()).getMilliseconds(), config)
    var debounceId = setTimeout(function(){
      console.log("n/w action called", (new Date()).getMilliseconds())
      var promise = action(deferredRemote)
      //promise.then(clearNamespace, clearNamespace)
    }, config.waitTime)
    self.namespaces[config.namespace] = {debounce: debounceId, net: defer}
    return defer
  }
}])

.config(['tooltipsConfProvider', function configConf(tooltipsConfProvider) {
  tooltipsConfProvider.configure({
    'smart': true,
    'size': 'small',
    'side' : 'right',
    'speed': 'slow',
    'tooltipTemplateUrlCache': true
    //etc...
  });
}])
.config(['$httpProvider', function($httpProvider) {
  var __version_number = Date.now();
  $httpProvider.interceptors.push(function () {
    return {
      'request': function (config) {
        // !!config.cached represents if the request is resolved using
        //      the angular-templatecache
        if (!config.cached && config.url.indexOf('html') !== -1) {
          config.url += ( (config.url.indexOf('?') > -1) ? '&' : '?' )
            + config.paramSerializer({v: __version_number});
        } else if (config.url.indexOf('no-cache') > -1) {
          // if the cached URL contains 'no-cache' then remove it from the cache
          config.cache.remove(config.url);
          config.cached = false; // unknown consequences
          // Warning: if you remove the value form the cache, and the asset is not
          //          accessable at the given URL, you will get a 404 error.
        }
        return config;
      }
    }
  });
}])
.config(function ($analyticsProvider) {
  $analyticsProvider.withAutoBase(true);
})

.provider('babRA', $babRAProvider)

$babRAProvider.$inject =  ['$translateProvider']
function $babRAProvider($translateProvider){
	var configurers = new Array();
	this.addConfigurer = function(configurer){
		configurers.push(configurer);
	}

	this.$get = ['Restangular','localStorageService', '$state', '$location', '$window', '$injector','$uibModal','notificationService', '$cookies',
	function (Restangular, localStorageService, $state,  $location, $window, $injector, $uibModal,notificationService, $cookies) {
		return Restangular.withConfig(function(RestangularConfigurer) {
			angular.forEach(configurers, function(configurer){
				configurer(RestangularConfigurer, localStorageService);
			});

			RestangularConfigurer.setBaseUrl("/rest/api/v1");

			RestangularConfigurer.addFullRequestInterceptor(function(element, operation, what, url, headers, params, httpConfig){
				params._ln = params._ln || $translateProvider.use() || $translateProvider.preferredLanguage();
				if(['post', 'put'].includes(operation)){
					headers['X-CSRF-TOKEN'] = $cookies.get('XSRF-TOKEN');
				}
				return element
			});

			RestangularConfigurer.addResponseInterceptor (function (data, operation, what, url, response, deferred) {
				// console.log("response interceptor: ",response);
	      if(response.data.meta && response.data.meta.result != 'success' && response.data.meta.message){
					console.log("join by - :",response.data.meta.message.join("-"));
				}
				return data;
			})

			RestangularConfigurer.setErrorInterceptor(function(response, deferred, responseHandler) {
				var disablePromiseHalt = !!response.config.disablePromiseHalt
				var disableErrorMessage = !!response.config.disableErrorMessage

				function showErrorMsg(defaultMsg, message){
					var message = message || response.data.meta.message || defaultMsg;
					if(_.isArray(message)) message = _.join(message);
					if(!disableErrorMessage){
						notificationService.error(message)
					}
					return message;
				}

				if (response.status === 401) {
					console.log("Error Interceptor - Unauthorized Access");
					window.location.href="/login"
				}
				if(response.status === 403){
					showErrorMsg('Unauthorized Access')
				}
				if(response.status === 424){
					showErrorMsg('SSO Error')
				}
				if (response.status === 420 || response.status === 422) {
					showErrorMsg(response.data.meta.message.join(','))
				}
				if(response.status == 404){
					showErrorMsg('Not found')
				}
				if(response.status == 302){
					msg = (response.data || {}).message
					redirect_url = (response.data || {}).redirect_url
					if(msg)
						showErrorMsg("Invalid Request", msg)
					if(redirect_url)
						window.location.href = redirect_url
				}
				if(navigator.connection && navigator.connection.type == "none") {
					showErrorMsg(null,'No internet connection')

					setInterval(function(){
						if(navigator.onLine){
							$window.location.reload(true);
						}
					}, 3000);
				}
				if(!window.IBresponseErrorPopup && (response.status === 0 || response.status === 408 || response.status === 500) && ($location.path().indexOf('retry') < 0) && navigator.onLine)
				{
					var title,template;
					if(response.status === 408){
						console.log("408 error inteceptor");
					}
					else if(response.status === 500){
						console.log("500 error inteceptor");
						showErrorMsg(null,"Something went wrong. We've been notified about this issue and we'll take a look at it shortly.")
					}
				}
			return disablePromiseHalt;
			})

		});
	}
	]
}

angular.module('siteApp')
.factory('gemAdminRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl("/gem_admin/api");
  });
}])

.factory('gemUsersRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl("/gem_users/api");
  });
}])

.factory('privateRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl("/pvt/api");
  });
}])

.factory('publicRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl("/pub/api");
  });
}])

.factory('cachedPublicRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setDefaultHttpFields({cache: true});
    RestangularConfigurer.setBaseUrl("/pub/api");
  });
}])

.factory('ratingAdminRA', ['gemAdminRA', function(gemAdminRA) {
  return gemAdminRA.withConfig(function(RestangularConfigurer) {
    url = BAB.endpoints.app_url('gem_rating', gemAdminRA.configuration.baseUrl)
    RestangularConfigurer.setBaseUrl(url)
  });
}])

.factory('ratingUserRA', ['gemUsersRA', function(gemUsersRA) {
  return gemUsersRA.withConfig(function(RestangularConfigurer) {
    url = BAB.endpoints.app_url('gem_rating', gemUsersRA.configuration.baseUrl)
    RestangularConfigurer.setBaseUrl(url)
  });
}])

.factory('identityAdminRA', ['gemAdminRA', function(gemAdminRA) {
  return gemAdminRA.withConfig(function(RestangularConfigurer) {
    url = BAB.endpoints.app_url('gem_rating', gemAdminRA.configuration.baseUrl)
    RestangularConfigurer.setBaseUrl(url)
  });
}])


.factory('ratingPrivateRA', ['privateRA', function(privateRA) {
  return privateRA.withConfig(function(RestangularConfigurer) {
    url = BAB.endpoints.app_url('gem_rating', privateRA.configuration.baseUrl)
    RestangularConfigurer.setBaseUrl(url)
  });
}])

.factory('ratingPublicRA', ['publicRA', function(publicRA) {
  return publicRA.withConfig(function(RestangularConfigurer) {
    url = BAB.endpoints.app_url('gem_rating', publicRA.configuration.baseUrl)
    RestangularConfigurer.setBaseUrl(url)
  });
}])

.factory('ratingUsersRA', ['gemUsersRA', function(gemUsersRA) {
  return gemUsersRA.withConfig(function(RestangularConfigurer) {
    url = BAB.endpoints.app_url('gem_rating', gemUsersRA.configuration.baseUrl)
    RestangularConfigurer.setBaseUrl(url)
  });
}])

.factory('adminRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl("/api/v1");
  });
}])

.factory('cmsRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl("/cms/admin/api");
  });
}])
.factory('cmsOthersRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl("/cms/others/api")
  })
}])

.factory('bnRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl("/api/v1");
  });
}])

.factory('gemUserRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl("/gem_users/api");
  });
}])

.factory('cmsOthersRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
  RestangularConfigurer.setBaseUrl('/cms/others/api')
  })
}])

.factory('autoCompleteRA',['babRA',function(babRA){
  return babRA.withConfig(function(RestangularConfigurer) {
  RestangularConfigurer.setBaseUrl('')
  })
}])
angular.module('siteApp')

.service('advisoryPopupService',['SessionDataService', '$uibModal',function(SessionDataService, $uibModal){
  var that = this
  var openDialog = function(advisory, context){
    var templateUrl = that.getPopupContex(context)
    var modalCtrl = function($scope,$uibModalInstance, $sce){
      $scope.close = function(){
        SessionDataService.set(advisory);
        $uibModalInstance.close();
      }
    }
    modalCtrl.$inject = ['$scope','$uibModalInstance', '$sce'];
    return $uibModal.open({
      templateUrl: templateUrl,
      size: 'md',
      backdrop: 'static',
      keyboard: false,
      controller: modalCtrl,
      windowClass: "buyer-advisory-popup"
    })
  }
  that.show = function(advisory, context){
    advisory = 'AdvPopup-' + advisory;
    if(SessionDataService.get(advisory))
      return;
    openDialog(advisory, context);
  }

  that.getPopupContex = function(context){
    var views = {
      "products": "/javascripts/site_angular/app-common/views/advisory_popup_service.html",
      "services": "/javascripts/site_angular/app-common/views/services_advisory_popup.html"
    }
    context = views[context] ? context : "products"
    return views[context]
  }

}])

angular.module('siteApp')

.directive('ekyc',['userService', '$location','$sce','notificationService', function(userService, $location,$sce,notificationService) {
  return{
    restrict: 'E',
    scope: {
      aadhaar : '=aadhaar',
      aadhaarSuccess : '=aadhaarSuccess',
      aadhaarDetails : '=aadhaarDetails',
      location : '@location',
      promptToVerfiyDetails : '@promptToVerfiyDetails',
      uid : '=uid'
    },
    link: function(scope, element, attr, ngModelCtrl) {
      scope.userService = userService;
      scope.flags = {}

      scope.aadhaar = '' //dont display aadhaar even if user has
      scope.aadhaarDeclaration={}

      function setFlagsAndShowMessageForError(message){
        $location.search('aadhaar_verified', 'false')
        scope.error_message = message || "We apologize, your Aadhaar and/or mobile number verification was unsuccessful, please try again."
        if(scope.promptToVerfiyDetails && (scope.promptToVerfiyDetails=='true'))
          scope.flags.prompt_verify_error_popup = true
        else
          notificationService.error(scope.error_message)
      }

      function setFlagsAndShowMessageForSuccess(){
        scope.aadhaarSuccess = true
        scope.mobileSuccess = true
        notificationService.success('$a$.m.ekyc.aadhaar.verification.successful')
      }

      function submitAadhaarInfo(aadhaar_url,aadhar_no,mobile_no,request_date,chksum,collect_response_url,client_id) {
        var form = document.createElement("form");
        form.method = "POST";
        form.action = aadhaar_url;
        var ele = document.createElement("input");
        ele.name = "json_data"
        ele.type = "text";
        ele.value = '{"client_id":"'+client_id+'","redirect_url":"'+collect_response_url+'","request_date":'+request_date+',"payload":{"aadhaar_number":"'+aadhar_no+'","mobile_number":"'+mobile_no+'"},"authentication":"'+chksum+'"}';
        form.appendChild(ele);
        document.body.appendChild(form);
        form.submit();
      }
      
      scope.closeErrorPopup = function(){
        scope.flags.prompt_verify_error_popup = false
        // Remove aadhaar_verified in URL
        window.location.hash = window.location.hash.replace(/aadhaar_verified=[^&]*/,'')
      }

      if($location.$$search.aadhaar_verified){
        scope.flags.aadhaarVerificationPending = false
        scope.userService.getAadhaar().then(function(response){
          if(response && (response.meta.result == 'success') && response.aadhaar){
            scope.aadhaar = response.aadhaar.aadhaar_id
            scope.aadhaarDetails.aadhar_number = response.aadhaar.aadhaar_id
            scope.aadhaarDetails.first_name = response.aadhaar.first_name
            scope.aadhaarDetails.last_name= response.aadhaar.last_name
            scope.aadhaarDetails.uid_token = response.aadhaar.uid_token
            scope.aadhaarDetails.DOB = response.aadhaar.DOB
            scope.aadhaarDetails.mobile = response.aadhaar.mobile
            scope.mobile = response.aadhaar.mobile
            //Check if mandatory data are present
            if(scope.aadhaarDetails.uid_token && scope.aadhaarDetails.first_name && scope.aadhaarDetails.DOB && scope.aadhaarDetails.mobile){
              setFlagsAndShowMessageForSuccess()
            }
            else{
              setFlagsAndShowMessageForError(response.aadhaar.message)
            }
          }
          else{
            setFlagsAndShowMessageForError(response.meta.message)
          }
        })
      }

      scope.verifyAadhaar = function() {
        scope.flags.aadhaarVerificationPending = true
        $location.hash(null)
        current_location = $location.absUrl()
        if(current_location.indexOf('is_real=') !== -1){
          var index = current_location.indexOf('is_real=');
          current_location =  current_location.substring(0,index)
        }
        if(current_location.indexOf('aadhaar_verified=') !== -1){
          var index = current_location.indexOf('aadhaar_verified=');
          current_location =  current_location.substring(0,index)
        }
        if(current_location.indexOf('?') !== -1){
          var index = current_location.indexOf('?');
          current_location =  current_location.substring(0,index)
        }

        var is_real = $location.$$search.is_real ? $location.$$search.is_real : true
        uid_or_aadhaar = scope.uid ? scope.uid : scope.aadhaar
        scope.ekyc_info = {
          "aadhaar_number" : uid_or_aadhaar,
          "mobile_number"  : scope.mobile,
          "redirect_url"   : current_location,
          "is_real"				 : is_real,
          "aadhaar_consent": scope.aadhaarDeclaration.aadhaar_declaration
        }
        var formData = {
          "ekyc_info" : scope.ekyc_info
        }
        scope.userService.generate_checksum(formData).then(function(response){
          if(response && response.meta.result == 'success'){
            scope.aadhaar_endpoint = $sce.trustAsResourceUrl(response.aadhaar_endpoint);
            scope.checksum = response.checksum;
            scope.client_id = response.client_id;
            scope.collect_response_url = response.collect_response_url;
            submitAadhaarInfo(scope.aadhaar_endpoint,scope.ekyc_info.aadhaar_number,scope.ekyc_info.mobile_number,response.request_date,scope.checksum,scope.collect_response_url,scope.client_id);
          }
          else{
            notificationService.error(response.meta.message)
          }
        })
      }

      scope.validate_input_aadhaar = function(){
        scope.flags.invalid_aadhaar_or_vid = false
        if(!scope.aadhaar)
          scope.flags.invalid_aadhaar_or_vid = true
        else{
          if(scope.aadhaar.length==12){
            if(!scope.is_aadhaar_valid(scope.aadhaar) && (['gem.test','gem-site.inf.sit.gemorion.org','mkp-training.gemorion.org'].indexOf(window.location.host)==-1)){
              scope.flags.invalid_aadhaar_or_vid = true
            }
          }
          else if(scope.aadhaar.length!=16){
            scope.flags.invalid_aadhaar_or_vid = true
          }
        }
      }

      scope.is_aadhaar_valid = function(aadhaar_number){
        if(!aadhaar_number || aadhaar_number.length!=12)
          return false;
        //VERHOEFF ALGORITHM of UIDAI
        var Verhoeff = {
          "d":[[0,1,2,3,4,5,6,7,8,9],
            [1,2,3,4,0,6,7,8,9,5],
            [2,3,4,0,1,7,8,9,5,6],
            [3,4,0,1,2,8,9,5,6,7],
            [4,0,1,2,3,9,5,6,7,8],
            [5,9,8,7,6,0,4,3,2,1],
            [6,5,9,8,7,1,0,4,3,2],
            [7,6,5,9,8,2,1,0,4,3],
            [8,7,6,5,9,3,2,1,0,4],
            [9,8,7,6,5,4,3,2,1,0]],
          "p":[[0,1,2,3,4,5,6,7,8,9],
            [1,5,7,6,2,8,3,0,9,4],
            [5,8,0,3,7,9,6,1,4,2],
            [8,9,1,6,0,4,3,5,2,7],
            [9,4,5,3,1,2,6,8,7,0],
            [4,2,8,6,5,7,3,9,0,1],
            [2,7,9,3,8,0,6,4,1,5],
            [7,0,4,6,9,1,3,2,5,8]],
          "j":[0,4,3,2,1,5,6,7,8,9],
        }

        var c = 0;
        aadhaar_number.replace(/\D+/g,"").split("").reverse().join("").replace(/[\d]/g, function(u, i, o){
          c = Verhoeff.d[c][Verhoeff.p[i&7][parseInt(u,10)]];
        });
        if(c==0){
          return true;
        }
        else{
          return false;
        }
      }
    },
    templateUrl:"/javascripts/site_angular/app-common/views/ekyc_template.html"
  }
}])

.directive('mobileOtp',['userService', '$interval', '$timeout', 'notificationService',function(userService, $interval, $timeout, notificationService) {
  return{
    restrict: 'AE',
    transclude: true,
    scope: {
      mobile : '=mobile',
      location : '@location',
      mobileSuccess : '=mobileSuccess',
      type : '@type'
    },
    link: function(scope, element, attr, ngModelCtrl) {
      scope.userService = userService
      scope.flags = {}

      if(scope.mobileSuccess)
        scope.mobile_info = {mobile: scope.mobile}
      else
        scope.mobile_info = {}

      scope.validMobileDataPresent = function(){
        return scope.mobile_info.mobile && scope.mobile_info.verify_mobile && (scope.mobile_info.mobile == scope.mobile_info.verify_mobile)
      }

      scope.sendOtp = function() {
        if(scope.validMobileDataPresent()){
          var formData = {
            context : scope.location,
            mobile : scope.mobile_info.mobile,
            type : scope.type
          }
          return userService.sendMobileOtp(formData)
        }
      }

      scope.resendOtp = function() {
        if(scope.validMobileDataPresent()){
          var formData = {
            context : scope.location,
            mobile : scope.mobile_info.mobile,
            resend : true,
            type : scope.type
          }
          return userService.sendMobileOtp(formData)
        }
      }

      scope.verifyOtp = function(otp) {
        if(scope.validMobileDataPresent()){
          var formData = {
            context : scope.location,
            otp: otp,
            type : scope.type,
            mobile : scope.mobile_info.mobile,
          }
          userService.verifyMobileOtp(formData).then(function(response){
            if(response.meta.result == "success"){
              scope.flags.mobile_verification_failed = false
              scope.mobileSuccess = true;
              scope.mobile = scope.mobile_info.mobile
            }else{
              scope.mobileSuccess = false
              scope.flags.mobile_verification_failed = true
              scope.mobileSuccess = false
              notificationService.error(response.meta.message.join(','))
            }
          })
        }
      }

    },
    templateUrl:"/javascripts/site_angular/app-common/views/mobile_otp_template.html"
  }
}])

.filter('secondsToDateTime', [function() {
    return function(seconds) {
        return new Date(1970, 0, 1).setSeconds(seconds)
    }
}])

.directive('otpVerify',['userService','notificationService','$timeout',function(userService,notificationService,$timeout) {
  return{
    restrict: 'AE',
    transclude: true,
    scope: {
      location : '@location',
      otpSuccess : '=otpSuccess',
      verifiabletype: '@verifiabletype',
      verifiableid: '=verifiableid',
      buttonName : "@",
      context: "@",
      extraParams: "=extraParams",
      onFailure: "=",
      onSuccess: "=",
      disabledFlag: "=",
      serviceToTrigger: "=",
    },
    link: function(scope, element, attr, ngModelCtrl, timeout) {
      scope.userService = userService
      scope.otp_info = {};
      scope.popup_displayed = false
      scope.flags = { "clearEmailError" : false}
      scope.verified_count=0
      scope.counter = 1
      scope.onTimeout = function(){
        if (scope.counter > 0) scope.counter--;
          mytimeout = $timeout(scope.onTimeout,1000);
      }
      var mytimeout = $timeout(scope.onTimeout,1000);
      scope.sendOtp = function() {   
        var formData = {
          verifiable_id: scope.verifiableid,
          verifiable_type: scope.verifiabletype,
          context: scope.context
        }

        userService.sendOtp(formData).then(function(response){
          scope.counter = 1
          scope.verified_count=0
          if(response.meta.result == "success"){
            userService.email_verify_otp = response.verification_code
            scope.flags.otp_sent = true;
            scope.flags.otp_sent_error = false
            scope.flags.otp_sent_msg = response.message
          }
          else if(response.meta && response.meta.message && response.meta.message.length>0){
            scope.flags.otp_sent_error = true
            scope.flags.otp_sent = false
            scope.flags.show_error_msg = response.meta.message.join(',')
          }
        })
        
      }

       scope.showOtp = function() {
        scope.show_verify_otp = true
        if( scope.counter == 0 || scope.popup_displayed == false )
          {
            scope.sendOtp()
            scope.popup_displayed = true 
          }

      }

      scope.hideOtp = function() {
        scope.show_verify_otp = false
      }

      scope.resendOtp = function() {
        var formData = {
          verifiable_id: scope.verifiableid,
          verifiable_type: scope.verifiabletype,
          context: scope.context
        }
        userService.sendOtp(formData).then(function(response){
          scope.verified_count = 0
          if(response.meta.result == "success"){
            userService.email_verify_otp = response.verification_code
            scope.flags.otp_resent = true
            scope.flags.otp_sent_error = false
            scope.flags.otp_sent_msg = response.message
          }
          else if(response.meta && response.meta.message && response.meta.message.length>0){
            scope.flags.otp_sent_error = true
            scope.flags.otp_resent = false
            scope.flags.show_error_msg = response.meta.message.join(',')
          }
        })
        scope.counter = 1
      }

      scope.verifyOtp = function() {
        if (scope.verified_count>=5)
        {
          scope.counter=0
        }
        scope.verified_count+=1
        var formData = {
          verifiable_id: scope.verifiableid,
          verifiable_type: scope.verifiabletype,
          context: scope.context,
          otp_params: {
           otp: scope.otp_info.mobile_verify_otp
         },
         extra_params: scope.extraParams
        }
        var serviceToTrigger = scope.serviceToTrigger || userService.verifyOtp;
        serviceToTrigger(formData).then(function(response){
          if(response.meta.result == "success"){
            notificationService.success(response.message)
            scope.flags.otp_verification_success = true;
            scope.flags.otp_verification_failed = false
            scope.otpSuccess = true;
            if(scope.onSuccess)
              scope.onSuccess()
          }else{
            notificationService.error(response.meta.message.join(','))
            scope.flags.otp_verification_failed = true;
            scope.flags.otp_verification_success = false
            scope.flags.otp_verification_failed_msg = response.meta.message.join(',')
            if(scope.onFailure)
              scope.onFailure(response)
          }
        })
      }

      scope.otpInput = {
        onDone: function(value){
          scope.otp_info.mobile_verify_otp = value
        },
        onChange: function(value){
          scope.otp_info.mobile_verify_otp = value
        }
      }
    },
    templateUrl:"/javascripts/site_angular/app-common/views/otp_verify_template.html"
  }
}])

.directive('addressTemplate',['organizationService',function(organizationService){
	return{
		restrict: 'AE',
		scope:{
			formName: '=',
			address: '='
		},
		templateUrl:"/javascripts/site_angular/app-common/views/address_template.html",
		link: function(scope, element, attr, ngModelCtrl){
			scope.ziplist = [];
			scope.$watch('address.pin_code', function(query) {
				if (query && query.length < 4) {
					scope.ziplist = [];
				}
			});

			scope.getziplist = function(query) {
				if(scope.ziplist.length){
					scope.ziplist = scope.ziplist.filter(function(zip) {
						return zip.indexOf(query)>-1;
					})
					return scope.ziplist;
				}
				return organizationService.getZipList(query).then(function(response){
					if(response && response.zips){
						scope.ziplist = response.zips;
					}else{
						scope.invalid_pin_code = true;
					}
					return scope.ziplist;
				})
			}

			scope.getAddressDetailsFromZip = function(){
				if(scope.address.pin_code && scope.address.pin_code.length >= 6){
					var form_data = {'zip':_.toString(scope.address.pin_code)};
					organizationService.getAddressDetailsFromZip(form_data).then(function(response){
						if(response && response.state && response.city){
							scope.address.state = response.state;
							scope.address.district = response.city;
							scope.invalid_pin_code = false;
						}
						else{
							scope.invalid_pin_code = true;
						}
					});
				}else{
					scope.invalid_pin_code = true;
				}
			}
		}
	}
}])

.directive('paginationControl',['userService',function(userService) {
	return{
		restrict: 'EA',
		scope:{
			itemsPerPage: '=',
			pageControls: '=', //object
			totalItems: '=',
			changeView: '@changeView',
			changePage: '&'
		},
		transclude: true,
		templateUrl: "/javascripts/site_angular/app-common/views/pagination_control.html",
		link: function (scope, element, attrs) {
			scope.data_per_page_list = [2,5,10,25,50,100];
			scope.changeView = scope.changeView ? scope.changeView : 'true';
			scope.itemsPerPage = (scope.itemsPerPage && (_.isNumber(scope.itemsPerPage))) ? scope.itemsPerPage : 2;
			scope.viewby = scope.itemsPerPage;
			scope.totalItems = (scope.totalItems && (_.isNumber(scope.totalItems))) ? scope.totalItems : 0;
			scope.pageControls = scope.pageControls ? scope.pageControls : { "currentPage" : 1};
			scope.maxSize = 6; //Number of pager buttons to show

			scope.setPage = function (pageNo) {
				scope.pageControls.currentPage = pageNo;
			}

		 scope.setItemsPerPage = function(num) {
			scope.itemsPerPage = num;
			scope.pageControls.currentPage = 1; //reset to first page
		 }
		}
	}
}])

.directive('tableSort',['userService',function(userService) {
	return{
		restrict: 'E',
		scope:{
			sortByField: '=',
			sortAsc: '='
		},
		controller: ['$scope', function($scope) {
			this.orderBy = function(field) {
				$scope.sortByField = field;
				$scope.sortAsc = !$scope.sortAsc;
			}
			this.getChoosenField = function() {
				return $scope.sortByField;
			}
			this.getChoosenSortType = function() {
				return $scope.sortAsc;
			}
		}]
	}
}])

.directive("sortBy",['userService',function(userService) {
  return {
    restrict: "E",
    require: "^tableSort",
		scope:{
			displayName: '@',
			fieldName: '@',
		},
    link: function (scope, element, attrs, tableSortCtrl) {
			scope.orderBy = function(){
				tableSortCtrl.orderBy(scope.fieldName);
			}
			scope.getChoosenField = function(){
				return tableSortCtrl.getChoosenField();
			}
			scope.getChoosenSortType = function() {
				return tableSortCtrl.getChoosenSortType();
			}
    },
		templateUrl: "/javascripts/site_angular/app-common/views/table_sort.html"
  }
}])

.directive('babCurrency', [function() {
	return {
		restrict : 'EA',
		transclude : true,
		scope : {
			'amount' : '=amount',
			'symbol' : '=symbol'
		},
		controller : ['$scope', '$filter', function($scope, $filter){
			$scope.getSymbol = function(symbol){
				symbol = !symbol ? 'INR' : symbol;
				symbol = symbol == 'INR' ? "₹ ": symbol;
				return symbol
			}
			$scope.getCurrencyString = function(amount){
				amount = !amount ? 0 : amount;
				return amount
			}
		}],
		template : "<span class='m-w'><span class='m-c c-inr'>{{getSymbol(symbol)}}</span><span class='m-v'>{{getCurrencyString(amount)}}</span></span>"
	}
}])

.filter('convertToCamelCase', function() {
  return function(str) {
	    if(!str) return "";
	    return str.replace(/_/g," ");
	  }
})

.filter('convertToSingleWord', function() {
  return function(str) {
	    if(!str) return "";
	    return str.replace(/ /g,"-");
	  }
})

.directive('productLinkedService',['consigneeService','compareService','notificationService','babRA', function(consigneeService, compareService, notify, babRA) {
  return{
    restrict: 'AE',
    transclude: true,
    scope:{
      catalogId: '=catalogId',
      services: '=',
      selectedServiceOffering: '='
    },
    templateUrl:"/javascripts/site_angular/app-common/views/product_linked_service.html",
    controller: ['$scope', '$filter', function($scope,$filter){

      $scope.selectedService = {'value' : null}
      var toDay = new Date()
      var start_toDay = new Date()
      $scope.datepicker = {
        start_date: {
          opened: false,
          options: {
            formatYear: 'yy',
            startingDay: 1,
            minDate:start_toDay.setDate(start_toDay.getDate()+1)
          }
        },
        end_date: {
          opened: false,
          options: {
            formatYear: 'yy',
            startingDay: 1,
            minDate:toDay.setDate(toDay.getDate()+1)
          }
        },
        open: function(type){
          $scope.datepicker[type].opened = true;
        }
      }
      $scope.serviceObj = {}
      $scope.serviceObj.show_consignee_popup=false
      $scope.serviceObj.catalogId = $scope.catalogId


      $scope.select_service = function(ser_name,selected){
        $scope.selectedService.value = null
        angular.forEach($scope.services, function(service, index){
          if(service.name != ser_name){
            service.selected = false;
          }
          else if(selected){
            service.selected = true;
            $scope.selectedService.value = service
            $scope.serviceObj.type = service.name
            $scope.serviceObj.period = service.config.contract_period
            $scope.serviceObj.amount = service.amount
            $scope.serviceObj.end_date=''
            $scope.serviceObj.start_date=''
            $scope.getCurrentCart(service.service_details.id).then(function(response){
              set_compatibility_data(response)
            })
          }
        });
       }
      
      var calcDays = function(firstDate, secondDate){
        var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds
        return Math.round(Math.abs((firstDate - secondDate)/(oneDay))) + 1;
      }
      var set_compatibility_data = function(compatibility_data){
        $scope.serviceObj.is_cart_compatible = compatibility_data.is_compatible
        var today = new Date()
        today.setHours(0,0,0,0)
        if($scope.serviceObj.is_cart_compatible && !_.isEmpty(compatibility_data.contract_date)){
          $scope.serviceObj.compatible_contract_date = compatibility_data.contract_date
          $scope.serviceObj.compatible_contract_date.start_date = new Date($scope.serviceObj.compatible_contract_date.start_date)
          $scope.serviceObj.compatible_contract_date.end_date = new Date($scope.serviceObj.compatible_contract_date.end_date)
          if ($scope.serviceObj.compatible_contract_date.start_date > today && $scope.serviceObj.compatible_contract_date.end_date >= today.setDate(today.getDate()+parseInt($scope.serviceObj.period))) {
            $scope.serviceObj.compatible_contract_date.start_date = $filter('date')(new Date($scope.serviceObj.compatible_contract_date.start_date),'yyyy-MM-dd')
            $scope.serviceObj.start_date = $scope.serviceObj.compatible_contract_date.start_date
            $scope.serviceObj.compatible_contract_date.end_date = $filter('date')(new Date($scope.serviceObj.compatible_contract_date.end_date),'yyyy-MM-dd')
            $scope.serviceObj.end_date = $scope.serviceObj.compatible_contract_date.end_date
            $scope.serviceObj.is_contrat_dates_available = true
          }else {
            $scope.serviceObj.is_contrat_dates_available = false
          }
        }else{
          $scope.serviceObj.is_contrat_dates_available = false
        }
      }
      $scope.getCurrentCart = function(srvc_id){
        return babRA.one('checkouts/get_current_cart').customGET('',
        {
          'browse_node_id': srvc_id,
          'is_bid_buying': true
        }
          ).then(function(response){
          return response;
        });
      }

      $scope.create_new_cart = function(){
        console.log("clearing cart")
        $scope.serviceObj.is_cart_compatible = false
        $scope.serviceObj.end_date=''
        $scope.serviceObj.start_date=''
      }

      $scope.set_new_cart = function(v){
        $scope.serviceObj.new_cart = v;
        $scope.serviceObj.open_cart_popup = false;
        $scope.submit()
      }

      $scope.pre_add_to_cart = function(){
        if($scope.serviceObj.is_cart_compatible && $scope.serviceObj.compatible_contract_date.end_date == $scope.serviceObj.end_date && $scope.serviceObj.compatible_contract_date.start_date == $scope.serviceObj.start_date){
          console.log("OPen popup")
          $scope.serviceObj.open_cart_popup = true;
        }else{
          $scope.serviceObj.new_cart = true
          console.log("No need popup",$scope.serviceObj.new_cart)
          $scope.submit()
        }
      }
      
      $scope.serviceObj.consignee_text = 'Select'
      $scope.date_formatting = function(date_type){
        if (date_type == 'start_date'){
          var toDay = $scope.serviceObj && $scope.serviceObj.start_date ? angular.copy($scope.serviceObj.start_date) : new Date()
          $scope.datepicker.end_date.options.minDate = toDay.setDate(toDay.getDate()+(parseInt($scope.serviceObj.period)-1))
          $scope.serviceObj.end_date=''
        }
        $scope.serviceObj[date_type] = $filter('date')($scope.serviceObj[date_type],'yyyy-MM-dd')
	    }

      oneDay = 24*60*60*1000;
      $scope.total_amount_calculate = function(){
        if($scope.serviceObj.start_date && $scope.serviceObj.end_date && $scope.serviceObj.consignee && $scope.serviceObj.consignee[0].delivery_state && $scope.serviceObj.consignee[0].consignee_post_id && $scope.serviceObj.consignee[0].required_quantity){
          sd = new Date($scope.serviceObj.start_date)
          ed = new Date($scope.serviceObj.end_date)
          $scope.service_days = Math.round((ed.getTime() - sd.getTime())/ oneDay) + 1
          $scope.total_amount = parseFloat($scope.serviceObj.amount) * $scope.serviceObj.consignee[0].required_quantity * ($scope.service_days/ parseFloat($scope.serviceObj.period))
        }
      }

      $scope.can_submit = function(){
        valid = false
        var today = new Date()
        if ($scope.serviceObj.consignee && $scope.serviceObj.consignee[0].delivery_state && $scope.serviceObj.consignee[0].consignee_post_id && $scope.serviceObj.consignee[0].required_quantity ) {
          $scope.serviceObj.consignee_text = 'Edit'
        }else{
          $scope.serviceObj.consignee_text = 'Select'
        }

        if($scope.serviceObj.start_date && $scope.serviceObj.end_date && $scope.serviceObj.consignee && $scope.serviceObj.consignee[0].delivery_state && $scope.serviceObj.consignee[0].consignee_post_id && $scope.serviceObj.consignee[0].required_quantity){
          valid=true
          $scope.total_amount_calculate()
        }
        else
          valid = false
        return valid
      }
      $scope.submit= function(){
        if ($scope.can_submit()) {
          compareService.add_to_cart($scope.serviceObj).then(function(response){
          if(response.meta.result == "success"){
            notify.success("Item Added to Cart")
            // $window.location.href = BAB.endpoints.app_url('site',response.redirect_url)
            if(response.number){
              BAB.Cart.setPurchase(response.number)
              BAB.Cart.show();
              if ($scope.selectedService.value) {
                $scope.getCurrentCart($scope.selectedService.value.service_details.id).then(function(response){
                  set_compatibility_data(response)
                })
              }
            }
          }else{
            notify.error(response.meta.message.join(", "))
          }
          })
        }
      }
      if($scope.selectedServiceOffering){
        $scope.select_service($scope.selectedServiceOffering, true)
      }
    }]
    
  }
}])
.directive('consigneePopup',['consigneeService',function(consigneeService) {
  return{
    restrict: 'AE',
    transclude: true,
    scope: {
      srvc: '=',
      readOnly: '=?',
      allowMultiple: '=?',
      onClose: "&",
      settings: "<?"
    },
    templateUrl:"/javascripts/site_angular/app-common/views/consignee_popup.html",
    controller: ['$scope', '$filter', function($scope, $filter){
      // $scope.srvc.show_consignee_popup = true
      $scope.initialize = function(){
        if (_.isEmpty($scope.consignee)) {
          consigneeService.init().then(function(response){
            $scope.consignee = consigneeService;
            if($scope.srvc.populateSelectedConsignee && $scope.srvc.consignee){
              $scope.consignee.selected_consignee = $scope.srvc.consignee
            }
          })
        }
      }
      $scope.initialize()
      $scope.assign_consignee = function(){
        $scope.srvc.consignee = $scope.consignee.selected_consignee
        if($scope.onClose)
          $scope.onClose()
        console.log("$scope.srvc.consignee", $scope.srvc.consignee)
      }
      $scope.closePopup = function(){
        $scope.srvc.show_consignee_popup = false
      }
    }]
    
  }
}])
.filter('newTitleCase', function() {
  return function(input) {
    input = input || '';
    return _.startCase(_.lowerCase(input));
  }
})

function validateInput(input) {
  // Remove any non-numeric characters except 'X'
  input.value = input.value.replace(/[^0-9X]/gi, '');
}

var number = $('#aadhaar_number');
var display = $('#show');

$(document).on('keyup', '#aadhaar_number', function(){
    if($('#aadhaar_number').val().length < 1){
        $('#show').text('');
    }
    else{
        var a = '';
        if($('#aadhaar_number').val().length <= 8){
            for(var i = 0; i < $('#aadhaar_number').val().length; i++){                
                a = a + 'X';           
                $('#show').text(a);  
            }
        }
        else
        {
            for(var i = 0; i < $('#aadhaar_number').val().length; i++){ 
                if(i <= 7){
                    a = a + 'X';           
                    $('#show').text(a);  
                }
                else{          
                    a = a + $('#aadhaar_number').val().substring(i,i+1);           
                    $('#show').text(a);  
                }
            }
        }
    }
});
angular.module('siteApp')

.service('approverService',['gemUsersRA','publicRA', function(gemUsersRA,publicRA){

  this.getProfileTabs = function() {
    return gemUsersRA.one('verifying_authorities').customGET('get_profile_tabs')
  }

  this.addVAUser = function(formData) {
    return publicRA.one('verifying_authorities').customPOST(formData)
  }
   this.viewUser = function() {
    return gemUsersRA.one('verifying_authorities').customGET('get_verifying_authority')}

  this.getOrgTree = function() {
    return gemUsersRA.one('verifying_authorities').customGET('get_org_tree')
  }

  this.checkApproverPresent = function(formData){
    return publicRA.one('verifying_authorities').customGET('check_approver_present',formData)
  }

}])

angular.module('siteApp')

.service('compareService',['$state', 'babRA', '$window', 'notificationService',
  function($state, babRA, $window, notify){
    var service = {
      add_to_compare: function(data) {
        return babRA.one('products').customPOST(data,'add_to_compare',{}).then(function(response){
          return response;
        });
      },
      remove_from_compare: function(data){
        return babRA.one('products').customPOST(data,'remove_from_compare',{}).then(function(response){
          return response;
        });
      },
      get_service_compare_data: function(bn_id){
        return babRA.one('products/get_compare_data').customGET('',{'browse_nodes_id': bn_id}).then(function(response){
          return response;
        });
      },
      get_multi_item_compare_data: function(p_id){
        return babRA.one('products/compare').customGET('',{'purchase_id': p_id}).then(function(response){
          return response;
        });
      },
      get_single_item_compare_data: function(bn_id){
        return babRA.one('products/compare').customGET('',{'browse_nodes_id': bn_id}).then(function(response){
          return response;
        });
      },
      get_compare_sheet_data: function(p_id){
        return babRA.one('checkouts/get_compare_sheet_data').customGET('',{'purchase_id': p_id}).then(function(response){
          return response;
        });
      },
      compare_service: function(bn_id){
        $window.location.href = '/products/ang_compare#!/compare?bn_id='+bn_id+'&type=service'
      },
      add_to_cart: function(data){
        return babRA.one('checkouts').customPOST(data,'compare_add_to_cart').then(function(response){
          return response
        })
      }
    }
    return service
  }
])

angular.module('siteApp')

.service('consigneeService',['babRA', 'notificationService' , 
  function(babRA, notify){
    var service = {
      addConsignee: function () {
        var that = this
        if(that.validate_consignee_data()){
          that.selected_consignee.push({})
        }
      },

      setConsigneeLocation: function(row){
        var that = this
        var cs = _(that.consignee_data).values().flatten().filter(function(r){return r.consignee_post_id == row.consignee_post_id}).value()[0]
        if(cs)
          row.consignee_location = cs.name
        else
          row.consignee_location = row.consignee_post_id
      },

      removeConsignee: function(index){
        this.selected_consignee.splice(index,1); 
      },
      get_states: function(){
        var that = this
        return _.keys(that.consignee_data)
      },
      is_not_uniq_consignee_data: function(){
        var that = this
        var is_error = false
        if(_.uniq(_.map(that.selected_consignee, 'consignee_post_id')).length != that.selected_consignee.length){
          notify.error('$a$.m.srvc.consignee.data.not.uniq')
          is_error = true
        }
        return is_error
      },
      validate_consignee_data: function(){
        var is_error = false;
        var that = this
        _.forEach(that.selected_consignee,function(row){
          that.consignee_error = false
          if(_.isEmpty(that.selected_consignee) || _.isEmpty(row.delivery_state) || !row.consignee_post_id || !row.required_quantity || (row.required_quantity < 1)){
            that.consignee_error = true
            is_error = true
          }
        })
        if(that.is_not_uniq_consignee_data()){
          is_error = true
        }
        return !is_error;
      },
      get_consignees_for_state: function(state){
        return this.consignee_data[state];
      },
      proceed: function(flag){
        var that = this
        if(this.validate_consignee_data()){
          if(that.is_not_uniq_consignee_data()){
            return flag
          }
          return !flag
        }
        return flag
      },
      intialize:function(){
        this.selected_consignee = [];
        this.addConsignee()
      },
      filter_out_selected_consignee_from_global: function(loc, other_locations, consignee_data){
        var consignees =  _.reject(consignee_data[loc], function(c){
          return _.findIndex(other_locations, function(lc){
            return c.delivery_state == lc.delivery_state && c.consignee_post_id == lc.consignee_post_id
          }) != -1
        })
        return consignees
      },
      get_consignee_state_dropdown: function(row, index, selected_consignee, consignee_data){
        var that = this
        var locations = _.keys(consignee_data)
        var other_locations = _.reject(selected_consignee, function(c, i){return index == i })
        var new_locations = _.reject(locations, function(loc){
          var consignees = that.filter_out_selected_consignee_from_global(loc, other_locations, consignee_data)
          return consignees.length == 0
        })
        console.log("locations", new_locations)
        return new_locations
      },
      get_consignee_addr_dropdown:  function(row, index, selected_consignee, consignee_data){
        var that = this
        var other_locations = _.reject(selected_consignee, function(c, i){return index == i })
        var consignees = that.filter_out_selected_consignee_from_global(row.delivery_state, other_locations, consignee_data)
        return consignees
      },
      setConsigneeName: function(row){
        var consignee = _.find(this.consignee_data[row.delivery_state], ['consignee_post_id', row.consignee_post_id])
        if (consignee){
          row.name = consignee.name
        }
      },
      dummy_init:function(){
        var that = this
        return babRA.one('locations/get_all_states').customGET('',
          {
            'country': 'India',
          }
        ).then(function(response){
          if(response.meta.result == 'success'){
            data = {}
            _.forEach(response.states,function(s){
              data[s] = [{
                'name': 'dummy',
                'consignee_post_id': 'dummy',
                'delivery_state': s
              }]
            });
            that.consignee_data = data
            that.intialize();
          }else{
            notify.error(response.meta.message.join(", "))
          }
        });
      },
      init:function(){
        var that = this
        return babRA.one('browse_nodes/get_consignees').get().then(function(response){
          if(response.meta.result == 'success'){
            console.log(response)
            that.consignee_data = response.consignees;
            that.intialize();
          }else{
            notify.error(response.meta.message.join(", "))
          }
        });
      }
    }
    return service;
  }
])

angular.module('siteApp')
.directive('cookieBasedVerificationTools', ['notificationService','$cookies', function(notificationService, $cookies){
  return {
    restrict: 'E',
    scope: {
      location:'@',
      buttonAddon : "@",
      verifiableId: '@',
      verifiableType: '@',
      ebillEnabled: '@',
      context: '@',
      onFailure : '=',
      onSuccess : '='
    },
    templateUrl: '/javascripts/site_angular/app-common/views/cookie_based_verification_tools.html',
    link: function($scope, element, attributes){
      $scope.verificationTypes = $cookies.get('gdvts_') || []

      $scope.checkAvailability = function(type){
        return $scope.verificationTypes.indexOf(type)!=-1
      }

      $scope.getButtonName = function(type){
         if(type =="otp"){
          return "Verify with OTP "+ $scope.buttonAddon
        }
        else if (type == "esign"){
          return "E-sign "+ $scope.buttonAddon
        }
        else if (type =="dsc"){
          return "DSC Verify  "+ $scope.buttonAddon
        }
      }

      // To check the e-bill enabled flaged.
      $scope.checkEbillEnabled = function(flag){
        if(flag == "true"){
          return true
        }else{
          return false
        }
      }
    }
  }
}])
angular.module('siteApp')

.directive('dobDropdown',function(){
  return {
    restrict: 'E',
    templateUrl: '/javascripts/site_angular/app-common/views/dob_dropdown_template.html',
    scope: {
      dob: '='
    },
    controller: 'DOBController'
  }
})

.controller('DOBController',['$scope','DOBService', function($scope, DOBService) {

  $scope.calcDays = DOBService.getDays();
  $scope.calcMonths = DOBService.getMonths();
  $scope.calcYears = DOBService.getYears();
  $scope.selectedDay = 0; $scope.selectedMonth = 0;

  if(!$scope.dob)
    $scope.dob = {day: {name: "Day", value: ""},
                  month: {name: "Month", value: ""},
                  year: {name: "Year", value: ""},
                  collection: {}
                  };

  $scope.$watch('dob.day', function (obj) {
    if(obj){
      $scope.selectedDay = obj.name;
      DOBService.changeDay(obj.name, function(err, result) {
        $scope.calcMonths = DOBService.getMonths(result);
        if(! _.find($scope.calcMonths, function(o) { return o.value == $scope.dob.month.value; })){
          $scope.dob.month = {name: "Month", value: ""};
        }
      });
    }
  });

  $scope.$watch('dob.month', function (obj) {
    if(obj){
      $scope.selectedMonth = obj.name;
      DOBService.changeMonth({"day":$scope.selectedDay, "month":obj.value}, function(err, result) {
        $scope.calcYears = DOBService.getYears(result);
        var found = _.find($scope.calcYears, function(o) { return o.value == $scope.dob.year.value; })
        if(! _.find($scope.calcYears, function(o) { return o.value == $scope.dob.year.value; })){
          $scope.dob.year = {name: "Year", value: ""};
        }
      });
    }
  });

  $scope.$watchCollection('[dob.day, dob.month, dob.year]', function(newValues, oldValues){
    $scope.dob.collection = newValues[2].value+'-'+newValues[1].value+"-"+newValues[0].value;
    if($scope.dob.day.value && $scope.dob.month.value && $scope.dob.year.value){
      $scope.dob.invalid = false
    }else{
      $scope.dob.invalid = true
    }

  });

}])

.factory('DOBService', function() {
  var minimumAge = 18;var maximumAge = 100;

  var factory = {
    getDays: function(){
      days = [{name: "Day", value: ""}];
      for(i=1;i<=31;i++){
        if(i<=9){
          var val = '0' + i;
        } else {
          var val = i;
        }
        days.push({name: i, value:i});
      }
      return days;
    },
    getMonths: function(data){
      var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      months = [{name: "Month", value: ""}];
      for(i=1;i<=12;i++){
        if(i<=9){
          var val = '0' + i;
        } else {
          var val = i.toString();
        }
        months.push({name: monthNames[i - 1], value:val});
      }
      if(data){
        var n = data.length;
        for(j=n-1;j>=0;j--){
          months.splice(parseInt(data[j]), 1);
        }
      }
      return months;
    },
    getYears: function(data){
      years = [{name: "Year", value: ""}];
      var date = new Date();
      var year = date.getFullYear();
      var start = year - minimumAge;
      var count = year - maximumAge;
      for(i=start;i>=count;i--){
        years.push({name: i.toString(), value:i.toString()});
      }
      if(data){
        var n = data.length;
        for(j=n-1;j>=0;j--){
          years.splice(parseInt(data[j]), 1);
        }
      }
      return years;
    },
    changeDay: function(value, done) {
      data = [];
      if(value >=1 && value <=29){
        data = [];
      }else if(value == 30){
        data = ['02'];
      }else if(value == 31){
        data = ['02', '04', '06', '09', '11'];
      }
      done(null, data);
    },
    changeMonth: function(obj, done) {
      data = [];
      if(obj.day ==29 && obj.month == '02'){
        var years = factory.getYears();
        var index = 0;
        for(var item in years){
          var leap = !((years[item].value % 4) || (!(years[item].value % 100) && (years[item].value % 400)));
          if(leap===false){
            data.push(index);
          }
          index++;
        }
      }
      done(null, data);
    }
  }

  return factory;

});

angular.module('siteApp')

.directive('emailOtp',['userService', 'notificationService',function(userService, notificationService) {
  return{
    restrict: 'E',
    transclude: true,
    scope: {
      email : '=',
      location : '@',
      flags : '=',
      type: '@',
      reload : "=?",
      skipEmailUniqueness : '=?',
      orgData : '@',
      confirmEmailForm: "=?form",
      emailHint: "@?",
    },
    link: function(scope, element, attr, ngModelCtrl) {
      scope.userService = userService
      var check_email_uniqueness = !scope.skipEmailUniqueness
      var org_details = {}
      scope.initialize = function(){
        if(scope.flags.email_verification_success){
          scope.flags.email_verification_failed = false
          scope.email_info = {email: scope.email};
        }
        else{
          scope.email_info = {};
        }

        if(scope.location == "seller_office_location_email"){
          scope.flags.email_verification_success = false
          scope.email_info = { email : scope.email}
          scope.reload = false
        }
      }

      scope.$watch('[email,reload]', function() {
        if(!scope.email || scope.reload){
          scope.initialize()
        }
      });

      scope.verifyEmailExists = function() {
        scope.flags.email_exists = false;
        if(scope.email_info.email && scope.type && check_email_uniqueness){
          scope.userService.emailExists({email: scope.email_info.email, user_type: scope.type}).then(function(response){
            if(response){
              scope.flags.email_exists = true;
              scope.email_info.verify_email = '';
            }
          });
        }
      }

      scope.orgFormData = function() {
        if (scope.orgData) {
          scope.orgDetails = JSON.parse(scope.orgData)
          if (scope.orgDetails && scope.orgDetails.org_type && scope.orgDetails.org_type.name)
          org_details = {'organization_type': scope.orgDetails.org_type.name}
          var temp = ["state","ministry","department","organization"]
            temp.forEach((key, value) => {
              if (scope.orgDetails && scope.orgDetails[key] && scope.orgDetails[key]['entity_id'])
                org_details[key] = scope.orgDetails[key]['name']
            });
        }
      }

      scope.validateEmail = function() {
        if(scope.email_info.email && scope.type){
          scope.orgFormData();
          scope.userService.valid_emailid(scope.email_info.email,scope.type,org_details).then(function(res){
            if(res){
              scope.flags.invalid_emailid = false
              scope.confirmEmailForm.email_id.$setValidity("valid_email", true)
              scope.verifyEmailExists();
            }
            else {
              scope.flags.invalid_emailid = true
              scope.confirmEmailForm.email_id.$setValidity("valid_email", false)
            }
          })
        }
        else{
          scope.flags.invalid_emailid = true
          scope.confirmEmailForm.email_id.$setValidity("valid_email", false)
        }
      }

      scope.sendOtp = function() {
        if(scope.validEmailDataPresent()){
          var formData = {
            context : scope.location,
            email : scope.email_info.email,
            type : scope.type,
            org_details: org_details
          }
          scope.masked_email = scope.maskedEmail(scope.email_info.email)
          return userService.sendEmailOtp(formData)
        }
      }

      scope.validEmailDataPresent = function(){
        return scope.email_info.email && scope.email_info.verify_email && (scope.email_info.email == scope.email_info.verify_email) && (!scope.flags.email_exists) && (!scope.flags.invalid_emailid)
      }

      scope.resendOtp = function() {
        if(scope.validEmailDataPresent()){
          // scope.flags.disable_resend = true
          var formData = {
            context : scope.location,
            email : scope.email_info.email,
            resend : true,
            type : scope.type,
            org_details: org_details
          }
          scope.masked_email = scope.maskedEmail(scope.email_info.email)
          return userService.sendEmailOtp(formData)
        }
      }

      scope.verifyOtp = function(otp) {
        if(scope.validEmailDataPresent()){
          var formData = {
            context : scope.location,
            otp: otp,
            type : scope.type,
            email : scope.email_info.email,
            org_details: org_details
          }

          userService.verifyEmailOtp(formData).then(function(response){
            if(response.meta.result == "success"){
              scope.flags.email_verification_success = true;
              scope.flags.email_verification_failed = false
              scope.email = scope.email_info.email;
            }else{
              scope.flags.email_verification_success = false
              scope.flags.email_verification_failed = true;
              notificationService.error(response.meta.message.join(','))
            }
          })
        }
      }

      scope.maskedEmail = function(email) {
        if(email) {
          masked_email = email.split('@')
          masked_email[0] = masked_email[0].replace(/(?!^.?).(?!.{0}$)/g, '#')
          return masked_email.join('@')
        }
      }
      scope.initialize()
    },
    templateUrl:"/javascripts/site_angular/app-common/views/email_otp_template.html",
  }
}])
var Aes={};Aes.cipher=function(input,w){var Nb=4;var Nr=w.length/Nb-1;var state=[[],[],[],[]];for(var i=0;i<4*Nb;i++){state[i%4][Math.floor(i/4)]=input[i];}state=Aes.addRoundKey(state,w,0,Nb);for(var round=1;round<Nr;round++){state=Aes.subBytes(state,Nb);state=Aes.shiftRows(state,Nb);state=Aes.mixColumns(state,Nb);state=Aes.addRoundKey(state,w,round,Nb);}state=Aes.subBytes(state,Nb);state=Aes.shiftRows(state,Nb);state=Aes.addRoundKey(state,w,Nr,Nb);var output=new Array(4*Nb);for(var i=0;i<4*Nb;i++){output[i]=state[i%4][Math.floor(i/4)];}return output;};Aes.keyExpansion=function(key){var Nb=4;var Nk=key.length/4;var Nr=Nk+6;var w=new Array(Nb*(Nr+1));var temp=new Array(4);for(var i=0;i<Nk;i++){var r=[key[4*i],key[4*i+1],key[4*i+2],key[4*i+3]];w[i]=r;}for(var i=Nk;i<(Nb*(Nr+1));i++){w[i]=new Array(4);for(var t=0;t<4;t++){temp[t]=w[i-1][t];}if(i%Nk==0){temp=Aes.subWord(Aes.rotWord(temp));for(var t=0;t<4;t++){temp[t]^=Aes.rCon[i/Nk][t];}}else{if(Nk>6&&i%Nk==4){temp=Aes.subWord(temp);}}for(var t=0;t<4;t++){w[i][t]=w[i-Nk][t]^temp[t];}}return w;};Aes.subBytes=function(s,Nb){for(var r=0;r<4;r++){for(var c=0;c<Nb;c++){s[r][c]=Aes.sBox[s[r][c]];}}return s;};Aes.shiftRows=function(s,Nb){var t=new Array(4);for(var r=1;r<4;r++){for(var c=0;c<4;c++){t[c]=s[r][(c+r)%Nb];}for(var c=0;c<4;c++){s[r][c]=t[c];}}return s;};Aes.mixColumns=function(s,Nb){for(var c=0;c<4;c++){var a=new Array(4);var b=new Array(4);for(var i=0;i<4;i++){a[i]=s[i][c];b[i]=s[i][c]&128?s[i][c]<<1^283:s[i][c]<<1;}s[0][c]=b[0]^a[1]^b[1]^a[2]^a[3];s[1][c]=a[0]^b[1]^a[2]^b[2]^a[3];s[2][c]=a[0]^a[1]^b[2]^a[3]^b[3];s[3][c]=a[0]^b[0]^a[1]^a[2]^b[3];}return s;};Aes.addRoundKey=function(state,w,rnd,Nb){for(var r=0;r<4;r++){for(var c=0;c<Nb;c++){state[r][c]^=w[rnd*4+c][r];}}return state;};Aes.subWord=function(w){for(var i=0;i<4;i++){w[i]=Aes.sBox[w[i]];}return w;};Aes.rotWord=function(w){var tmp=w[0];for(var i=0;i<3;i++){w[i]=w[i+1];}w[3]=tmp;return w;};Aes.sBox=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22];Aes.rCon=[[0,0,0,0],[1,0,0,0],[2,0,0,0],[4,0,0,0],[8,0,0,0],[16,0,0,0],[32,0,0,0],[64,0,0,0],[128,0,0,0],[27,0,0,0],[54,0,0,0]];Aes.Ctr={};function encryptJS(plaintext,password,nBits){var blockSize=16;if(!(nBits==128||nBits==192||nBits==256)){return"";}plaintext=Utf8.encode(plaintext);password=Utf8.encode(password);var nBytes=nBits/8;var pwBytes=new Array(nBytes);for(var i=0;i<nBytes;i++){pwBytes[i]=isNaN(password.charCodeAt(i))?0:password.charCodeAt(i);}var key=Aes.cipher(pwBytes,Aes.keyExpansion(pwBytes));key=key.concat(key.slice(0,nBytes-16));var counterBlock=new Array(blockSize);var nonce=(new Date()).getTime();var nonceSec=Math.floor(nonce/1000);var nonceMs=nonce%1000;for(var i=0;i<4;i++){counterBlock[i]=(nonceSec>>>i*8)&255;}for(var i=0;i<4;i++){counterBlock[i+4]=nonceMs&255;}var ctrTxt="";for(var i=0;i<8;i++){ctrTxt+=String.fromCharCode(counterBlock[i]);}var keySchedule=Aes.keyExpansion(key);var blockCount=Math.ceil(plaintext.length/blockSize);var ciphertxt=new Array(blockCount);for(var b=0;b<blockCount;b++){for(var c=0;c<4;c++){counterBlock[15-c]=(b>>>c*8)&255;}for(var c=0;c<4;c++){counterBlock[15-c-4]=(b/4294967296>>>c*8);}var cipherCntr=Aes.cipher(counterBlock,keySchedule);var blockLength=b<blockCount-1?blockSize:(plaintext.length-1)%blockSize+1;var cipherChar=new Array(blockLength);for(var i=0;i<blockLength;i++){cipherChar[i]=cipherCntr[i]^plaintext.charCodeAt(b*blockSize+i);cipherChar[i]=String.fromCharCode(cipherChar[i]);}ciphertxt[b]=cipherChar.join("");}var ciphertext=ctrTxt+ciphertxt.join("");ciphertext=Base64.encode(ciphertext);return ciphertext;}var Base64={};Base64.code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";Base64.encode=function(str,utf8encode){utf8encode=(typeof utf8encode=="undefined")?false:utf8encode;var o1,o2,o3,bits,h1,h2,h3,h4,e=[],pad="",c,plain,coded;var b64=Base64.code;plain=utf8encode?str.encodeUTF8():str;c=plain.length%3;if(c>0){while(c++<3){pad+="=";plain+="\0";}}for(c=0;c<plain.length;c+=3){o1=plain.charCodeAt(c);o2=plain.charCodeAt(c+1);o3=plain.charCodeAt(c+2);bits=o1<<16|o2<<8|o3;h1=bits>>18&63;h2=bits>>12&63;h3=bits>>6&63;h4=bits&63;e[c/3]=b64.charAt(h1)+b64.charAt(h2)+b64.charAt(h3)+b64.charAt(h4);}coded=e.join("");coded=coded.slice(0,coded.length-pad.length)+pad;return coded;};Base64.decode=function(str,utf8decode){utf8decode=(typeof utf8decode=="undefined")?false:utf8decode;var o1,o2,o3,h1,h2,h3,h4,bits,d=[],plain,coded;var b64=Base64.code;coded=utf8decode?str.decodeUTF8():str;for(var c=0;c<coded.length;c+=4){h1=b64.indexOf(coded.charAt(c));h2=b64.indexOf(coded.charAt(c+1));h3=b64.indexOf(coded.charAt(c+2));h4=b64.indexOf(coded.charAt(c+3));bits=h1<<18|h2<<12|h3<<6|h4;o1=bits>>>16&255;o2=bits>>>8&255;o3=bits&255;d[c/4]=String.fromCharCode(o1,o2,o3);if(h4==64){d[c/4]=String.fromCharCode(o1,o2);}if(h3==64){d[c/4]=String.fromCharCode(o1);}}plain=d.join("");return utf8decode?plain.decodeUTF8():plain;};var Utf8={};Utf8.encode=function(strUni){var strUtf=strUni.replace(/[\u0080-\u07ff]/g,function(c){var cc=c.charCodeAt(0);return String.fromCharCode(192|cc>>6,128|cc&63);});strUtf=strUtf.replace(/[\u0800-\uffff]/g,function(c){var cc=c.charCodeAt(0);return String.fromCharCode(224|cc>>12,128|cc>>6&63,128|cc&63);});return strUtf;};Utf8.decode=function(strUtf){var strUni=strUtf.replace(/[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g,function(c){var cc=((c.charCodeAt(0)&15)<<12)|((c.charCodeAt(1)&63)<<6)|(c.charCodeAt(2)&63);return String.fromCharCode(cc);});strUni=strUni.replace(/[\u00c0-\u00df][\u0080-\u00bf]/g,function(c){var cc=(c.charCodeAt(0)&31)<<6|c.charCodeAt(1)&63;return String.fromCharCode(cc);});return strUni;};
angular.module('siteApp')
.directive('esignVerify', ['gemUsersRA','$q', 'notificationService','confirmModal', function(gemUsersRA, $q,notificationService, confirmModal){
  return {
    restrict: 'E',
    scope: {
      verifiableId: '@',
      verifiableType: '@',
      context: '@',
      esignButtonName: '@',
      dscButtonName: '@',
      verificationTypes:'@'
    },
    templateUrl: '/javascripts/site_angular/app-common/views/esign_verify.html',
    link: function($scope, element, attributes){


      $scope.checkAvailability = function(type){
        return $scope.verificationTypes.indexOf(type)!=-1
      }

      $scope.verifyWithEsign = function(){
        var modalContent = {
          closeButtonText: 'Cancel',
          actionButtonText: 'Agree',
          headerText: "Consent for E-sign",
          bodyText: 'I provide my consent to use my KYC data for e-signing using emudhra.'
        }
        collectBuyerConsent(modalContent).then(function(success){
          initiateEsign('esign')
        },function(rejected){
        })
      }

      $scope.verifyWithDsc = function(){
        initiateEsign('dsc')
      }

      var collectBuyerConsent = function(modalContent){
        var modalOptions = {
          animation: false,
          size: 'sm',
          appendTo: angular.element(".buyer-consent-modal")
        }
        return confirmModal.show(modalContent, modalOptions)
      }

      var initiateEsign = function(signatureMethod){
        var data = {
          verifiable_type: $scope.verifiableType,
          verifiable_id: $scope.verifiableId,
          context: $scope.context,
          signature_method: signatureMethod
        }

        createEsign(data).then(function(esignPath){
          var formElement = angular.element("#esign-redirection-form")
          formElement.attr("action", esignPath)
          formElement.submit()
        }, function(errorMsg){
          notificationService.error(errorMsg)
        })
      }

      var createEsign = function(data){
        var defer = $q.defer()
        gemUsersRA.one('esign').all('processes').customPOST(data, 'find_or_create').then(function(response){
          if(response.meta.result == 'success')
            defer.resolve(response.redirect_url)
          else
            defer.reject(response.meta.message)
        })
        return defer.promise
      }
    }
  }
}])
angular.module('siteApp')
.service("esignVerifyService", ["babRA", function(babRA){
  return {
    esign_verification: function(success_url,error_url,documentable){
      return babRA.one('third_party').customPOST({success_url:success_url,error_url:error_url, documentable: documentable}, 'generate_esign_data', {}).then(function(response) {
        return response;
      });
    }
  }
}])
angular.module('siteApp')

.service('hodRequestApprovalService',['gemUsersRA', function(gemUsersRA){

  this.getList = function(formData) {
    return gemUsersRA.one('workflow/hod_request_approvals').customGET('',formData)
  }

  this.getDetails = function(approval_id){
    return gemUsersRA.one("workflow/hod_request_approvals").customGET(approval_id)
  }

  this.getDetailsForHod = function(){
    return gemUsersRA.one("workflow/hod_request_approvals").withHttpConfig({disablePromiseHalt: true, ignoreLoadingBar: true, disableErrorMessage: true}).customGET('get_details_for_hod')
  }

  this.createNewApproval = function(formData){
    return gemUsersRA.one("workflow/hod_request_approvals").customPOST(formData)
  }

  this.approveHodApproval = function(formData){
    return gemUsersRA.one("workflow/hod_request_approvals/"+formData["id"]).customPOST(formData,'approve')
  }

  this.rejectHodApproval = function(formData){
    return gemUsersRA.one("workflow/hod_request_approvals/"+formData["id"]).customPOST(formData,'reject')
  }

  this.requestForInfo = function(formData){
    return gemUsersRA.one("workflow/hod_request_approvals/"+formData["id"]).customPOST(formData,'request_for_info')
  }

  this.retryApproval = function(formData){
    return gemUsersRA.one("workflow/hod_request_approvals/"+formData["id"]).customPOST(formData,'hod_resubmit')
  }

  this.getApproverList = function(){
    return gemUsersRA.one("workflow/hod_request_approvals").customGET('get_approver_list')
  }

}])
angular.module('siteApp')

.service('organizationService',['gemAdminRA', 'gemUsersRA', '$state', '$stateParams', 'babRA','Upload',
function(gemAdminRA, gemUsersRA, $state, $stateParams, babRA,  Upload){
  var os = this;
  os.current_organization = {};

  os.getZipList = function(query){
    return babRA.one("zones").customGET('get_zip', {'term': query})
    .then(function(data){
      return data;
    });
  }

  os.getAddressDetailsFromZip = function (form_data) {
    return babRA.one("zones").customGET('get_address_details_from_zip', form_data)
    .then(function(data){
      return data;
    });
  }

  os.getIfscList = function(query){
    return gemAdminRA.one("ifsc_codes").customGET('get_ifsc', {'ifsc': query})
    .then(function(data){
      return data;
    });
  }

  os.getBankDetail = function(ifsc_code) {
    return gemAdminRA.one('ifsc_codes/'+ifsc_code).get().then(function(response){
      return response;
    });
  }

  os.getIfmsDdoDept = function(){
    return gemUsersRA.one('payment_data').customGET('get_ifms_ddo_dept')
    .then(function(response) {
      return response;
    });
  }

  os.getIfmsDdoCodeByDept = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_ifms_ddo_code_by_dept',formData)
    .then(function(response) {
      return response;
    });
  }

  os.getRailwayCodes = function(){
    return gemUsersRA.one('payment_data').customGET('railways_codes')
    .then(function(response) {
      return response;
    });
  }

  os.getRailwaysCodeDetails = function(){
    return gemUsersRA.one('payment_data').customGET('railways_code_details')
    .then(function(response){
      return response;
    });
  }

  os.getDepotCodes = function(){
    return gemUsersRA.one('payment_data').customGET('depot_codes')
    .then(function(response) {
      return response;
    });
  }

  os.getAccountingUnits = function(){
    return gemUsersRA.one('payment_data').customGET('accounting_units')
    .then(function(response) {
      return response;
    });
  }
  os.getPfmsControllerCodes = function(){
    return gemUsersRA.one('payment_data').customGET('get_controller_codes')
    .then(function(response) {
      return response;
    });
  }

  os.getPfmsPaoCodes = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_pao_codes', formData)
    .then(function(response) {
      return response;
    });
  }

  os.validatePfmsDdoCode = function(formData){
		return gemUsersRA.one('payment_data').customGET('validate_pfms_ddo_code', formData)
		.then(function(response) {
			return response;
		});
	}

  os.validateSgpaDdoCode = function(formData){
		return gemUsersRA.one('payment_data').customGET('validate_sgpa_ddo_code', formData)
		.then(function(response) {
			return response;
		});
	}


  os.getAllGpaAccounts = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_all_gpa_accounts',formData)
    .then(function(response) {
      return response;
    });
  }

  os.getApprovedGpaAccounts = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_approved_gpa_accounts',formData)
    .then(function(response) {
      return response;
    });
  }

  os.getGpaSystemDdoCode = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_gpa_system_ddo_code', formData)
    .then(function(response) {
      return response;
    });
  }

  os.getCdaCodes = function(formData){
		return gemUsersRA.one('payment_data').customGET('get_cda_codes', formData)
		.then(function(response) {
			return response;
		});
	}

  os.getCgdaDetails = function(){
    return gemUsersRA.one('payment_data').customGET('get_cgda_details')
    .then(function(response) {
      return response;
    });
  }

  os.getBuyerCgdaDetails = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_buyer_cgda_details', formData)
    .then(function(response) {
      return response;
    });
  }

  os.getUnitCodes = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_unit_codes', formData)
    .then(function(response) {
      return response;
    });
  }

  os.getCodeHeads = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_code_heads', formData)
    .then(function(response) {
      return response;
    });
  }

  os.getProjectCodes = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_project_codes', formData)
    .then(function(response) {
      return response;
    });
  }

  os.getGpaSystemOptions = function(){
    return gemUsersRA.one("payment_data").customGET('check_gpa_system_onboarding').then(function(response){
      return response;
    });
  }

  os.createEntity = function(formData){
    return gemAdminRA.one("entities").customPOST(formData).then(function(response){
      return response;
    });
  }

  os.createDivision = function(formData){
    return gemAdminRA.one("entities").customPOST(formData,'create_division').then(function(response){
      return response;
    });
  }

  os.createPost = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'create_post').then(function(response){
      return response;
    });
  }

  os.createNewOrg = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'request_new_org')
    .then(function(response){
      return response;
    });
  }

  os.deactivateEntity = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'deactivate').then(function(response){
      return response;
    });
  }

  os.updatePaymentData = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'update_payment_data').then(function(response){
      return response;
    });
  }

  os.getEntity = function(){
		return gemAdminRA.one('entities').get().then(function(response){
			return response;
		});
	}

  os.getDataToCompleteOrgTree = function(){
    return gemAdminRA.one('entities').customGET('get_data_to_complete_org_tree').then(function(response){
      return response;
    });
  }

  os.getPaymentMethods = function(){
    return gemAdminRA.one('entities').customGET('allowed_payment_methods').then(function(response){
      return response;
    });
  }

  os.getEntityByName = function(formData){
    return gemAdminRA.one('entities').customGET('find_by_name', formData).then(function(response){
      return response;
    });
  }

  os.validateGSTIN = function(formData){
    return gemAdminRA.one('entities').customPOST(formData, 'validate_gstin').then(function(response){
      return response;
    });
  }

  os.validatePan = function(formData){
    return gemAdminRA.one('entities').customPOST(formData, 'validate_pan').then(function(response){
      return response;
    });
  }

  os.updateEntity = function(formData){
    return gemAdminRA.one("entities").customPUT(formData).then(function(response){
      return response;
    });
  }

  os.updateBankDetails = function(formData){
    return gemAdminRA.one("entities").customPOST(formData,'update_bank_details');
  }

  os.updateAddress = function(formData){
    return gemAdminRA.one("entities").customPOST(formData,'update_address');
  }

  os.updateDivision = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'update_division').then(function(response){
      return response;
    });
  }

  os.updatePost = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'update_post').then(function(response){
      return response;
    });
  }

  os.updateStage = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'update_stage').then(function(response){
      return response;
    });
  }

  os.updateVerifier = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'update_verifier').then(function(response){
      return response;
    });
  }

  os.updateVerifierDesignation = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'update_verifier_designation').then(function(response){
      return response;
    });
  }

  os.updateOrgHierarchy = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, 'update_org_tree').then(function(response){
      return response;
    });
  }

  os.activateEntity = function(formData){
    return gemAdminRA.one("entities").customPOST(formData, "activate").then(function(response){
      return response;
    });
  }

  os.getEntities = function(formData){
    return gemAdminRA.one('entities').customGET('get_entities', formData).then(function(response){
      return response;
    });
  }

  os.getMinistryOrState = function(){
    return gemAdminRA.one("entities").customGET('get_ministry_or_state')
  }

  os.getVacantEntities = function(formData){
    return gemAdminRA.one('entities').customGET('get_vacant_entities', formData).then(function(response){
      return response;
    });
  }

  os.getUsers = function(){
		return gemAdminRA.one('entities').customGET('get_users').then(function(response){
			return response;
		});
	}

  os.getEntityUsers = function(formData){
    return gemAdminRA.one('entities').customGET('get_entity_users', formData).then(function(response){
      return response;
    });
  }

  os.updateEntityUsers = function(formData){
    return gemAdminRA.one('entities').customPOST(formData, "update_entity_users").then(function(response){
      return response;
    });
  }

  os.getProfiles = function(){
    return gemAdminRA.one('entities').customGET('get_profiles').then(function(response){
      return response;
    });
  }

  os.getProfilesByEntity = function(){
    return gemAdminRA.one('entities').customGET('get_profiles_by_entity').then(function(response){
      return response;
    });
  }

  os.createProfile = function(formData){
    return gemAdminRA.one('entities').customPOST(formData, "create_profile").then(function(response){
      return response;
    });
  }

  os.getPostManagementData = function(formData){
    return gemAdminRA.one('entities').customGET('get_post_management_data', formData).then(function(response){
      return response;
    });
  }

  os.getEditPostData = function(formData){
    return gemAdminRA.one('entities').customGET('get_edit_post_data', formData).then(function(response){
      return response;
    });
  }

  os.getAddUserData = function(){
    return gemAdminRA.one('entities').customGET('add_user_data').then(function(response){
      return response;
    });
  }

  os.getEntitiesByLevel = function(formData) {
    return gemAdminRA.one('entities').customGET('get_entities_by_level', formData).then(function(response){
      return response;
    });
  }

  os.getCompetentAuthority = function(formData){
    return gemAdminRA.one('entities').customGET('get_competent_authority', formData).then(function(response){
      return response;
    });
  }

  os.getCanDeactivateHod = function(){
    return gemAdminRA.one('entities').customGET('get_can_deactivate_hod').then(function(response){
      return response;
    });
  }

  os.inviteSeller = function(formData){
    return gemAdminRA.one('entities').customPOST(formData, 'invite_seller').then(function(response){
      return response;
    })
  }

  os.getOrgAndDivisionsForPost = function(){
    return gemAdminRA.one('entities').customGET('get_org_and_divisions_for_post').then(function(response){
      return response
    })
  }

  os.getAllowedRolesForAddPost = function(){
    return gemAdminRA.one('entities').customGET('get_allowed_roles_for_add_post').then(function(response){
      return response;
    })
  }

  os.getAllowedRolesForEditPost = function(formData){
    return gemAdminRA.one('entities').customGET('get_allowed_roles_for_edit_post', formData).then(function(response){
      return response;
    })
  }

  os.getPaymentMethodRelatedData = function(){
    return gemAdminRA.one('entities').customGET('get_payment_method_data').then(function(response){
      return response;
    })
  }

  os.removeCgdaGroup = function(formData){
    return gemAdminRA.one('entities').customPOST(formData,'delete_cgda_group').then(function(response){
      console.log("response: ",response)
      return response;
    })
  }

  os.getIfmsWithApprovalStatus = function(formData){
    return gemUsersRA.one('payment_data').customGET('get_ifms_with_approval_status', formData)
    .then(function(response) {
      return response;
    });
  }

  os.retryApproval=function(formData)
  {
    return gemAdminRA.one('entities').customPOST(formData,'retry_gpa_type_approval');
  }
  
  os.UploadSellerInviteCsv = function(formData)
  {
    return Upload.upload({
      url: gemAdminRA.configuration.baseUrl+'/entities/invite_seller_by_csv.json',
      data: formData
    });
  }

  os.getLgdCodes = function() {
    return gemAdminRA.one('entities').customGET('get_lgd_codes').then(function(response){
      return response
    })
  }

  os.canHodRetriggerMail = function() {
    return gemAdminRA.one('entities').customGET('can_hod_retrigger_mail').then(function(response){
      return response
    })
  }

  os.saveAndVerifyHod = function(formData){
    return gemAdminRA.one('entities').customPOST(formData,'save_and_verify_hod_details').then(function(response){
      return response;
    })
  }

  os.retriggerVerifyEmail = function(formData){
    return gemAdminRA.one('entities').customPOST(formData,'retrigger_mopr_verify_email').then(function(response){
      return response;
    })
  }

  os.getForwardAuctionBankDetails = function(){
    return gemUsersRA.one('buyer_profile/forward_auction').customGET('get_details')
  }
  
  os.updateForwardAuctionBankDetails = function(formData){
    return gemUsersRA.one('buyer_profile/forward_auction').customPOST(formData, 'update_details')
  }

  os.registerForwardAuctionBankWithPFMS = function(formData){
    return gemUsersRA.one('buyer_profile/forward_auction').customPOST(formData, 'register_with_pfms')
  }

  os.referalVerificationResendVerifyEmail = function(formData){
    return gemAdminRA.one("entities").customPOST(formData,'resend_verifier_email').then(function(response){
      return response;
    });
  }
}])

angular.module('siteApp')

.directive('otpInputDirective', ['$timeout', function($timeout) {
  return {
    restrict: 'A', // restrict by attribute
    scope: {
      options: "=",
      disabled: '='
    },
    templateUrl: '/javascripts/site_angular/app-common/views/otp_input_template.html',
    link: function($scope, elem) {
      var size = $scope.options.size || 6;
      var width = 100 / (size + 1);
      var margin = width / size;
      var tmp = [],
      elementArr = [];
      //generating a random number to attach to id
      var randomNumber = Math.floor(Math.random() * 10000) + 100
      $scope.style = {
        "margin-right": margin + "%",
        "border": "none",
        "border-bottom": "2px solid",
        "border-radius": "0",
        "display": "inline-block",
        "width": width + "%",
        "text-align": "center",
        "padding": "5px 0px",
        "outline": "none",
        "box-shadow": "none",
        "background": "transparent",
        "border-color": "#000000",
        "color": "#000000",
        "font-size": "20px"
      };

      $scope.placeholder = $scope.options.placeholder && $scope.options.placeholder.length === 1 ? $scope.options.placeholder : "8";

      $scope.setOtpValue = function() {
        $scope.options.value = "";
        var done = true;
        angular.forEach($scope.numbers, function(v, k) {
          if (v.value.length !== 1) {
            done = false;
            return false;
          }
          $scope.options.value = $scope.options.value + v.value;
        });
        if (done) {
          if (typeof($scope.options.onDone) === "function") {
            $scope.options.onDone($scope.options.value);
          }
        }
      };

      function validKey(keyCode){
        return (
          // to allow numbers
          (keyCode >= 48 && keyCode <= 57) ||
          // to allow numpad number
          (keyCode >= 96 && keyCode <= 105) ||
          // to allow backspace, enter, escape, arrows
          (keyCode == 8)
        )
      }

      $scope.onKeyUp = function(index, e) {
        var key = e.keyCode || e.which;
        var old = $scope.options.value;
        $scope.setOtpValue();
        if (validKey(key) && $scope.numbers[index].value.length > 0 && key !== 8 && index != size - 1) {
          $timeout(function() {
            elementArr[index + 1][0].focus();
          });
        }
        if (typeof($scope.options.onChange) === "function" && old !== $scope.options.value) {
          $scope.options.onChange($scope.options.value);
        }

      };

      $scope.onKeyDown = function(index, e) {
        var key = e.keyCode || e.which;
        if (validKey(key) && key === 8 && $scope.numbers[index].value === "" && index !== 0) {
          $timeout(function() {
            elementArr[index - 1][0].focus();
          });
        }
      };

      for (var i = 0; i < size; i++) {
        tmp.push({
          index: randomNumber + "-" + i,
          value: ""
        });
      }
      $scope.numbers = tmp;

      $timeout(function() {
        for (var i = 0; i < size; i++) {
          elementArr.push(angular.element(document.querySelector("#otpInput" + randomNumber + "-" + i)));
        }
      });

    }
  }
}]);
angular.module('siteApp')

.directive('otpVerification', function(){
  return{
    restrict: 'EA',
    scope: {
      sendOtp: '&',
      resendOtp: '&',
      verifyOtp: '&',
      showSendOtp: '&',
      verifiableType: "@"
    },
    templateUrl: '/javascripts/site_angular/app-common/views/otp_verification.html',
    controller: ['$scope', 'notificationService','$interval', '$timeout', function($scope, notificationService, $interval, $timeout){
      $scope.otpInfo = {
        otpSent: false,
        otpResent: false,
        // disableResend: true,
        // counter: 0,
        otpSentError: false,
        errorMessage: ''
      }
      // var counterTimeout = $interval(onTimeout, 1000);

      $scope.otpInput = {
        onDone: function(value){
          $scope.otp = value
        },
        onChange: function(value){
          $scope.otp = value
        }
      }

      function onTimeout(){
        if($scope.otpInfo.otpSent && ($scope.otpInfo.counter > 0))
          $scope.otpInfo.counter--;
      }

      function parseSendOtpResponse(response, resend=false){
        var sent_successfully = false
        if(response.meta.result == "success"){
          sent_successfully = true
          //Start timer
          // $scope.otpInfo.counter = 600
          // $timeout(function(){
          //   $scope.otpInfo.disableResend = false
          // },($scope.otpInfo.counter * 1000))
        }
        else if(response.meta && response.meta.message && response.meta.message.length > 0){
          $scope.otpInfo.errorMessage = response.meta.message.join(',') || "Sending OTP failed"
        }
        resend ? ($scope.otpInfo.otpResent = sent_successfully) : ($scope.otpInfo.otpSent = sent_successfully)
        $scope.otpInfo.otpSentError = !sent_successfully
      }

      $scope.callSendOtp = function(resend){
        // $scope.otpInfo.disableResend = true
        if(resend){
          // if($scope.otpInfo.counter == 0){
            $scope.resendOtp().then(function(response){
              parseSendOtpResponse(response, true)
            })
          // }
        }
        else{
          $scope.sendOtp().then(function(response){
            parseSendOtpResponse(response)
          })
        }
      }

      $scope.disableVerifyOtpButton = function(){
        return !(($scope.otpInfo.otpSent) && $scope.otp && ($scope.otp.length == 6))
      }

    }]
  }
})
angular.module('siteApp')

.directive('purchase', ['$state',function($state) {
  return{
    scope:{
      purchase: '='
    },
     restrict: 'A',
    transclude:true,
    link: function(scope, elem, attr, nullCtrl, transclude){
      transclude(scope, function(clone){
        elem.append(clone);
      });
    },
    controller: function($scope, $state, $location) {
      $scope.hideExtraProducts=true;
      $scope.promoCode = "";
      $scope.confirmation = {};
      $scope.confirmation.instructions = $scope.purchase ? $scope.purchase.instructions : '';

      $scope.isItemsNotAvailable = function() {
        var items = $scope.purchase.getCartItems();
        for (var i = items.length - 1; i >= 0; i--) {
          if((items[i].quantity > items[i].max_allowed_quantity) ||
              (!items[i].is_buyable)) {
                return true;
          }
        }
        return false;
      }

      $scope.deletefromcart = function(id) {
        var formData = {'purchase_id':$scope.purchase.number, 'order_items':[{'id':id,'quantity':0}]};
        $scope.purchase.deleteItem(formData);
        return true;
      }


      $scope.moveItemfromcart2savelist = function(id) {
        saveListsToPurchaseService.moveToSaveForLaterListFromCart($scope.purchase.number, id);
      }

      $scope.updateItem = function(id, quantity) {
        var formData = {'purchase_id':$scope.purchase.number, 'order_items':[{'id':id,'quantity':quantity}]};
        $scope.purchase.updateItem(formData);
      }

      $scope.saveInstructions = function(){
        var formData = {'purchase_id':$scope.purchase.number, 'instructions' : $scope.confirmation.instructions};
        $scope.purchase.setInstructions(formData).then(function(response){
          if(response.meta.result == "success")
            $scope.purchase = response;
        });
      }

      $scope.cancelPurchase = function(){
        var orderItems = [];
        $scope.purchase.order_items.forEach(function(oi){
          var row = {"id": oi.id,"quantity" : oi.quantity};
          orderItems.push(row);
        });
        var formData = {"order_items" : orderItems}
        $scope.purchase.cancelPurchase($scope.purchase.number,formData).then(function(response){
          if(response.meta.result == "success")
            $scope.purchase = response;
        });
      }

      $scope.applyPromotion = function(){
        var formData = {'purchase_id':$scope.purchase.number, 'promo_code' : $scope.promoCode };
        $scope.promoError = "";
        $scope.purchase.applyPromoCode(formData).then(function(response){
          if(response.meta.result != "success" && response.meta.message)
            $scope.promoError = response.meta.message;
        });
      }
    }
  }
}])

.directive('orderItem', ['$state', function($state) {
  return{
    scope:{
      item : "="
    },
     require : '^purchase',
     restrict: 'E',
    transclude:true,
    link: function(scope, elem, attr, nullCtrl, transclude){
      transclude(scope, function(clone){
        elem.append(clone);
      });
    },
    templateUrl: "/javascripts/site_angular/checkout/views/order-item.html",
    controller: function($scope, $state){
      $scope.confirmation = {};
      $scope.confirmation.gift_message = $scope.item.gift_message || "";
    }
  }
}])
angular.module('siteApp')

.service('purchaseService',['gemUsersRA','$state', '$stateParams', 'userService','$sce','notificationService','$q', function(gemUsersRA, $state, $stateParams, userService, $sce, notificationService,$q){
  var ps = this;
  ps.has_multiple_roles = false;
  ps.roles_of_user = [];
  ps.selected_role = "";
  ps.iframe_url = null;
  ps.header_incident_link_url = "";
  ps.header_requests_link_url = "";
  ps.transfer_bid_url = ""
  ps.incident_data = null;
  ps.is_ulpo_org = false;
  ps.indentTypeFilter=""
  var isHeaderDataLoaded = false

  ps.setindentTypeFilter = function(filterType){
    ps.indentTypeFilter = filterType
  }

  ps.getIndentTypeFilter = function(){
    return ps.indentTypeFilter
  }

  ps.getDAIndent = function(params){
    return gemUsersRA.one('da_indents','init').get(params).then(function(response){
      return response
    })
  }

  ps.submitIndent = function(action,params){
    return gemUsersRA.all('da_indents').customPOST(params,action,{}).then(function(response){
      return response
    })
  }

  ps.getIncidentData = function(){
    return ps.incident_data;
  }

  ps.getHeaderIncidentLink = function(){
    return ps.header_incident_link_url;
  }

   ps.getTransferBidLink = function(){
    return ps.transfer_bid_url;
  }

  ps.getHeaderRequestsLink = function(){
    return ps.header_requests_link_url;
  }

  ps.checkIsUlpoOrg = function(){
    return ps.is_ulpo_org
  }

  ps.getDefaultRoleByPriority = function(){
    if(ps.roles_of_user && ps.roles_of_user.length){
      if(ps.roles_of_user.indexOf('hod')!=-1)
        return 'hod';
      else if(ps.roles_of_user.indexOf('buyer_indentor')!=-1)
        return 'buyer_indentor'
      else if(ps.roles_of_user.indexOf('buyer')!=-1)
        return 'buyer';
      else if(ps.roles_of_user.indexOf('consignee')!=-1)
        return 'consignee';
      else
        return ps.roles_of_user[0];
    }
    else
      return null;
  }

  ps.setRolesOfUser = function(roles) {
    var lower_case_roles = []
    angular.forEach(roles, function(value, key) {
      ps.roles_of_user.push(value.toLowerCase());
    })
    ps.selected_role = ps.getDefaultRoleByPriority();
    if(roles.length>1){
      ps.has_multiple_roles = true;
    }
    return ps.roles_of_user;
  }

  ps.hasMultipleRoles = function() {
    return ps.has_multiple_roles;
  }

  ps.getAvailableRoles = function() {
    return ps.roles_of_user;
  }

  ps.getSelectedRole = function() {
    if(ps.selected_role)
      return ps.selected_role.toLowerCase();
    else if(ps.getDefaultRoleByPriority())
      return ps.getDefaultRoleByPriority();
    else
      return null;
  }

  ps.setSelectedRole = function(role_name) {
    ps.selected_role = role_name;
    return ps.selected_role;
  }

  ps.declineDemand = function(formData) {
    return gemUsersRA.one('purchases').post('decline_demand',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return "Decline Demand Failed";
    })
  }

  ps.approveDemand = function(formData) {
    return gemUsersRA.one('purchases').post('approve_demand',formData).then(function(response){
      return response
    })
  }

  ps.rejectDemand = function(formData) {
    return gemUsersRA.one('purchases').post('reject_demand',formData).then(function(response){
      return response
    })
  }

  ps.downloadPurchases = function(formData) {
    return gemUsersRA.one('purchases','download').get(formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return "Download Issue";
    })
  }

  ps.getOrderCount = function(formData) {
    return gemUsersRA.one('purchases','dashboard_details').get(formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return "No details found";
    })
  }

  var uploadRA = gemUsersRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setDefaultHeaders({'Content-Type': undefined});
  });

  ps.getPurchases = function(formData, httpOptions={}){
    return gemUsersRA.one('purchases').withHttpConfig(httpOptions).get(formData).then(function(response){
      if(response.meta.result == "success")
        return response;
      else
        return null;
    })
  }

  ps.getCustomPurchase = function(formData){
    return gemUsersRA.one('purchases','contract_details').get(formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return "No purchase found";
    })
  }

  ps.getConsignees = function(formData) {
    return gemUsersRA.one('purchases','shipment_mappings').get(formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return "No consignee found";
    })
  }

  ps.getShipmentDetails= function(formData) {
    return gemUsersRA.one('shipments').get(formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return "No shipment found";
    })
  }

  ps.getCart = function() {
    ps.purchase = {};
    return gemUsersRA.one('checkouts').customGET('cart').then(function(response){
      if(response.meta.result == "success")
        return response;
      else
        return "Cart Failed"
    });
  }

  ps.fetchShipmentMappings = function(purchase_id){
    var formData = {'purchase_id':purchase_id};
    ps.shipmentMappings = [];
    return gemUsersRA.one("checkouts").customGET('get_shipment_mappings',formData)
    .then(function(response){
      return response;
    });
  };

  ps.initCheckout = function(purchaseId){
    return gemUsersRA.one('checkouts').customGET('init',{'purchase_id':purchaseId}).then(function(response){
      if(response.meta.result == "success")
        return response;
    });
  };


  ps.setDeliveryDetails = function(purchase_id, reason, smi){
    var formData = {'purchase_id':purchase_id, 'reason_for_l2' :reason, 'shipment_mapping_items' : smi};
    return gemUsersRA.one("checkouts").customPOST(formData,'set_delivery_details')
    .then(function(response){
      return response;
    });
  };

  ps.proceed_with_payment = function(purchase_id, pm, pi_details){
    var formData = {'purchase_id':purchase_id, 'payment_method' :pm, 'pi_details' : pi_details};
    return gemUsersRA.one("checkouts").customPOST(formData,'proceed_with_payment')
    .then(function(response){
      return response;
    });
  };

  var getDashboardHeaderLinks = function(){
    var deferred = $q.defer()
    gemUsersRA.all('dashboard').withHttpConfig({cache: true}).customGET('dashboard_header').then(function(response){
      if(response.meta.result == "success" && !_.isEmpty(response.header_details)){
        deferred.resolve(response.header_details)
      }
      else{
        notificationService.error(response.meta.message)
      }
    })
    return deferred.promise;
  }

  ps.initDashboardDetails = function(){
    return getDashboardHeaderLinks().then(function(response){
      if(!isHeaderDataLoaded){
        ps.setRolesOfUser(response.current_roles)
        ps.crac_payment_data = response.crac_payment_data
        ps.email_update_required = response.email_update_flag
        ps.payment_pending = response.payment_pending
        ps.gem_2_orders = response.gem_2_orders
        ps.incident_data = response.incident_data
        ps.has_reports = response.has_reports
        ps.iframe_url = $sce.trustAsResourceUrl(response.statistics_url);
        ps.header_incident_link_url = response.incident_mgmt_url;
        ps.transfer_bid_url = response.transfer_bid_url;
        ps.header_requests_link_url = response.requests_url;
        ps.is_ulpo_org = response.is_ulpo_org
        ps.can_view_da_demands = response.can_view_da_demands
        isHeaderDataLoaded = true
        ps.hide_interest_charges_link = response.hide_interest_charges_link
        ps.show_service_bulk_payment_link = response.show_service_bulk_payment_link
      }
      return response
    })
  }

  ps.getDashboardSummary = function(){
    return gemUsersRA.one('dashboard').withHttpConfig({cache: true}).customGET("dashboard_details").then(function(response){
      if(response.meta.result == 'success' && !_.isEmpty(response.dashboard_details)){
        return prepareDashboardSummaryObj(response.dashboard_details)
      }
      else{
        notificationService.error(response.meta.message)
        return null
      }
    })
  }

  var prepareDashboardSummaryObj = function(dashboardDetails){
    var dashboardSummary = {org: {} ,product_orders: {},service_orders: {},demands: {},bills: {}}

    if(dashboardDetails){
      if(dashboardDetails.org_summary){
        dashboardSummary.org.total_divisions = dashboardDetails.org_summary.total_divisions ? dashboardDetails.org_summary.total_divisions : null;
        dashboardSummary.org.total_people = dashboardDetails.org_summary.total_people ? dashboardDetails.org_summary.total_people : null;
      }
      if(dashboardDetails.bills){
        dashboardSummary.bills.bills_not_created = dashboardDetails.bills.bills_not_created
        dashboardSummary.bills.bills_created = dashboardDetails.bills.bills_created
        dashboardSummary.bills.bills_approved = dashboardDetails.bills.bills_approved
        dashboardSummary.bills.payments_initiated = dashboardDetails.bills.payments_initiated
        dashboardSummary.bills.payments_failed = dashboardDetails.bills.payments_failed
      }
      if(dashboardDetails.product_orders)
        dashboardSummary.product_orders = dashboardDetails.product_orders
      if(dashboardDetails.demands)
        dashboardSummary.demands = dashboardDetails.demands
      if(dashboardDetails.service_orders)
        dashboardSummary.service_orders = dashboardDetails.service_orders
      if(dashboardDetails.shipments)
        dashboardSummary.shipments = dashboardDetails.shipments
      if(dashboardDetails.bills)
        dashboardSummary.bills = dashboardDetails.bills
      if(dashboardDetails.incident_ids_raised_by_seller)
        dashboardSummary.incident_ids_raised_by_seller = dashboardDetails.incident_ids_raised_by_seller
      if(dashboardDetails.mutual_incident_ids_raised_by_seller)
        dashboardSummary.mutual_incident_ids_raised_by_seller = dashboardDetails.mutual_incident_ids_raised_by_seller
      if(dashboardDetails.cancelled_incident_ids)
        dashboardSummary.cancelled_incident_ids = dashboardDetails.cancelled_incident_ids
    }
    return dashboardSummary
  }

  ps.getIframeUrl = function() {
    if(ps.iframe_url)
      return ps.iframe_url;
    else
      return null;
  }

  ps.getRecentPurchases = function(){
    return ps.initDashboardDetails().then(function(response){
      if(ps.getAvailableRoles().length > 0){
        var formData = {filters_scope: 'all_contracts', per_page: 5, exclude_rejected: true}
        formData.selected_role = ps.getDefaultRoleByPriority()
        return ps.getPurchases(formData, {cache: true}).then(function(response){
          if(response)
            return response.records
          else
            return []
        })
      }
      else{
        return []
      }
    })
  }

  ps.requestForCancellation = function(formData){
    return gemUsersRA.one('purchases').post('request_for_cancellation_by_buyer',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return "Request for cancellation Failed";
    })
  }

  ps.regenerateContract = function(formData){
    return gemUsersRA.one('purchases').post('regenerate_contract',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': response.meta.result, 'message': response.meta.message} ;
    })
  }

  ps.modifyPurchase = function(formData){
    return gemUsersRA.one('purchases').post('modify_purchase',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': 'error', 'message': response.meta.message} ;
    })
  }

  ps.createDpAmendment = function(formData){
     return gemUsersRA.one('purchases').post('create_dp_amendment',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': 'error', 'message': response.meta.message} ;
    })
  }

  ps.cancelAmendment = function(formData){
    return gemUsersRA.one('purchases').post('cancel_amendment',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': 'error', 'message': response.meta.message} ;
    })
  }

  ps.updateDocument = function(formData){
    return gemUsersRA.one('purchases').post('update_document',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': 'failure', 'message': 'Error in creating Document'};
    })
  }

  ps.updateAmendmentDoc = function(formData){
    return gemUsersRA.one('purchases').post('update_amendment_doc',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': response.meta.result, 'message': response.meta.message};
    })

  }

  ps.confirmAmendment = function(formData){
    return gemUsersRA.one('purchases').post('confirm_amendment',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': response.meta.result, 'message': response.meta.message};
    })
  }

  ps.verifyEpbg = function(formData){
    return gemUsersRA.one('purchases').post('epbg_verify_by_buyer',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': 'error', 'message': response.meta.message} ;
    })
  }

  ps.getEpbgIssuingInfo = function(formData){
    return gemUsersRA.one('purchases').customGET('get_epbg_issuing_info',formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': 'error', 'message': response.meta.message} ;
    })
  }

  ps.unblockAmount = function(formData){
    return gemUsersRA.one('purchases').customPOST(formData,'unblock_amount').then(function(response){
      console.log("Response" + response)
      if(response.meta.result == "success")
          return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.postContractIncreaseQuantity = function(formData){
    return gemUsersRA.one('purchases').customPOST(formData,'increase_quantity_for_post_contract').then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.calculateDeliveryDays = function(formData){
    return gemUsersRA.one('purchases').customPOST(formData,'calculate_delivery_days').then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.postContractIncreaseServiceQuantity = function(formData){
    return gemUsersRA.one('purchases').customPOST(formData,'increase_quantity_for_service').then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.preContractUpdateQuantity = function(formData){
    return gemUsersRA.one('purchases').customPOST(formData,'edit_quantity_for_pre_contract').then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.getPreContractOrderDetails = function(params) {
    return gemUsersRA.one('purchases').customGET('demand_details', params).then(function(response){
      if(response.meta.result == "success"){
        return response;        
      }
      else
        return {'status': false, 'message': "Error"} ;
    })
  }  
  ps.extendContractDate = function (params){
    return gemUsersRA.one('purchases').customPOST(params,'extend_contract_date').then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.servicePrecontractAmendment = function (params){
    return gemUsersRA.one('purchases').customPOST(params,'edit_service_order_precontract_amendment').then(function(response){
      if(response.meta.result == "success")
        return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.createEndDateAmendment = function (params){
    return gemUsersRA.one('purchases').customPOST(params,'create_end_date_amendment').then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.cancelPurchaseAmendment = function (params){
    return gemUsersRA.one('purchases').customPOST(params,'cancel_purchase_amendment').then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.dropCancellationBeforeAction = function (params){
    return gemUsersRA.one('purchases').customPOST(params,'drop_cancellation_before_action').then(function(response){
      if(response.meta.result == "success")
        return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.dropCancellationAfterRejection = function (params){
    return gemUsersRA.one('purchases').customPOST(params,'drop_cancellation_after_rejection').then(function(response){
      if(response.meta.result == "success")
        return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.generateAmendmentDoc = function (params){
    return gemUsersRA.one('purchases').customPOST(params,'generate_amendment_doc').then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return {'status': false, 'message': response.meta.message} ;
    })
  }

  ps.requestOfferValidityExtension = function(formData){
    return gemUsersRA.one('purchases').customPOST(formData,'request_offer_validity_extension').then(function(response){
      if(response.success)
          return {'success': true, 'message': response.message}
      else
        return {'success': false, 'message': response.meta.message} ;
    })
  }

  ps.requestBidLifeCycleExtension = function(formData){
    return gemUsersRA.one('purchases').customPOST(formData,'request_bid_life_cycle_extension').then(function(response){
      if(response.success)
          return {'success': true, 'message': response.message}
      else
        return {'success': false, 'message': response.meta.message} ;
    })
  }

  ps.aggregateDemands = function(formData){
    return gemUsersRA.one('purchases').customPOST(formData,'aggregate_demands').then(function(response){
      if(response.success)
        return {'success': true, 'message': response.message}
      else
        return {'success': false, 'message': response.meta.message} ;
    })
  }

  ps.updateIfdDiaryDate = function (params){
    return gemUsersRA.one('purchases').customPOST(params,'update_ifd_diary_date').then(function(response){
      if(response.success)
          return response;
      else
        return {'success': false, 'message': response.meta.message};
    })
  }
  ps.initDashboardDetails();
}])

angular.module('siteApp')

.service('reportService',['gemUsersRA','$state', '$stateParams', 'userService','$sce','notificationService',function(gemUsersRA, $state, $stateParams, userService, $sce, notificationService){
  var rs = this;

  rs.getReports = function(formData){
   return gemUsersRA.one('reports','get_reports').get(formData).then(function(response){
      if(response.meta.result == "success")
          return response;
      else
        return "No purchase found";
    })
  }

  rs.downloadReport = function(formData) {
    return gemUsersRA.one('reports','download_report').get(formData).then(function(response){
    if(response.meta && response.meta.result == "success")
        return response;
    if(response)
        return {status: 'success',file:response};
    else
      return {status:'error',message:"Download Issue"};
    })

  }

  rs.requestReport = function(formData) {
    return gemUsersRA.one('reports').post('request_report',formData).then(function(response){
      if(response.meta.result == "success")
          return {status:'success'};
      else
        return {status:'error'};
    })
  }



}])

function genSalt(){var e=Math.floor(Math.random()*(40-20+1))+20;var d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz".split("");var f="";for(var c=0;c<e;c++){f+=d[Math.floor(Math.random()*d.length)];}var b=Math.floor(Math.random()*(e-1+1))+1;var a=b.toString().length;return f+b+a;}
angular.module('siteApp')
.service('sellerRatingService', ['$uibModal', function($uibModal){
  this.openDialog = function(iframeUrl, options){
    var modalCtrl = function($scope,$uibModalInstance, $sce){
      $scope.iframeUrl = $sce.trustAsResourceUrl(iframeUrl)
      $scope.close = function(){
        $uibModalInstance.close()
      }
    }
    modalCtrl.$inject = ['$scope','$uibModalInstance', '$sce'];
    return $uibModal.open({
      templateUrl: '/javascripts/angular_components/templates/open_iframe_dialog.html',
      size: 'lg',
      controller: modalCtrl,
      windowClass: "seller-rating-iframe-popup"
    })
  }
}])
angular.module('siteApp')

.factory('SessionDataCache',['CacheFactory', function(CacheFactory){
  CacheFactory('SessionDataCache', {
    maxAge: 2 * 60 * 60 * 1000,
    cacheFlushInterval: 2 * 60 * 60 * 1000,
    deleteOnExpire: 'aggressive',
    storageMode: 'localStorage'
  });
  return CacheFactory.get('SessionDataCache')
}])
angular.module('siteApp')
.service('SessionDataService',['SessionDataCache', function(SessionDataCache){

  var get_usersession_id = function(){
    return $.cookies.get('_usrsessid_');
  }

  var get_usersession_data = function(){
    var id = get_usersession_id();
    var data = SessionDataCache.get(id);
    if(_.isEmpty(data)){
      SessionDataCache.removeAll();
      SessionDataCache.put(id, {});
    }
    return SessionDataCache.get(id);
  }

  this.get = function(tag){
    var data = get_usersession_data();
    return data[tag];
  }

  this.set = function(tag){
    var id = get_usersession_id()
    var data = get_usersession_data()
    data[tag] = true;
    SessionDataCache.put(id, data);
  }

}])

app = angular.module('siteApp')

app.service('boqService',['$state', '$stateParams', 'srcService', 'babRA',
  function($state, $stateParams, srcService, babRA){
    this.getAllBoqPurchases = function(params) {
      return babRA.all('service_boq_checkouts').customGET('service_boq_purchases', params)
    }
    this.updateContract = function(params){
      return babRA.one('service_boq_checkouts').customPUT(params, 'update_contract')
    }
    this.removeCart = function(number){
      return babRA.one('service_boq_checkouts').customPUT({'purchase_id': number}, 'delete_cart')
    }
    this.createBoqCart = function(params){
      return babRA.one('service_boq_checkouts').customPOST(params,'create_boq_cart')
    }
    this.getCart = function(params){
      return babRA.one('checkouts').customGET('cart',params)
    }
    this.setCurrentContext = function(number){
      return babRA.one('service_boq_checkouts').customPOST({'purchase_id': number}, 'set_current_context');
    }
    this.getBoqServiceCatalog = function(service_id, quantity){
      return babRA.one('service_boq_checkouts').customGET('get_boq_service_catalog', {"service_id":service_id, "required_quantity": quantity})
    }
    this.removeItemFromCart = function(params){
      return babRA.one('service_boq_checkouts').customPOST(params,'remove_item_from_cart')
    }

    // this is to inherit the srcService properties
    this.__proto__ = srcService;
  }
])

app.service('srvcServiceData',['$state', '$stateParams', '$q', 'babRA',
  function($state, $stateParams, $q, babRA){
    var that = this
    that.data = {cart: {}}
    that.isNewCart = function(number) {
      return  that.data.cart[number] == true
    }
    that.resetData = function(){
      that.data = {cart: {}}
    }
  }
])
angular.module('siteApp')

.factory('srvfacetRA', ['babRA', function(babRA) {
  return babRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setBaseUrl('/cms/others/api');
  });
}])
.service('srcService',['Restangular', 'autoCompleteRA', 'adminRA', 'srvfacetRA', '$state', '$stateParams', 'babRA', '$q', 'publicRA', 'browseRA','gemUsersRA', 'srvcServiceData',
  function(Restangular, autoCompleteRA, adminRA, srvfacetRA, $state, $stateParams, babRA, $q, publicRA, browseRA,gemUsersRA, srvcServiceData){
    this.getSpec = function(srvc_id){
      return srvfacetRA.one('services/'+srvc_id).get().then(function(response){
        return response;
      });
    }
    this.getServiceParam = function(srvc_id){
      return srvfacetRA.one('services/get_service_params').customGET('',
      {
        'id': srvc_id
      }
        ).then(function(response){
        return response;
      });
    }
    this.getCurrentCart = function(srvc_id, is_boq_item){
      is_boq_item = (is_boq_item || srvcServiceData.data.in_boq_order_mode)
      return babRA.one('checkouts/get_current_cart').customGET('',
      {
        'browse_node_id': srvc_id,
        'is_boq_item_for_service': is_boq_item
      }).then(function(response){
        return response;
      });
    }
    this.getData = function(srvc_id){
      var that = this
      var is_boq_item = srvcServiceData.data.in_boq_order_mode
      if(is_boq_item){
       return $q.all({
          spec_data: that.getSpec(srvc_id),
          service_param: that.getServiceParam(srvc_id),
          bid_param: {is_bid: true},
          compatibility_data: {}
        }).then(function(data) {
          return data;
        });
      }
      else{
        return $q.all({
          spec_data: that.getSpec(srvc_id),
          service_param: that.getServiceParam(srvc_id),
          bid_param: that.getBid(),
          compatibility_data: that.getCurrentCart(srvc_id, is_boq_item)
        }).then(function(data) {
          return data;
        });
      }
    }
    this.get_results = function(id,filters,usage,qcbs_params,selected_consignee,contract,page,without_offer){
      return babRA.one('browse_nodes').customPOST(
      {
        'id': id,
        'filters': filters,
        'usage': usage,
        'qcbs': qcbs_params,
        'selected_consignee' : selected_consignee,
        'contract' : contract,
        'page': page,
        'without_offer': without_offer
      },'search_service',{}
        ).then(function(response){
        return response;
      });
    }
    this.get_services = function(page_no,per_page_no){
      return srvfacetRA.one('services').customGET('',{
        page: page_no,
        per_page: per_page_no,
        filter_active: true
      }).then(function(response){
          return response;
      });
    }
    this.get_service_list = function(params){
      params = params || {}
      return browseRA.one("services").customGET('list.json',params).then(function(response){
        return response;
      });
    }
    this.getBid = function(){
      return babRA.one('browse_nodes').customGET('buying_intent',{
      }).then(function(response){
          return response;
      });
    }
    this.setBid = function(is_bid){
      return babRA.one('browse_nodes').customPOST({
        is_bid : is_bid
      },'buying_intent',{}).then(function(response){
          return response;
      });
    }
    this.get_seller_list = function(srvc_id, page){
      return publicRA.one('service_catalogs', srvc_id).customGET('get_seller_list',{
      page}).then(function(response){
          return response;
      })
    }
    this.get_seller_details = function(service_id,seller_id,show_seller_details){
    return publicRA.one('service_catalogs',service_id).customGET('get_seller_details',{seller_id,show_seller_details}).then(function(response){
          return response;
      })
    }
    this.get_autocomplete_data = function(method_name, options){
      return srvfacetRA.one('services').customGET(method_name,options).then(function(response){
          return response;
      });
    }
    this.get_locations = function(remote_endpoint,q){
      return autoCompleteRA.one(remote_endpoint).customGET("",{q}).then(function(response){
          return response;
      });
    }
    this.get_price_breakup = function(data){
      return publicRA.one('service_catalogs').customPOST(data, 'get_price_breakup', {}).then(function(response){
        return response;
      });
    }
  }
])

.factory('srvcDecorator', ['srcService', function(srcService){
  return{
    srvc: function(service_data) {
      var spec = service_data.specifications.spec_data || {}
      var est = service_data.specifications.est_params || {}
      var qcbs = service_data.specifications.qcbs_params || {}
      var facets = {}
      facets['core'] = {}, facets['addon'] = {}
      function build_facet(facets,spec_key,spec_value,type){
        var facet_type = spec_value.select_type == 'single' || type == 'addon' ? 'singleSelect' : 'multiSelect'
        if(spec_value.data_type != 'location' && spec_value.data_type != 'district' && spec_value.data_type != 'zipcode'){
          facets[type][spec_key] = facets[type][spec_key] || {}
          facets[type][spec_key]['display_name'] = spec_value.display_name || ''
          if(spec_value.range){
            facets[type][spec_key]['type'] = 'range'
            facets[type][spec_key]['range'] = spec_value.range
          }else if(spec_value.value && spec_value.value.length){
            facets[type][spec_key]['type'] = facet_type
            facets[type][spec_key]['set'] = spec_value.value
            facets[type][spec_key]['custom_filter'] = spec_value.custom_filter
          }else if(spec_value.data_type == 'boolean'){
            facets[type][spec_key]['type'] = facet_type
            facets[type][spec_key]['set'] = [['true','Yes']]
          }
          if(spec_value.data_type == 'amc_category'){
            facets[type][spec_key]['type'] = "autoCompleteSingleSelect"
            facets[type][spec_key]['remote_url'] = "get_linked_categories"
            facets[type][spec_key]['eager_load'] = true
            facets[type][spec_key]['placeholder'] = 'Search and Select Category'
            facets[type][spec_key]['custom_filter'] = spec_value.custom_filter
            facets[type][spec_key]['set'] = []
          }else if(spec_value.data_type == 'amc_brand'){
            facets[type][spec_key]['type'] = "autoCompleteSingleSelect"
            facets[type][spec_key]['remote_url'] = "get_brands_for_category"
            facets[type][spec_key]['depends_on'] = ['amc_category']
            facets[type][spec_key]['placeholder'] = 'Search and Select Brand'
            facets[type][spec_key]['custom_filter'] = spec_value.custom_filter
            facets[type][spec_key]['set'] = []
          }else if(spec_value.data_type == 'oem_brand'){
            facets[type][spec_key]['type'] = "autoCompleteSingleSelect"
            facets[type][spec_key]['remote_url'] = "get_all_seller_authorized_brands"
            facets[type][spec_key]['eager_load'] = true
            facets[type][spec_key]['placeholder'] = 'Search and Select Brand'
            facets[type][spec_key]['set'] = []
          }
          facets[type][spec_key]['key'] = spec_key
          facets[type][spec_key]['is_addon'] = type == 'addon' ? true : false
          if(spec_value.helptext){
            facets[type][spec_key]['helptext'] = spec_value.helptext
          }
          if(spec_value.unit) facets[type][spec_key]['unit'] = spec_value.unit
          if(spec_value.hasOwnProperty('order')) facets[type][spec_key]['order'] = spec_value.order
          if(spec_value.document){
            facets[type][spec_key]['document'] = spec_value.document
          }
          if(type == 'addon'){
            facets[type][spec_key]["group_tag"] = spec_value.group_tag
          }
        }
      }
      _.forEach(spec.core, function(spec_value,spec_key){
        if(!spec_value.restriction_type || (spec_value.restriction_type && spec_value.restriction_type != 'bid_only')){
          build_facet(facets,spec_key,spec_value,'core')
        }
      })
      _.forEach(spec.addon, function(spec_value,spec_key){
        build_facet(facets,spec_key,spec_value,'addon')
      })
      service_data['est'] = est;
      service_data['qcbs'] = qcbs;
      service_data['facets'] = facets;
      service_data['core_facets'] =  _.chain(facets.core).values().sortBy('order').value()
      service_data['addon_facets'] =  _.chain(facets.addon).values().sortBy('order').value()
      service_data['is_qcbs'] = service_data.specifications.is_qcbs_required ? service_data.specifications.is_qcbs_required : false;
      service_data['minimum_contract_period'] = service_data.specifications.minimum_contract_period ? service_data.specifications.minimum_contract_period : 0;
      service_data['maximum_contract_period'] = service_data.specifications.maximum_contract_period ? service_data.specifications.maximum_contract_period : 365;
      service_data.quantity_label = service_data.specifications.quantity_params.quantity.display_name || 'Quantity'
      service_data.quantity_helptext = service_data.specifications.quantity_params.quantity.helptext || ''
      service_data.location_based_rates_for_offering = service_data.specifications.location_based_rates_for_offering || false
      return service_data;
    }
  }
}])

.factory('paginationDecorator', [function(){
  return function srvclistDecorator(total_entries,currentPage,pageSize) {
    // calculate total pages
    var pageList = {}
    pageList.pageSize = pageSize;
    totalPages = Math.ceil(total_entries / pageSize);

    var startPage, endPage;
    if (totalPages <= 10) {
        // less than 10 total pages so show all
        startPage = 1;
        endPage = totalPages;
    }else {
      // more than 10 total pages so calculate start and end pages
      if (currentPage <= 6) {
        startPage = 1;
        endPage = 10;
      } else if (currentPage + 4 >= totalPages) {
        startPage = totalPages - 9;
        endPage = totalPages;
      } else {
        startPage = currentPage - 5;
        endPage = currentPage + 4;
      }
    }
    pageList.currentPage = currentPage,
    pageList.totalPages = totalPages,
    pageList.startPage = startPage,
    pageList.endPage = endPage,
    pageList.pages = _.range(startPage, endPage + 1)
    console.log("pageList",pageList)
    // return object with all pager properties required by the view
    return pageList;
  }
}])

angular.module('siteApp')

.directive('uibListedTooltip',['userService', '$location','$sce','notificationService', function(userService, $location,$sce,notificationService) {
  return{
    restrict: 'E',
    scope: {
      content : '@',
      placement: '@?'
    },
    templateUrl:"/javascripts/site_angular/app-common/views/uib_listed_tooltip.html",
    link: function(scope){

      if(scope.content.startsWith("##")){
        var tooltip_values = scope.content.split(/\n(.*)/s)
        scope.header = tooltip_values[0].replace(/##/g, "");
        scope.content_list = tooltip_values[1]
      }
      else {
        scope.content_list = scope.content
      }
    }    
  }
}])
angular.module('siteApp')

.service('userService',['gemAdminRA', 'babRA', 'gemUsersRA', '$state', '$stateParams', 'identityAdminRA','cmsOthersRA','adminRA', 'ratingPublicRA', 'publicRA', 'ratingUsersRA', function(gemAdminRA, babRA, gemUsersRA, $state, $stateParams, identityAdminRA, cmsOthersRA, adminRA, ratingPublicRA, publicRA, ratingUsersRA){
	var us = this;
	this.aadhar_verify_otp = '';

  us.CONSTANTS = {
    SELLER:{
      STARTUP: {
        REGISTERED: "registered",
        SELF_DECLARED: "self_declared",
        NOT_A_STARTUP: "not_a_startup"
      },
      DOE_UNDERTAKING: {
        BORDER_COUNTRY: "border_country",
        NON_BORDER_COUNTRY: "non_border_country"
      },
      MSME:{
        UAM_VERIFICATION: "uam",
        UDYAM_VERIFICATION: "udyam"
      }
    }
  }

  us.getConfigForHodRegistration = function(){
    return gemAdminRA.one('customers').customGET('get_config_for_hod_registration')
  }

  us.getConfigForSellerRegistration = function(){
    return identityAdminRA.one('sellers').customGET('get_config_for_seller_registration')
  }

	us.dashboardSummary = function(){
		return gemUsersRA.one('users').customGET('dashboard').then(function(response){
			return response;
		});
	}
	us.getOrgTree = function(post,userid){
		return gemAdminRA.one('customers').customPOST({'post' : post,'user_id' : userid},'org_tree').then(function(response){
			return response;
		});
	}
	us.getDeclarationOtions = function(){
		return identityAdminRA.one('sellers').customGET('get_einvoice_declaration_options')
	}
	us.setUserEinvoiceData = function(formData){
		return identityAdminRA.one('sellers').customPOST(formData,'set_einvoice_declaration')
	}
	us.generate_checksum = function(formData){
		return babRA.one('third_party').customPOST(formData,'generate_checksum')
		.then(function(response) {
      return response;
    });
	}

  us.getDirectorInfo = function(cin){
    return identityAdminRA.one('sellers').customGET('validate_directors_info',{'cin' : cin}).then(function(response){
      return response;
    });
  }

	us.addUser = function(formData){
		return gemAdminRA.one('customers').customPOST(formData)
		.then(function(response) {
      return response;
    });
	}
  us.createGuestAccount = function(formData){
    return gemAdminRA.one('customers').customPOST(formData, 'create_guest')
    .then(function(response) {
      return response;
    });
  }

	us.exit_user = function(formData){
		return gemAdminRA.one('customers').customPOST(formData,'deactivate_secondary_user')
		.then(function(response) {
			return response;
		});
	}

	us.addSecondaryUser = function(formData){
		return gemAdminRA.one('customers').customPOST(formData,'add_secondary_user')
		.then(function(response) {
			return response;
		});
	}

	us.revokeSecondaryUser = function(formData){
		return gemAdminRA.one('customers').customPOST(formData,'revoke_secondary_user')
		.then(function(response) {
			return response;
		});
	}

	us.getUserByInvitationToken = function(formData){
		return gemAdminRA.one('customers').customGET('find_by_invitation_token',formData).then(function(response){
			return response;
		});
	}

  us.canCloseSellerAccount = function(){
    return identityAdminRA.one('sellers').withHttpConfig({cache: true}).customGET('can_close_account')
  }

	us.getDetailsByDeactivationToken = function(formData){
		return gemAdminRA.one('customers').customGET('find_by_deactivation_token',formData).then(function(response){
			return response;
		});
	}

  us.getDetailsForCgdaApprovalToken = function(formData){
    return gemAdminRA.one('customers').customGET('find_by_cgda_approval_token',formData).then(function(response){
      return response;
    });
  }

  us.getDetailsGpaTypeApprovalToken = function(formData){
    return gemAdminRA.one('gpa_types').customGET('find_by_gpa_type_approval_token',formData).then(function(response){
      return response;
    });
  }

  us.cgdaAuthentication = function(formData){
    return gemAdminRA.one('customers').customPOST(formData,'cgda_authentication').then(function(response){
      return response;
    });
  }

  us.gpaTypeAuthentication = function(formData){
    return gemAdminRA.one('gpa_types').customPOST(formData,'gpa_type_authentication').then(function(response){
      return response;
    });
  }

	us.activateUser = function(formData){
		return gemAdminRA.one('customers').customPOST(formData, 'activate_user')
		.then(function(response) {
			return response;
		});
	}

	us.validateRoles = function(formData){
		return gemAdminRA.one('customers').customPOST(formData, 'validate_roles')
		.then(function(response) {
			return response;
		});
	}

	us.deactivateHod = function(formData){
		return gemAdminRA.one('customers').customPOST(formData, 'hod_deactivate')
		.then(function(response) {
			return response;
		});
	}

	us.deactivateHodByVerifier = function(formData){
		return gemAdminRA.one('customers').customPOST(formData, 'hod_deactivate_by_verifier')
		.then(function(response) {
			return response;
		});
	}

  us.findByHodAuthenticationToken = function(formData){
    return gemAdminRA.one('customers').customGET('find_by_hod_authentication_token',formData).then(function(response){
      return response;
    });
  }

  us.authenticateHodByVerifier = function(formData){
    return gemAdminRA.one('customers').customPOST(formData,'authenticate_hod_by_verifier').then(function(response){
      return response;
    });
  }

  us.getUserEntity = function(){
    return gemAdminRA.one('customers').customGET('get_user_entity').then(function(response){
      return response;
    });
  }

	this.verifyAadharAndSendOtp = function(formData) {
		return gemAdminRA.one("registration").customPOST(formData, "verify_aadhar")
		.then(function(response) {
			if (response.meta.result == "success") {
				us.aadhar_verify_otp = response.verification_code
				return true;
			}
			us.aadhar_verify_otp = '';
			return false;
		});
	}

	this.sendVerifyEmailOtp = function(formData) {
		return gemAdminRA.one("registration").customPOST(formData, "verify_email")
		.then(function(response) {
			return response;
		});
	}

	this.sendVerifyMobileOtp = function(formData) {
		return gemAdminRA.one("registration").customPOST(formData, "verify_mobile_number")
		.then(function(response) {
			return response;
		});
	}

	this.sendEmailOtp = function(formData) {
		return gemAdminRA.one("customers").customPOST(formData, "send_email_otp")
		.then(function(response) {
			return response;
		});
	}

  this.sendMobileOtp = function(formData) {
    return gemAdminRA.one("customers").customPOST(formData, "send_mobile_otp")
    .then(function(response) {
      return response;
    });
  }

  this.verifyMobileOtp = function(formData) {
    return gemAdminRA.one("customers").customPOST(formData, "verify_mobile_otp")
    .then(function(response) {
      return response;
    });
  }

  this.sendOtp = function(formData) {
    return gemAdminRA.one("customers").customPOST(formData, "send_otp")
    .then(function(response) {
      return response;
    });
  }

	this.verifyEmailOtp = function(formData) {
		return gemAdminRA.one("customers").customPOST(formData, "verify_email_otp")
		.then(function(response) {
			return response;
		});
	}

  this.verifyOtp = function(formData) {
    return gemAdminRA.one("customers").customPOST(formData, "verify_otp")
    .then(function(response) {
      return response;
    });
  }

	us.getOrgPosts = function(){
		return gemAdminRA.one('customers').customGET('org_posts').then(function(response){
			return response;
		});
	}

	us.getCompetentAuthority = function(){
		return gemAdminRA.one('customers').customGET('competent_authority').then(function(response){
			return response;
		});
	}

	us.getAadhaar = function(){
		return gemAdminRA.one('customers').customGET('aadhaar').then(function(response){
			return response;
		});
	}

  us.userIdValidation = function(user_id){
    return gemAdminRA.one('customers').customGET('validate_user_id',{'user_id':user_id}).then(function(response){
      return response;
    });
  }

  us.checkUserIdExists = function(formData){
  	return publicRA.one('users').customGET('check_user_id_exists', formData)
  }

  us.getTncDocumentLink = function(formData){
  	return publicRA.one('users').customGET('get_tnc_document_link', formData)
  }

	us.viewUser = function(user_id){
		return gemAdminRA.one('customers').customGET()
	}

  us.updatePersonalInfo = function(formData){
    return gemAdminRA.one('customers').customPOST(formData, 'update_personal_info')
  }

  us.updateNotMe = function(formData){
    return gemAdminRA.one('customers').customPOST(formData, 'update_not_me')
  }

  us.updateBuyerMobile = function(formData){
    return gemAdminRA.one('customers').customPOST(formData, 'update_mobile')
  }

  us.updateBuyerAadhaar = function(formData){
    return gemAdminRA.one('customers').customPOST(formData, 'update_aadhaar')
  }

  us.updateUserEmail = function(formData){
    return gemAdminRA.one('customers').customPOST(formData,'update_email').then(function(data){
      return data;
    });
  }
  us.requestReport = function(formData){
  return gemAdminRA.one('customers').customPOST(formData,'request_report').then(function(data){
    return data;
  });
}

	us.updatePassword = function(formData){
		return gemAdminRA.one('customers').customPOST(formData,'update_password').then(function(data){
			return data;
		});
	}

	us.updateSecondaryUser = function(formData){
		return gemAdminRA.one('customers').customPOST(formData, 'update_secondary_user').then(function(data){
			return data;
		});
	}

	us.verifyAadhaar = function(formData){
		return gemAdminRA.one('customers').customPOST(formData,'verify_aadhaar').then(function(response){
			return response
		});
	}

  us.getAadhaar = function(){
    return gemAdminRA.one('customers').customGET('aadhaar').then(function(response){
      return response;
    });
  }

	us.aadhaarExists = function(aadhaar_number) {
		return gemAdminRA.one('customers').customGET('find_by_aadhaar',{'aadhaar_number':aadhaar_number}).then(function(response){
			return response;
		});
	}

	us.validatePostByAadhar = function(formData) {
		return gemAdminRA.one('customers').customPOST(formData, 'validate_post_by_aadhar').then(function(response){
			return response;
		});
	}

	us.validatePostOccupancy = function(formData) {
		return gemAdminRA.one('customers').customPOST(formData, 'validate_post_occupancy').then(function(response){
			return response;
		});
	}

	us.findUserByEmail = function(email_id) {
		return gemAdminRA.one('customers').customGET('find_by_email',{'email':email_id}).then(function(response){
			if(response.meta.result=="success"){
				return true;
			}
			else{
				return false;
			}
		});
	}


  us.emailExists = function(params) {
    return gemAdminRA.one('customers').customGET('check_email_exists', params).then(function(response){
      return response.email_exists
    });
  }


  this.validRestrictionOnSpecificInputType = function(input_value,restrict_on,max_char){
    //restrict on other types can be defined
    if(!input_value || !restrict_on || !max_char){
      return true
    }
    if(restrict_on=='digit'){
      digits_count = 0
      input_value = input_value.split('')
      for (i = 0; i < input_value.length; i++){
        if(parseInt(input_value[i])>=0){
          digits_count = digits_count + 1
        }
      }
      if (digits_count > max_char) {
       return false
      }
    }
    return true
  }
  us.getReportSubscriptions = function() {
    return gemAdminRA.one('customers').customGET('get_report_subscriptions').then(function(response){
      return response
    });

  }

  us.subscribeToReports = function(formData) {
    return gemAdminRA.one('customers').customPOST(formData, 'subscribe_to_reports').then(function(response){
      return response;
    });

  }

	this.valid_password = function(password,userid,firstname,lastname){
		if(!password || !userid || !firstname)
			return false;

		if(_.includes(password.toLowerCase(), userid.toLowerCase()) || _.includes(password.toLowerCase(), firstname.toLowerCase()))
			return false;

		if(lastname && _.includes(password.toLowerCase(), lastname.toLowerCase()))
			return false;

		if(password && ((password.length<8) || (password.length>16)))
			return false;

		if(password && (password.substr(0,1)==" " || password.substr(password.length-1)== " "))
			return false;

		var res = /(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%?^&\/*\[\]()_+={}|:'",<.>])/.test(password)
		if(!res)
			return false;

		var multiple_repeat = /(.)\1/.test(password)
		if(multiple_repeat)
			return false;

		transformed_password = password.replace(/[^a-zA-Z0-9~!@#$%?^&\/*\[\]()_+={}|:'",<.> ]/g, '');
		if(transformed_password != password)
			return false;

		return true;
	}

	this.valid_userid = function(userid) {
		if(userid)
			return /^[A-Za-z0-9][A-Za-z0-9_@.-]*$/.test(userid)
		else
			return false;
  }

	this.valid_emailid = function(email_id,user_type, org_details) {
    if(email_id && user_type){
      return gemAdminRA.one('customers').customGET('validate_email',{'email':email_id,'user_type':user_type,'org_details':org_details}).then(function(response){
          if(response.meta.result=="success")
            return true;
          else
            return false;
      });
    }
    else
      return false;
	}

	this.getDashboardNotifications = function() {
		var notification_list = [
			{
				"title":"PFMS Buyer's - Server Upgradation",
				"content":"It is notified that due to PFMS Server Migration, all the Buyers using PFMS mode will not be able to process the order and payment from 6th Oct, 2017 6:00 PM nwards to 8th Oct, 2017. In case you face any problem related to payment on or after 9th Oct, do contact us on Helpdesk.",
				"date":"6 OCTOBER 2017"
			},
			{
				"title":"Seller Confirmation",
				"content":"In case of Direct Purchase, a new feature has been added to place confirmation of orders so that orders can be finally placed. The confirmation has to be provided within 48 hours of receipt of Order mail else the order is deemed to be cancelled.",
				"date":"11 SEPTEMBER 2017"
			},{
				"title":"Buyer Cancellation",
				"content":"Any order placed can be cancelled after the expiry of the delivery date.",
				"date":"11 SEPTEMBER 2017"
			},{
				"title":"Bid extension due to server congestion",
				"content":"Due to exceptional heavy traffic on our server, transactions on GeM have been impacted. While we are working on the resolution of the congestion, the bids and RA's closing on 24th and upto 27th stand extended by four days respectively. Inconvenience is regretted.",
				"date":"24 AUGUST 2017"
			},{
				"title":"Bid extended for three days",
				"content":"21st, 22nd & 23rd August Bids has been extended for three days respectively due to necessary updates in Bids.",
				"date":"22 AUGUST 2017"
			},{
				"title":"Deletion of secondary users with non-transactional orders data",
				"content":"All the Primary Users (HOD’s) are being given an option to delete such Secondary Users who have not placed any order DDO/Consignee",
				"date":"05 AUGUST 2017"
			}
		]
		return notification_list;
	}

///////////seller functions ///////////////////////

	us.getConstitutionList = function(){
    return identityAdminRA.one('sellers').customGET('get_constitution_list').then(function(response){
      return response;
    });
  }

us.getConstitutionBasedRolesList = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData, 'get_constitution_based_roles_list')
}

us.validatePANDetails = function(formData){
 return identityAdminRA.one('sellers').customPOST(formData,'validate_pan_details').then(function(response){
   return response;
 });
}

us.verifyPANandAadhaarNames = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'validate_pan_and_aadhaar_name').then(function(response){
   return response;
 });
}

us.validateCINwithMCA21 = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'validate_cin_with_mca21').then(function(response){
   return response;
 });
}

us.getAssessmentYearOptions = function(){
  return identityAdminRA.one('sellers').customGET('get_assessment_year_options').then(function(response){
   return response;
 });
}

us.keyPersonValidation = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'key_person_validation').then(function(response){
   return response;
 });
}

us.validateStartup = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'validate_startup').then(function(response){
   return response;
 });
}

us.validateITR = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'validate_itr').then(function(response){
   return response;
 });
}

us.createITR = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'create_itr').then(function(response){
   return response;
 });
}

us.updateITR = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'update_itr').then(function(response){
   return response;
 });
}

us.deleteITR = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'delete_itr').then(function(response){
   return response;
 });
}

us.validateMSME = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'validate_msme').then(function(response){
   return response;
 });
}

us.saveMSME = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'verify_msme_details').then(function(response){
   return response;
 });
}

us.updateNISCdetails = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'update_nsic_details').then(function(response){
   return response;
 });
}

us.getAddressDropdownData = function(){
  return identityAdminRA.one('sellers').withHttpConfig({cache: true}).customGET('get_address_dropdown_data')
}

us.updateOfficeLocation = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'edit_office_location').then(function(response){
   return response;
 });
}

us.createSellerAccount = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,"create_seller_account").then(function(response){
   return response;
 })
}

us.validatePanForReg = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,"validate_personal_pan_for_reg").then(function(response){
   return response;
 })
}

us.updatePersonalPan = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,"update_personal_pan").then(function(response){
   return response;
 })
}

us.removeBankAccount = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,"remove_bank_acount").then(function(response){
   return response;
 })
}

us.registerBankAccount = function(formData){
    return identityAdminRA.one('sellers').customPOST(formData,'register_bank_account').then(function(response){
      return response;
    });
  }

us.removeOfficeLocation = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,"remove_office_location").then(function(response){
   return response;
 })
}

us.addSellerUser = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,"add_seller_user")
  .then(function(response) {
    return response;
  });
}

us.closeSellerAccount = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,"close_seller_account")
  .then(function(response) {
    return response;
  });
}

us.findSellerUserByEmail = function(formData){
  return identityAdminRA.one('sellers').customGET("find_by_email",formData)
  .then(function(response) {
    return response;
  },function(error){
   return error;
 });
}

us.getSellerByInvitationToken = function(formData){
  return identityAdminRA.one('sellers').customGET("find_user_by_invitation_token",formData)
  .then(function(response) {
    return response;
  });
}

us.activateSeller = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData, 'activate_user')
  .then(function(response) {
   return response;
 });
}

us.createDirectorInfo = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData, 'create_directors_info')
  .then(function(response) {
   return response;
 });
}

us.getSellerUsers = function(){
  return identityAdminRA.one('sellers').customGET('get_user_list')
  .then(function(response) {
   return response;
 });
}

us.getActiveSellerUsers = function(){
  return identityAdminRA.one('sellers').customGET('get_active_users_list')
  .then(function(response) {
   return response;
 });
}

us.canAddSecondarySeller = function(){
  return identityAdminRA.one('sellers').customGET('check_secondary_seller_limit')
  .then(function(response) {
   return response;
 });
}

us.getSecondarySellerRoles = function(){
  return identityAdminRA.one('sellers').customGET('allowed_secondary_user_roles')
  .then(function(response) {
   return response;
 });
}

us.getSecondaryUserDetails = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData, 'get_update_seller_info')
  .then(function(response) {
   return response;
 });
}

us.updateSecondarySellerUser = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData, 'update_secondary_seller')
  .then(function(response) {
   return response;
 });
}

us.updateSeller = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData, 'update_seller')
}

us.updateAadhaar = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'update_aadhaar')
}

us.deactivateSeller = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData, 'deactivate_seller')
}

us.sendReactivationLink = function(formData){
  return ratingUsersRA.one('users').customPOST(formData, 'send_reactivation_link')
}

us.createSellerBankDetails = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'create_bank_details')
  .then(function(response) {
   return response;
 });
}

us.createSellerLocation = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'create_seller_location')
  .then(function(response) {
   return response;
 });
}

us.validateItrAddress = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'validate_itr_address')
  .then(function(response) {
   return response;
 });
}

us.updateBankPrimaryAccount = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'update_primary_account')
  .then(function(response) {
   return response;
 });
}

us.initSeller = function(seller){
  if(seller && seller.additional_detail){
    seller.cin = seller.additional_detail.cin
    if(seller.incorporation_date)
      seller.incorporation_date = new Date(seller.incorporation_date)
  	if(seller.date_on_pan){
    	seller.date_on_pan =  new Date(Date.parse(seller.date_on_pan));
  	}

    if(seller.additional_detail.pan){
      seller.pan = seller.additional_detail.pan.number
      seller.pan_name = seller.additional_detail.pan.name
    }

    if(seller.additional_detail.key_person ){
      seller.company_pan = seller.additional_detail.key_person.pan
      seller.assessment_year = seller.additional_detail.key_person.assessmentYear
      seller.itr_type = seller.additional_detail.key_person.itrType
      seller.authorized_person = seller.additional_detail.key_person.memberOrKeyPersonName
      seller.acknowledgement_number = seller.additional_detail.key_person.acknowledgementNumber
    }
    seller.can_participate_in_bid = seller.additional_detail.can_participate_in_bid ? 'yes' : 'no'
    seller.opted_for_sahay = seller.opted_for_sahay ? 'TRUE' : 'FALSE'
  }

  if(seller.msme){
    // Populate keys used in Company Profile tab related to MSME
    seller.is_msme = seller.msme.msme_registered ? 'yes' : 'no'
    // seller.disable_msme_change = (_.find(seller.verifications, {type: "MsmeVerification"}).status == "verified") && (seller.is_msme == "yes")
    seller.disable_msme_change = seller.msme.is_msme_verified == 'Yes' && (seller.is_msme == "yes")
  }

  if(seller.additional_detail.start_up){
    seller.is_startup = seller.additional_detail.start_up.is_startup ? "yes" : "no"
    seller.dipp = seller.additional_detail.start_up.dipp_no
    seller.dipp_mobile = seller.additional_detail.start_up.start_up_mobile
    if(seller.is_startup == 'yes'){
      seller.startup_type = seller.additional_detail.start_up.startup_type
      seller.self_declaration = (seller.startup_type == us.CONSTANTS.SELLER.STARTUP.SELF_DECLARED)
      seller.disable_startup_change = (seller.startup_type != us.CONSTANTS.SELLER.STARTUP.NOT_A_STARTUP)
    }

  }

  if(seller.is_itr_exempted){
    seller.self_declared_turnover = _.filter(seller.tax_records, function(record){return record.is_active && record.verification_status && record.is_self_declaration})
    //If self declared ITR is present
    if(seller.self_declared_turnover.length > 0){
      seller.fill_itr = "no"
      seller.itr_exemption_saved = true
    }
    //If system verification ITR is present
    else if(_.filter(seller.tax_records, function(record){return record.is_active && (record.is_system_verification)}).length > 0){
      seller.fill_itr = "yes"
    }
  }
  seller.tax_records = _.filter(seller.tax_records, function(record){return record.is_system_verification})

  seller.reg_orders_count = seller.additional_detail.reg_orders_count
  seller.reg_orders_value = seller.additional_detail.reg_orders_value

  return seller
}

us.getSellerProfile = function(formData){
  return identityAdminRA.one('sellers').customGET('get_seller_profile')
  .then(function(response) {
    // response.seller = us.initSeller(response.seller)
    return response;
  });
}

us.saveCompanyProfile = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'update_company_profile')
}

us.getConstitutionTypeBasedOnPan = function(formData){
  return identityAdminRA.one('sellers').customGET('constitution_type_based_on_pan',formData)
}

us.createVerification = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'create_verification')
  .then(function(response) {
   return response;
 });
}

us.validateSellerGSTIN = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'validate_and_update_gstin')
  .then(function(response) {
   return response;
 });
}

us.updateSellerUser = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'update_user').then(function(data){
    return data;
  });

}

us.updateSellerEmail = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData,'update_email').then(function(data){
    return data;
  });
}

us.updateSellerMobile = function(formData){
  return identityAdminRA.one('sellers').customPOST(formData, 'update_mobile').then(function(response){
    return response;
  })
}

  us.saveITRExemptionDetails = function(formData){
    return identityAdminRA.one('sellers').customPOST(formData,'save_itr_exemption_details').then(function(response){
      return response;
    })
  }

  us.getGovtRegisteredCommunityDetails = function(formData){
    return ratingPublicRA.one('govt_registered_sellers').customGET('get_details',formData)
  }

  us.createGovtRegisteredCommunityAccount = function(formData){
    return ratingPublicRA.one('govt_registered_sellers').customPOST(formData,"create_account").then(function(response){
     return response;
   })
  }

  us.approveBankAccount = function(formData){
    return identityAdminRA.one('sellers').customPOST(formData,"approve_bank_acount").then(function(response){
     return response;
   })
  }

  us.getLspList = function(){
    return identityAdminRA.one('sellers').customGET("get_lsp_list");
  }

  us.saveLsp = function(formData){
    return identityAdminRA.one('sellers').customPOST(formData,"save_lsp");
  }

  us.getConstitutionTypeBasedPrerequisites = function(formData) {
   	return identityAdminRA.one('sellers').withHttpConfig({cache: true}).customGET("get_constitution_type_based_prerequisites",formData);
  }

  us.saveVleSellerConsent = function(formData){
    return identityAdminRA.one('sellers').customPOST(formData,'save_seller_consent');

  }

  us.createValidateTAN = function(formData){
    return ratingUsersRA.one('tans').customPOST(formData);
  }

  us.getTanRecords = function(){
    return ratingUsersRA.one('tans').customGET();
  }

  us.saveDoeUndertaking = function(formData)
  {
  	return identityAdminRA.one('sellers').customPOST(formData,'save_doe_undertaking');
  }

  us.allowedActions= function(){
		return gemAdminRA.one('customers').customGET('allowed_referal_verification_actions').then(function(response){
			return response;
		});
	}

  us.closeHodAccount = function(formData){
		return gemAdminRA.one('customers').customPOST(formData,'close_hod_account').then(function(response){
			return response;
		});
	}

  us.validateSellerPmVishwakarma = function(){
    return identityAdminRA.one('sellers').customPOST({},'validate_and_create_pm_vishwakarma_mapping').then(function(response) {
      return response;
    });
  }

}])
angular.module('siteApp')

.service('vaRequestApprovalService',['gemUsersRA', function(gemUsersRA){

  this.getList = function(formData) {
    return gemUsersRA.one('workflow/verifying_authority_request_approvals').customGET('',formData)
  }

  this.getDetails = function(approval_id){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals").customGET(approval_id)
  }

  this.getApprovalsForVa = function(formData){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals").customGET('get_approvals_for_va', formData);
  }

  this.createNewApproval = function(formData){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals").customPOST(formData)
  }

  this.approveVaApproval = function(formData){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals/"+formData["id"]).customPOST(formData,'approve')
  }

  this.rejectVaApproval = function(formData){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals/"+formData["id"]).customPOST(formData,'reject')
  }

  this.requestForInfo = function(formData){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals/"+formData["id"]).customPOST(formData,'request_for_info')
  }

  this.retryApproval = function(formData){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals/"+formData["id"]).customPOST(formData,'va_resubmit')
  }

  this.getApproverList = function(){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals").customGET('get_approver_list')
  }

  this.getAbilityList = function(){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals").customGET('get_va_ability_list')
  }

  this.rejectVaWithApproval = function(formData){
    return gemUsersRA.one("workflow/verifying_authority_request_approvals/"+formData["id"]).customPOST(formData,'reject_va_with_approval')
  }

  this.getCAList = function(formData) {
    return gemUsersRA.one("workflow/verifying_authority_request_approvals").customGET('get_ca_for_hierarchy', formData)
  }

}])
angular.module('siteApp')

.directive('validatePassword', ['userService', '$cookies', 'notificationService', '$timeout', '$sce', function(userService, $cookies, notificationService, $timeout, $sce){
  return{
    restrict: 'E',
    scope: {
      parentForm: '=',
      password: '=',
      firstName: '=',
      lastName: '=',
      userId: '=',
    },
    templateUrl: '/javascripts/site_angular/app-common/views/validate_password.html',
    controller: ['$scope', function($scope){

      $scope.oneUpperCasePattern = /[A-Z]/
      $scope.oneLowerCasePattern = /[a-z]/
      $scope.oneDigitPattern = /\d/
      $scope.oneSpecialCharacterPattern = /[~!@#$%?^&\/*\[\]()_+={}|:'",<.>]/

      $scope.validatePattern = function(pattern){
        return $scope.password && pattern.test($scope.password)
      }

      $scope.validateLength = function(){
        return $scope.password && ($scope.password.length >= 8) && ($scope.password.length <= 16)
      }

      $scope.validateAgainstUserData = function(){
        var errorMessage = ''
        if(!$scope.password)
          errorMessage = 'Please enter password'
        else if(!$scope.userId || !$scope.firstName)
          errorMessage = 'User ID or First Name is not present'
        else if(_.includes($scope.password.toLowerCase(), $scope.userId.toLowerCase()))
          errorMessage = 'User ID cannot be a part of your password'
        else if(_.includes($scope.password.toLowerCase(), $scope.firstName.toLowerCase()))
          errorMessage = 'First Name cannot be a part of your password'
        else if($scope.lastName && _.includes($scope.password.toLowerCase(), $scope.lastName.toLowerCase()))
          errorMessage = 'Last Name cannot be a part of your password'
        else if($scope.password && ($scope.password.substr(0,1)==" " || $scope.password.substr($scope.password.length-1)== " "))
          errorMessage = "Please don't use leading or trailing spaces"
        else if(/(.)\1/.test($scope.password))
          errorMessage = "Please don't use two consecutive same characters"
        return errorMessage
      }

    }]
  }
}])
angular.module('siteApp')

.service('vendorAssessService',['notificationService','ratingUsersRA','$filter',
  function(notificationService,ratingUsersRA,$filter){

  var svc = {
    init_config: function(){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customGET('get_seller_assessment_config').then(function(res){
        va.config = res
        return va
      })
    },
    viewTab: function(tab){
      var va = this;
      if(va.can_proceed(tab))
        va.selected_tab = tab
      if(va.selected_tab == 'payment' || va.selected_tab == 'submit_va')
        {
        var is_exemption = va.assess_details.is_exemption
        va.can_allow_payment(is_exemption)
      }
    },
    showTab: function(tab){
      var va = this;
      if (tab.code == 'assessor_response' &&  va.assess_details && (va.assess_details.current_user_is_assessor || (va.assess_details.va_submitted != true)))
        return false
      else if (tab.code == 'category' && va.selected_exemption_type && !va.selected_exemption_type.allow_categories)
        return false
      else
        return true
    },
    showAssessType: function(assess_type){
      var va = this;
      if(assess_type == 'OEM' || assess_type == 'reseller')
        return true
      else if (assess_type == 'serviceProvider' && va.selected_assess_type && va.selected_assess_type.code == 'serviceProvider' && va.assess_details && va.assess_details.paid_at ) //to handle old assessment created for service
        return true
      else if (assess_type == 'serviceProvider' && va.selected_assess_type && va.selected_assess_type.code == 'serviceProvider' && va.assess_details && !va.assess_details.paid_at)
      {
        va.selected_assess_type = null
        return false
      }
      else
        return false
    },
    showCategoryType: function(category){
      var va = this;
      if (category && category != 'service')
        return true
      else if (category == 'service' && va.assess_details && va.assess_details.paid_at)
        return true
      else
        return false
    },
    initiate_va: function(is_exemption){
      var va = this;
      if(!va.va_id)
      {
        return ratingUsersRA.all('seller_assessments').customPOST({seller_assessed_as: [va.selected_assess_type.code],is_exemption:is_exemption},'create_seller_assessment',{}).then(function(res){
          va.original_assess_details = angular.copy(res)
          va.config.assessment_tabs = _.flatten(_.concat(va.config.assessment_tabs, res.additional_assessment_tabs));
          return res
        })
      }
      else{
        return ratingUsersRA.all('seller_assessments').customPOST({seller_assessed_as: [va.selected_assess_type.code],id: va.va_id,is_exemption: is_exemption},'update_assessed_as',{}).then(function(res){
          va.original_assess_details = angular.copy(res)
          return res
        })
      }
    },
    initiate_va_exemption: function(){
      var va = this;
      if(!va.va_id)
      {
        return ratingUsersRA.all('seller_assessments').customPOST({seller_assessed_as: [va.selected_assess_type.code]},'create_seller_assessment_exemption',{}).then(function(res){
          va.original_assess_details = angular.copy(res)
          return res
        })
      }
      else{
        return ratingUsersRA.all('seller_assessments').customPOST({seller_assessed_as: [va.selected_assess_type.code],id: va.va_id,is_exemption: true},'update_exemption_seller_type',{}).then(function(res){
          va.original_assess_details = angular.copy(res)
          return res
        })
      }
    },
    updateExemptionClause: function(){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customPOST({seller_exempted_as: [va.selected_exemption_type.code],id: va.va_id,is_exemption: true},'update_exemption_type',{}).then(function(res){
        va.original_assess_details = angular.copy(res)
        return res
      })
    },
    save_additional_info: function(details,key){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customPOST({id: va.va_id,details: details,key: key},'save_additional_info',{}).then(function(res){
        va.original_assess_details = angular.copy(res)
        va.assess_details = res
        return res
      })
    },
    date_format: function(timestamp,format){
      if(format == 'date_time')
        return $filter('date')(timestamp,'yyyy-MM-dd HH:mm:ss')
      else
        return $filter('date')(timestamp,'yyyy-MM-dd')
    },
    get_seller_type: function(){
      var va = this;
      if (va.vendor_details && va.vendor_details.seller_type)
        return va.vendor_details.seller_type
      else if (va.assess_details && va.assess_details.seller_info && va.assess_details.seller_info.seller_type)
        return va.assess_details.seller_info.seller_type
    },
    tab_completed: function(tab){
      var va = this;
      if (!va.can_start || !va.can_proceed)
        return false
      if((tab.code == 'assessment_type' || tab.code == 'exemption_seller_type') && va.original_assess_details && va.original_assess_details.seller_assessed_as)
      {
        tab.completed = true
        return true
      }
      else if(tab.code == 'vendor_profile' && va.can_start && (va.assess_details && (!_.isEmpty(va.assess_details.additional_contact_details)) && va.assess_details.additional_contact_details != null))
      {
        tab.completed = true
        return true
      }
      else if(tab.code == 'bank' && ((va.vendor_details && va.vendor_details.seller.va_bank_accounts.length > 0) || (va.assess_details && va.assess_details.seller_info)))
      {
        tab.completed = true
        return true
      }
      else if(tab.code == 'category' && va.original_assess_details && va.original_assess_details.sa_category && va.original_assess_details.sa_category.length > 0)
      {
        tab.completed = true
        return true
        // sa_cat_details = _.flatten(_.map(va.original_assess_details.sa_category,'sa_category_details'))
        // if(sa_cat_details.length > 0)
        // {
        // }
        // else
        // {
          // tab.completed = false
          // return false
        // }
      }
      else if(tab.code == 'financial' && ((va.vendor_details && va.vendor_details.seller.tax_records.length > 0) || (va.assess_details && va.assess_details.seller_info)))
      {
        tab.completed = true
        return true
      }
      else if((tab.code == 'payment' || tab.code == 'submit_va') && va.original_assess_details && (va.original_assess_details.payment_status=='success' || va.original_assess_details.va_submitted == true ))
      {
        tab.completed = true
        return true
      }
      else if(tab.code == 'assessor_response' && va.original_assess_details && va.original_assess_details.status == 'assessed')
      {
        tab.completed = true
        return true
      }
      else if(tab.code == 'exemption_type' && va.original_assess_details && va.original_assess_details.seller_assessed_as_details && va.original_assess_details.seller_assessed_as_details.exemption_clause && va.original_assess_details.seller_assessed_as_details.exemption_clause[0]) {
        tab.completed = true
        return true
      }
      else if(tab.code == 'exemption_documents' && (va.original_assess_details && va.original_assess_details.uploaded_docs_count > 0)) {
        tab.completed = true
        return true
      }
      else
      {
        tab.completed = false
        return false
      }
    },

    remove_financial_docs: function(){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customPOST({docs_id: va.removed_seller_docs,id: va.va_id},'remove_docs',{}).then(function(res){
        return res
      })
    },

    cancel_assessment: function(va_id){
      var va = this;
       return ratingUsersRA.all('seller_assessments').customPOST({id: va_id},'cancel_assessment',{}).then(function(res){
        return res
      })
    },

    get_assessment_yr: function(start_year){
      return start_year + '-' + (parseInt(start_year) + 1)
    },
    get_assessment_details: function(){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customGET('get_seller_assessment',{id: va.va_id}).then(function(res){
        va.original_assess_details =  angular.copy(res)
        va.assess_details = res
        va.config.assessment_tabs = _.flatten(_.concat(va.config.assessment_tabs, res.additional_assessment_tabs));
        return res
      })
    },
    get_assessment_exemption_details: function(){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customGET('get_seller_assessment',{id: va.va_id,is_exemption: true}).then(function(res){
        va.original_assess_details =  angular.copy(res)
        va.assess_details = res
        va.selected_exemption_type = _.find(va.config.assessment_exemption_types,{code: va.original_assess_details.seller_assessed_as_details.exemption_clause[0]})
        return res
      })
    },
    get_vendor_assessment_status: function(){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customGET('get_vendor_assessment_status',{va_number:va.assess_details.va_number}).then(function(response){
         return response
       })
    },
    seller_wise_search: function(id){
      return ratingUsersRA.all('seller_assessments').customGET('get_seller_assessment_list',{seller_id: id}).then(function(res){
        return res
      })
    },
    get_assessment_list: function(status){
      return ratingUsersRA.all('seller_assessments').customGET('get_seller_assessment_list',{status: status}).then(function(res){
        return res
      })

    },
    can_start_assessment: function(){
     return ratingUsersRA.all('seller_assessments').customGET('can_start_assessment',{}).then(function(res){
        return res
      })
    },
    can_start_assessment_exemption: function(){
     return ratingUsersRA.all('seller_assessments').customGET('can_start_assessment_exemption',{}).then(function(res){
        return res
      })
    },
    mark_assessed: function(){
      var va=this
      return ratingUsersRA.all('seller_assessors').customPOST({va_id:va.va_id}, 'assess_seller', {}).then(function(res){
        return res
      })
    },
    update_seller_assessment:  function(){
      var va=this
      return ratingUsersRA.all('seller_assessments').customPOST({id: va.va_id,sa: va.assess_details.sa_category,removed_category: va.removed_category,removed_category_details: va.removed_category_details},'update_seller_assessment',{}).then(function(res){
        va.original_assess_details = angular.copy(res)
        va.assess_details=_.merge(va.assess_details,res)
        va.category_files=[]
        _.forEach(va.assess_details.sa_category,function(category){
          if(category.category_oem_files)
            va.category_files.push({sac_id:category.id,files:category.category_oem_files})
        })
        return va.assess_details
      })
    },
    update_assigned_agency: function(){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customPOST({va_id: va.va_id},'assign_to_assessor',{}).then(function(res){
        return res
      })
    },

    getExemptionDocTypes: function(formData){
      return ratingUsersRA.all('seller_assessments').customGET('get_exemption_doc_types',formData)
    },
    getUploadedExemptionDocs: function(){
      return ratingUsersRA.all('seller_assessments').customGET('get_uploaded_exemption_docs')
    },


    // can_assess: function(){
    //   var va = this;
    //   mandatory_fields_tab = _.filter(va.vendor_details.seller.tabs,function(tab){
    //     return _.includes(va.config.mandatory_details,tab.code)
    //   })
    //   mandatory_fields_status = _.map(mandatory_fields_tab,'status')
    //   va.can_be_assessed =  !_.includes(mandatory_fields_status,false)
    // },

    // can_allow_payment: function(){
    //   var va = this;
    //   // allow_payment_status = ['failure',null]
    //   // va.all_tabs_complete =  !_.includes(_.map(va.config.assessment_tabs,'completed'),false)
    //   return va.can_be_assessed && va.assess_details.can_pay
    // },


    can_allow_payment: function(is_exemption){
      var va = this;
      if(!va.assess_details.paid_at)
      {
        return ratingUsersRA.all('seller_assessments').customGET('can_pay_for_assessment',{id: va.va_id,is_exemption: is_exemption}).then(function(res){
          va.can_pay = res.can_pay_for_assessment
          va.payment_msg = res.message
          return res
        })
      }
    },

    get_payment_inputs: function(){
      var va = this;
      return ratingUsersRA.all('payments').customPOST({assessment_id: va.va_id},'payment_inputs',{}).then(function(res){
        return res
      })
    },
    submit_va_skipping_payment: function(is_exemption){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customPOST({id: va.va_id,is_exemption: is_exemption},'skip_vendor_assessment_payment',{}).then(function(res){
        return res
      })
    },


    can_proceed: function(tab_code){
      var va = this;
      if(!va.can_start)
        return false
      else if ((tab_code != 'assessment_type'&& tab_code != 'exemption_seller_type') && (!va.va_id))
        return false
      else if(va.va_id && va.selected_assess_type && va.selected_assess_type.code == 'serviceProvider' && !va.assess_details.paid_at)
        return false
      else
        return true
    },

    getAddress: function(address){
      return $.grep([address.block_no,address.building,address.street,address.area,address.district,address.state], Boolean).join(",")
    },

    mark_as_in_progress: function(va_id){
      return ratingUsersRA.all('seller_assessors').customGET('mark_as_in_progress',{va_id: va_id,to_status: 'in_progress'}).then(function(res){
        return res
      })
    }
  }

  return function() {
    return svc.init_config();
  };

}])

angular.module('siteApp')

.service('vendorAssessorService',['notificationService','ratingUsersRA','$filter',
  function(notificationService,ratingUsersRA,$filter){

  var svc = {
    init_config: function(){
      var va = this;
      return ratingUsersRA.all('seller_assessments').customGET('get_seller_assessment_config').then(function(res){
        va.config = res
        return va
      })
    },
    get_assessment_yr: function(start_year){
      return start_year + '-' + (parseInt(start_year) + 1)
    },
    verification_status: function(){
      return ['valid','invalid']
    },
    mark_assessed: function(assessor_status){
      var va=this
      var expiry_date = $filter('date')(va.expiry_date, 'dd/MM/yyyy')
      return ratingUsersRA.all('seller_assessors').customPOST({va_id:va.va_id,assessor_response:va.assessor_response,assessor_status: assessor_status,expiry_date: expiry_date}, 'assess_seller', {}).then(function(res){
        return res
      })
    },
    mark_exemption_assessed: function(validity){
      var va=this
      var expiry_date = $filter('date')(va.expiry_date, 'dd/MM/yyyy')
      return ratingUsersRA.all('seller_assessors').customPOST({va_id:va.va_id,validity: validity,is_exemption:true, assessor_response: va.assessor_response,expiry_date:expiry_date}, 'assess_exemption', {}).then(function(res){
        return res
      })
    },
    // update_assessor_response: function(){
    //   var va=this
    //   return ratingUsersRA.all('seller_assessors').customPOST({va_id:va.va_id}, 'update_assessor_response', {}).then(function(res){
    //     return res
    //   })
    // },
    date_format: function(timestamp,format){
      if(format == 'date_time')
        return $filter('date')(timestamp,'yyyy-MM-dd HH:mm:ss')
      else
        return $filter('date')(timestamp,'yyyy-MM-dd')
    },
    get_seller_type: function(){
      var va = this;
      if (va.vendor_details && va.vendor_details.seller_type)
        return va.vendor_details.seller_type
      else if (va.assess_details && va.assess_details.seller_info && va.assess_details.seller_info.seller_type)
        return va.assess_details.seller_info.seller_type
    },
    mark_as_cancelled: function(id){
      var va=this
      return ratingUsersRA.all('seller_assessors').customPOST({va_id:id}, 'mark_as_cancelled', {}).then(function(res){
        return res
      })
    },
    seller_wise_search: function(id,status){
      return ratingUsersRA.all('seller_assessors').customGET('get_seller_assessment_list',{seller_id: id,status:status}).then(function(res){
        return res
      })
    },
    search_va_number: function(va_number){
      return ratingUsersRA.all('seller_assessors').customGET('get_seller_assessment_list',{va_number: va_number}).then(function(res){
        return res
      })
    },
    get_seller_assessments: function(va_id,is_exemption){
      var va = this;
      return ratingUsersRA.all('seller_assessors').customGET('get_seller_assessments',{va_id: va_id,is_exemption: is_exemption}).then(function(res){
        va.assessment=res
        va.vendor_details={}
        va.vendor_details.seller=res.seller_info
        console.log("assessments",va.vendor_details)
        return res
      })
    },
    change_status: function(status,assessment){
      var va = this;
      return ratingUsersRA.all('seller_assessors').customGET('change_status',{va_id: assessment.id,to_status: status}).then(function(res){
        return res
      })
    },
    get_seller_list: function(search_term){
      var va= this;
      return ratingUsersRA.all('seller_assessors').customGET('search_sellers',{term: search_term}).then(function(res){
        va.seller_list=res.seller_list
      })
    },
    get_assessment_list_for_assessor: function(status,page){
      return ratingUsersRA.all('seller_assessors').customGET('get_seller_assessment_list',{status: status,page:page,per_page:10}).then(function(res){
        return res
      })
    },
    get_assessor_tabs: function(){
      return ratingUsersRA.all('seller_assessors').customGET('get_assessor_tabs',{}).then(function(res){
        return res
      })
    },
    save_comments: function(comments,va_id){
      var va=this
      return ratingUsersRA.all('seller_assessors').customPOST({comments: comments,va_id: va_id},'save_comments',{}).then(function(res){
        va.assessment.comments=res.comments
      })
    },
    getAddress: function(address){
      return $.grep([address.block_no,address.building,address.street,address.area,address.district,address.state], Boolean).join(",")
    },
  }

  return function() {
    return svc.init_config();
  };

}])

angular.module('siteApp')
.directive('verificationTools', ['notificationService', function(notificationService){
  return {
    restrict: 'E',
    scope: {
      location:'@',
      buttonAddon : "@",
      verifiableId: '@',
      verifiableType: '@',
      context: '@',
      verificationTypes: '@',
      ebillEnabled: '@',
      onFailure : '=',
      onSuccess : '=onSuccess'
    },
    templateUrl: '/javascripts/site_angular/app-common/views/verification_tools.html',
    link: function($scope, element, attributes){
      console.log("$vtscope",$scope)

      $scope.checkAvailability = function(type){
        return $scope.verificationTypes.indexOf(type)!=-1
      }

      $scope.getButtonName = function(type){
         if(type =="otp"){
          return "Verify with OTP "+ $scope.buttonAddon
        }
        else if (type == "esign"){
          return "E-sign "+ $scope.buttonAddon
        }
        else if (type =="dsc"){
          return "DSC Verify  "+ $scope.buttonAddon
        }
      }
    }
  }
}])
angular.module('siteApp')

.factory('vleUsersRA', ['gemUsersRA', '$window', function(gemUsersRA, $window) {
  return gemUsersRA.withConfig(function(RestangularConfigurer) {
    RestangularConfigurer.setDefaultHttpFields({disablePromiseHalt: true});
    RestangularConfigurer.addErrorInterceptor(function(response, deferred, responseHandler) {
      var disablePromiseHalt = !!response.config.disablePromiseHalt
      if(response.status === 403){
        $window.location.href = "/auth/csc"
      }
      return disablePromiseHalt;
    })
  });
}])

.service('vleUserService',['vleUsersRA', '$window', function(vleUsersRA, $window){

  this.getCurrentUser = function(formData) {
    return vleUsersRA.one('vle/users').withHttpConfig({disableErrorMessage: true}).customGET('get_current_user')
  }

  this.sendOtp = function(formData) {
    return vleUsersRA.one('vle/users').customPOST(formData,'send_otp')
  }

  this.verifyOtp = function(formData) {
    return vleUsersRA.one('vle/users').customPOST(formData,'verify_otp')
  }
  this.getStats = function(formData){
    return vleUsersRA.one('vle/users').customGET('get_stats',formData)
  }

  this.usersForActivity = function(formData){
    return vleUsersRA.one('vle/users').customGET('users_for_activity',formData)
  }

  this.getActivityLogForUser = function(formData){
    return vleUsersRA.one('vle/users').customGET('get_activity_log_for_user',formData)
  }

  this.activitiesSummary = function(formData){
   return vleUsersRA.one('vle/users').customGET('activities_summary',formData)
  }

}])
app = angular.module('createFormApp', ['siteApp']);

app.controller('formCtrl', ['$scope', '$attrs', '$compile', '$q', '$http', '$templateRequest', 'ruleService', 'validationService', 'initService', function ($scope, $attrs, $compile, $q, $http, $templateRequest, ruleService, validationService, initService) {
  var el = $attrs.$$element;
  // $(el).on( "renderForm", function( event, params ) {
  //   console.log('here', params)
  // })
}]);
angular.module('createFormApp')
.service('helperService', ['$filter','notificationService', function ($filter,notify) {

	this.getPlaceholder = function (field, spec, units) {
		var placeholder = ' '
		var uc = this.getUnit(spec,field,units)
		var unit = uc.unit || ''
		var conversionFactor = uc.conversionFactor

		if(field.range && this.isPresent(field.range[0]) && field.range[0].length > 1){
			placeholder = 'Range: ' + _.join(_.map(_.sortBy(field.range, function(x){return x}),function(x){ return formatData(x[0],field.data_type,conversionFactor)+' - '+formatData(x[1],field.data_type,conversionFactor)})) + ' ' + unit
		}
		else{
			var min = field.data_type === 'Date' ? formatDate(field.start_date,field.data_type) : (field.range && this.isPresent(field.range[0]) ? field.range[0]*conversionFactor.toFixed(2) : '')
			var max = field.data_type === 'Date' ? formatDate(field.end_date) : (field.range && this.isPresent(field.range[1]) ? field.range[1]*conversionFactor.toFixed(2) : '')

			if (this.isPresent(min) && this.isPresent(max)){
				placeholder = "Range: ["+min+" - "+max+"] " + unit
			}
			else if (!this.isPresent(max) && this.isPresent(min)){
				placeholder = "Range: >= " + min + ' ' + unit
			}
			else if (!this.isPresent(min) && this.isPresent(max)){
				placeholder = "Range: <= " + max + " " + unit
			}
		}
		return placeholder
	}

	this.isPresent = function(str){
		return ((str!==undefined && str!==null && str!=="") || str === 0)
	}

	this.getUnit = function(spec,field,units) {
		var unit = (spec && spec.value && spec.value[0] && spec.value[0].unit) ? spec.value[0].unit : field.unit
		var conversionFactor = getConversionFactor(field,unit,units)
		return { unit: unit, conversionFactor: conversionFactor }
	}

	function formatData(data, data_type, conversionFactor){
		return data_type === 'Date' ? formatDate(data) : data*conversionFactor.toFixed(2)
	}

	function formatDate(date){
		return (date instanceof Date) ? $filter('date')(date, 'yyyy-MM-dd') : date
	}

	function getConversionFactor(field,unit,units){
		return (units && units[field.measure_for_unit] && units[field.measure_for_unit][field.unit] && units[field.measure_for_unit][field.unit][unit]) ? units[field.measure_for_unit][field.unit][unit].conversionFactor : 1
	}
}]);
angular.module('createFormApp')
.service('ruleService', ['$filter','notificationService','helperService', function ($filter,notify,helperService) {

	this.evalRule = function (currentColumn, groups, specs, dependencies, units) {
		_.each(dependencies, function (dep) {
			var rules = dep.allowed_values
			var prevObj = null
			var currentSpec = null
			dep.firstColumnFound = dep.firstColumnFound || false
			if(!rules.length) return false

			_.each(groups, function (group) {
				_.each(group.fields, function(field){
					var column = field.code
					var spec = specs[column]
					storeOrgValues(field)
					if (_.includes(dep.columns,column)){
						if(!dep.firstColumnFound){
							dep.firstColumnFound = true
							spec.isFirstColumn = true
						}

						if(!currentColumn){
							spec.isDisabled = spec.isFirstColumn ? false : true
							field.placeholder = helperService.getPlaceholder(field,spec,units)
						}
						else if (dep.firstColumnFound && prevObj && prevObj.value && prevObj.value[0] && helperService.isPresent(prevObj.value[0].data)) {
							rules = filterRules(prevObj, rules, units)
							if(!rules.length)
								currentSpec = currentSpec || prevObj
							populateUniverse(field,spec,rules,units,currentSpec)
							prevObj = setPreviousColumn(spec,field)
						} 
						else {
							spec.isDisabled = spec.isFirstColumn ? false : true
							populateUniverse(field,spec,[],units,currentSpec)
							prevObj = setPreviousColumn(spec,field)
						}
					}
					else{
						spec.isDisabled = spec.isDisabled || false
					}
				})
			})
		})
		return true
	}

	function getFieldData(field){
		  if(field.dictionary_id)
		    return String(field.dictionary_id)
		  if(helperService.isPresent(field.data))
		    return String(field.data)
		  var fieldValue = _.isArray(field) ? (field[1] || field) : field
		  return String(fieldValue)
	}

	function filterRules(prevObj,rules, units){
		if (isFieldSet(prevObj)) {
			var allValues = []
			var data = prevObj.value.map(function(x){ return getFieldData(x)})

			rules = rules.filter(function (o) {
				var value = o[prevObj.code].value.map(function(x){ return getFieldData(x)})
				allValues.push(value)
				return (_.difference(data, value).length != data.length)
			})
			allValues = _.uniq(_.flattenDeep(allValues))
			rules = _.difference(data,allValues).length ? [] : rules
		}
		else if (isFieldRange(prevObj)) {
			var data = prevObj.value.map(function(x){return String(helperService.isPresent(x.data) ? x.data : '')})[0]

			data = prevObj.data_type === 'Date' ? convertToDate(data) : parseFloat(data)
			
			var unitData = helperService.getUnit(prevObj,prevObj,units)
			var y = checkIfNull(rules, prevObj.code)

			var minCondition = "parseFloat(o[prevObj.code].min) <= data"
			minCondition = prevObj.data_type == 'Date' ? "convertToDate(o[prevObj.code].min) <= data" : minCondition

			var maxCondition = "parseFloat(o[prevObj.code].max) >= data"
			maxCondition = prevObj.data_type == 'Date' ? "convertToDate(o[prevObj.code].max) >= data" : maxCondition

			var condition = y.min.length ? "" : minCondition

			data = unitData.unit ? (data / unitData.conversionFactor.toFixed(2)) : data
			condition = condition ? condition + (y.max.length ? "" : " && " + maxCondition) : y.max.length ? "" : maxCondition;

			rules = rules.filter(function (o) {
				return eval(condition)
			})
		}
		return rules
	}

	function setPreviousColumn(spec,schema){
		var obj = {data_type: schema.data_type, code: schema.code, restriction_type: schema.restriction_type, unit: schema.unit, measure_for_unit: schema.measure_for_unit, display_name: schema.display_name, isFirstColumn: spec.isFirstColumn}
		obj.value = angular.copy(spec.value)
		return obj
	}

	function populateUniverse(field,spec,rules,units,currentSpec) {
		if (!rules || !rules.length) {
			if((currentSpec && currentSpec.isFirstColumn) || !currentSpec){
				if(isFieldSet(field)){
					field.value = angular.copy(field.orgVal)
				}
				else if(isFieldDate(field)){
					field.start_date = angular.copy(field.orgStartDate)
					field.end_date = angular.copy(field.orgEndDate)
				}
				else if(isFieldRange(field)){
					field.range = angular.copy(field.orgRange)
					if(field.restriction_type === 'any'){
						field.range = [null,null]
					}
				}
				spec.isDisabled = currentSpec ? (currentSpec.isFirstColumn ? false : true) : (spec.isFirstColumn ? false : true)
			}
			else{
				if(currentSpec){
					spec.isDisabled = true
					var value = currentSpec.value[0]
					notify.error('The value '+ (value ? value.data : '') + (value ? (value.unit || '') : '') + ' for field '+currentSpec.display_name+' is incorrect.Please select another value.')
					value = null
				}
			}
		} 
		else {
			spec.isDisabled = false
			if(spec.isFirstColumn) return false
			if (isFieldSet(field)) {
				populateSetUniverse(field,rules)
			}
			else {
				populateRangeUniverse(spec,field,rules,units)
			}
		}
		field.placeholder = helperService.getPlaceholder(field,spec,units)
		return true
	}

	function populateRangeUniverse(spec,field,rules,units){
		var column = field.code
		var unit = helperService.getUnit(spec,field,units)
		field.range = []
		_.each(rules, function (x,i) {
			field.range[i] = [
				helperService.isPresent(x[column].min) ? (isFieldDate(field) ? convertToDate(x[column].min) : parseFloat(x[column].min)) : null,
				helperService.isPresent(x[column].max) ? (isFieldDate(field) ? convertToDate(x[column].max) : parseFloat(x[column].max)) : null
			]
		})
	}

	function populateSetUniverse(field,rules){
		var column = field.code
		field.value = []
		rules.map(function (x) {
			var val = hasDictionary(field) ? _.intersectionBy(field.orgVal,x[column].value, 'dictionary_id') : x[column].value
			return field.value = _.union(field.value, val)
		})
		if(field.value.length){
			if(field.value[0].hasOwnProperty('dictionary_id')) field.value = _.uniqBy(field.value,'dictionary_id')
			else if(field.value[0].hasOwnProperty('data')) field.value = _.uniqBy(field.value,'data')
			else{
                field.value = _.isArray(field.value[0]) ? _.uniqWith(field.value,_.isEqual) :  _.uniq(field.value)
                if(field.data_type == "Boolean"){
                    var finalValues = []
                    _.forEach(field.value, function(v){
                        if(!_.isArray(v) && _.isString(v)){
                            if(v == 'true')
                                finalValues.push(["Yes", "true"])
                            if (v == 'false')
                                finalValues.push(["No", "false"])
                        }
                    })
                    if(finalValues.length)
                        field.value = finalValues
                }

            }
		}
	}

	function storeOrgValues(field){
		field.orgVal = field.orgVal || angular.copy(field.value)
		field.orgStartDate = field.orgStartDate || convertToDate(angular.copy(field.start_date))
		field.orgEndDate = field.orgEndDate || convertToDate(angular.copy(field.end_date))
		field.orgRange = field.orgRange || angular.copy(field.range)
	}

	function isFieldRange(field) {
		return (field.restriction_type === 'range' || field.restriction_type === 'any')
	}

	function isFieldSet(field) {
		return (field.restriction_type === 'value' || field.data_type === 'Boolean')
	}

	function hasDictionary(field){
		return (field.data_type === 'Enumerable' || field.data_type === 'Ordinal' || field.data_type === 'Groupedordinal')
	}

	function isFieldDate(field){
		return (field.data_type === 'Date')
	}

	function convertToDate(str){
		return new Date(str)
	}

	function checkIfNull(rules, column) {
		var min = rules.filter(function (o) {
			return o[column].min == null;
		});
		var max = rules.filter(function (o) {
			return o[column].max == null;
		});
		return { min: min, max: max };
	}
}]);
app=angular.module('createFormApp')
app.service('validationService',['$filter', function($filter){
  var validate = this
  validate.validateAllFields = function(groups,specs,units){
    _.each(groups,function(group){
      _.each(group.fields, function(field){
        if(specs && field && units){
          return validate.validateAll(field,specs[group.name][field.display_name],units)
        }
        else{
          return false
        }
      })
    })
  }

  validate.validateAll = function(schema,spec,units){
    spec.isValid = (validate.validateSet(schema,spec))
    if (spec.isValid)
      spec.errors = ''
  }

  validate.validateRequired = function(el){
    if (el.validations && el.validations.required && (!el.hasOwnProperty('data') || el.data === '' || el.data == null || $.isPlainObject(el.data) && (el.data.value == null || el.data.value === ''))){
      return false
    }
    else
      return true
  }

  validate.validateFloat = function(el){
    if ((el.data || el.data == 0) && ['float'].indexOf(el.dataType) != -1  && !($.isNumeric(el.data))){
      el.errorMsg = 'Enter a valid number'
      return false
    }
    else
      return true
  }

  validate.validateInteger = function(el){
    if(el.data && el.dataType == 'digits' && !( /^\d+$/.test(el.data))){
      el.errorMsg = 'Enter a valid digit'
      return false
    }
    else
      return true
  }

  validate.validateRange = function(schema,spec,units){
    return true
    var flag = true
    if(spec.value && (spec.value.data || spec.value.data == 0) && schema.restriction_type === 'range'){
      var data = spec.value.data
      var unit = spec.value.unit ? spec.value.unit : schema.unit
      var conversionFactor = (unit && units) ? units[schema.measure_for_unit][unit].conversionFactor : 1
      var minRange = schema.range[0]*conversionFactor
      var maxRange = schema.range[1]*conversionFactor
      spec.conversionFactor = conversionFactor
      if (minRange >= parseFloat(data) || parseFloat(data) > maxRange)
        flag = false
      else
        flag = true
    }
    else{
      flag = true
    }
    if (!flag){
      spec.errors = "Range: " + (!minRange ? ("< " + maxRange) : (!maxRange ? ("> "+ minRange) : ("["+minRange+" - "+maxRange+"]")))
    }
    return flag
  }

  validate.validateSet = function(schema,spec,field){
    if(spec.value && (spec.value.data && (spec.value.data != '' || spec.value.data != undefined || spec.value.data != null || spec.value.data == 0)) && schema.restriction_type === 'value'){
      var set = schema.data_type !== 'Ordinal' ? schema.value : _.map(schema.value,function(x){return x[0]})
      if(set.indexOf(spec.value.data) == -1){
        spec.errors = "The value provided '"+ spec.value.data +"' doesn't belong to accepted set"
        return false
      }
      else{
        spec.errors = ""
        return false
      }
    }
    else{
      spec.errors = ""
      return true
    }
  }

  function convertToDate(date){
    return $.datepicker.parseDate('dd/mm/yy',date)
  }

  function formatDate(date){
    return $filter('date')(date, 'dd/MM/yyyy')
  }
}])
angular.module('siteApp')
.directive('addNewBrand',function(){
  return{
    restrict: 'E',
    scope:{
      showBrand: '=',
      categoryId: '@',
      populateData: '<populateData',
      onlyOem: '<?',
      brandName: '<?',
      eligibleToBeOem: '<?',
      assessmentExclusiveBasedOnTurnover: '<?'
    },
    controller: 'addNewBrandCtrl',
    templateUrl:'/javascripts/angular_components/templates/add_new_brand.html',
    link: function (scope, element, attrs, controller) {
        attrs.$observe('categoryId', function(value) {
          if(value != "" && value != _.isUndefined(value)){
            scope.init_request_data(value)
          }
        })
    }
  }
})

.controller('addNewBrandCtrl',['$scope','$state','notificationService','adminRA','Upload','$rootScope','$uibModal','gemUserRA','confirmModal', function($scope, $state, notificationService, adminRA, Upload,$rootScope,$uibModal,gemUserRA,confirmModal){

  $scope.brand_text = "Provide a link to the brand's product listings page on your website. Correct link will help your brand approval. If you don't have a link, Please enter 'NA'"
  $scope.oem_link_text = "Provide a link to the OEM's website. Correct link will help your OEM approval. If you don't have a link, Please enter 'NA'"
  $scope.bid_acknowledgement_text = "I Agree"
  $scope.bid_disclaimer_text = "Please note that GeM may periodically verify the bid participation on prioritised requests. If bid participation is not found, GeM may apply penalties on the seller as deemed fit."
  $scope.brand_file = [{"type":""}]
  $scope.selected_file_types = []
  $scope.brand_file_types = {}
  $scope.constant_file_types = ["Govt. order copy"]
  if (_.isUndefined($scope.brandName)){
    $scope.brandName = {}  
  }
  $scope.brand_type = {'value': 'RegisteredBrand'}
  $scope.entered_links = []
  $scope.entered_links[0] = {}
  $scope.oem_data = {}
  $scope.bid_data = {is_bid: false, acknowledgement: false}
  if($scope.populateData){
    $scope.brandName.value = $scope.populateData.brandName
    $scope.brand_type.value = $scope.populateData.brand_type
    $scope.assessmentExclusiveBasedOnTurnover = $scope.populateData.assessment_exclusive_based_on_turnover
    $scope.populateData.links.forEach(function(link,index){
      $scope.entered_links[index] = {'link': link}
    })
    $scope.populateData.documents.forEach(function(doc,index){
      $scope.brand_file[index] = {'type': doc.type, 'doc_url': doc.url, 'status': doc.status, 'ui_status': doc.ui_status}
      $scope.selected_file_types.push(doc.type)
    })
    if($scope.populateData.bid_number){
      $scope.bid_data.is_bid = true
      $scope.bid_data.bid_number = $scope.populateData.bid_number
    }
    if($scope.populateData.oem_data){
      $scope.oem_data = $scope.populateData.oem_data
    }else{
      $scope.oem_data.apply_as_oem = 'false'
    }
  }
  $scope.isUnbranded = function(){
    return ($scope.brand_type.value == "Unbranded")
  }
  $scope.isUnregistered = function(){
    return ($scope.brand_type.value == "UnregisteredBrand")
  }
  $scope.isRegistered = function(){
    return ($scope.brand_type.value == "RegisteredBrand")
  }
  $scope.set_oem_data = function(){
    $scope.selected_file_types = []
    $scope.brand_file = []
    $scope.oem_data.apply_as_oem = 'true';
    $scope.constant_file_types = ["Govt. order copy","Other documentary evidence"]
    if($scope.isRegistered()){
      $scope.selected_file_types[0] = "Trademark certificate"
      $scope.brand_file[0] = {"type": "Trademark certificate"}
    }else{ 
      $scope.onlyOem = false
      $scope.brand_selection_type = "new_brand"
      $scope.selected_file_types[0] = $scope.brand_file_types[$scope.brand_type.value][$scope.request_type()]['0']
      $scope.brand_file[0] = {"type": $scope.selected_file_types[0]}
    }
  }

  $scope.get_display_file_types = function(index){
    if(!_.isEmpty($scope.brand_file_types)){
      $scope.display_file_types = _.difference($scope.brand_file_types[$scope.brand_type.value][$scope.request_type()], $scope.selected_file_types)
      $scope.display_file_types = _.concat($scope.display_file_types, $scope.constant_file_types)
      if($scope.selected_file_types[index])
        $scope.display_file_types.push($scope.selected_file_types[index])
      return _.uniq($scope.display_file_types)
    }
  }

  $scope.hide_brand_popup = function(){
    $scope.showBrand = false
  }

  $scope.file_upload = function(file,num){
    if([0,1,2,3,4].includes(num)){
      $scope.brand_file[num].value = file
    }
  }

  $scope.add_to_selected = function(index){
    $scope.brand_file[index]= {"type":""}
    if([0,1,2,3,4].includes(index) && $scope.selected_file_types[index]){
      $scope.brand_file[index].type = $scope.selected_file_types[index]
    }
    else if(!$scope.selected_file_types[index]){
      $scope.brand_file.splice(index,1)
      $scope.brand_file[index]= {"type":""}
    }
  }

  $scope.remove_field = function(num){
    $scope.brand_file.splice(num,1)
    $scope.selected_file_types.splice(num,1)
    if (num == 0){
      if($scope.oem_data.apply_as_oem == 'true'){
        if($scope.isRegistered()){
          $scope.brand_file.unshift({"type":"Trademark certificate"})
          $scope.selected_file_types.unshift("Trademark certificate")
        }
        else if($scope.isUnregistered()){
          $scope.brand_file.unshift({"type": "Undertaking Document"})
          $scope.selected_file_types.unshift("Undertaking Document")
        }
        else{
          if ($scope.brand_file.length == 0){
            $scope.brand_file.unshift({"type":""})
            $scope.selected_file_types.unshift("")
          }
        }
      }
    }
  }

  $scope.file_type_presence = function(num){
    return ($scope.brand_file[num] && $scope.brand_file[num].type)
  }

  $scope.file_presence = function(num){
    return ($scope.brand_file[num] && ($scope.brand_file[num].value || $scope.brand_file[num].doc_url))
  }

  $scope.disable_dropdown = function(num){
    if($scope.file_presence(num) || (num > 0 && !$scope.file_presence(num-1)) || (num == 0 && $scope.oem_data.apply_as_oem == 'true' && !$scope.isUnbranded()))
      return true;
  }

  $scope.disable_file_input = function(num){
    return (!$scope.file_type_presence(num) || $scope.file_presence(num))
  }

  $scope.add_links = function(num){
    if([0,1,2].includes(num))
      $scope.entered_links[num] = {}
  }

  $scope.remove_links = function(num){
    $scope.entered_links.splice(num,1)
  }

  $scope.disable_add_links = function(num){
    if($scope.entered_links[num+1])
      return true
  }

  $scope.validate_file_inputs = function(){
    var valid = true;
    if($scope.isUnbranded() && !$scope.assessmentExclusiveBasedOnTurnover && !$scope.file_presence(0)){
      return valid 
    }
    if(!$scope.file_presence(0)){
      notificationService.error('First file is mandatory')
      valid = false;
    }
    $scope.brand_file.forEach(function(brand_file,index){
      if(brand_file.type && !(brand_file.value || brand_file.doc_url)){
        notificationService.error('Upload file for Doc '+ (index+1))
        valid = false;
      }
      else if(brand_file.type && !brand_file.doc_url && brand_file.value.size > 2097152){
        notificationService.error("File size should be less than 2MB for Doc " + (index+1))
        valid = false;
      }
    })
    return valid;
  }

  $scope.validate_links = function(){
    var link_valid = true;
    var url_pattern = /^(http[s]?:\/\/){0,1}(www\.){0,1}[a-zA-Z0-9\.\-]+\.[a-zA-Z]{2,5}[\.]{0,1}/;
    if(!$scope.entered_links[0].link){
      notificationService.error('First Link is mandatory')
      link_valid = false
      return link_valid;
    }
    if($scope.entered_links.length > 3){
      notificationService.error('Only upto 3 Link allowed')
      link_valid = false
    }
    $scope.entered_links.forEach(function(entered_link,index){  
      var link = entered_link.link;
      if(link != "" && link != undefined && url_pattern.test(link)) {
        if (link.indexOf("https") != 0) {
          link = "https://" + link;
        }
        entered_link.link = link
      }else{
        if(link != "NA"){
          notificationService.error('Please enter the correct brand Link for Link ' + (index+1))
          link_valid = false
        }
      }
    })
    return link_valid;
  }

  $scope.validate_bid_data = function(){
    var bid_valid = true
    if(!$scope.bid_data.is_bid)
      delete $scope.bid_data.bid_number
    if($scope.bid_data.is_bid && !$scope.bid_data.acknowledgement){
      notificationService.error('Please acknowledge if you are opting for brand approval prioritization for bid')
      bid_valid = false
    }
    if($scope.bid_data.is_bid && !$scope.bid_data.bid_number){
      notificationService.error('Please enter bid number')
      bid_valid = false
    }
    return bid_valid;
  }

  $scope.validate_brand_params = function(){
    if(!$scope.brandName.value){
      notificationService.error('Enter Valid Brand!')
      return false
    }
    links_validity = $scope.validate_links()
    bid_data_validity = $scope.validate_bid_data()
    files_validity = $scope.validate_file_inputs()
    return ($scope.brandName.value && links_validity && files_validity && bid_data_validity)
  }

  $scope.showRequestSubmissionConfirmModal = function(){
    confirmModal.show({
      hideCloseButton: true,
      actionButtonText: 'OK',
      headerText: 'Success',
      bodyText: 'Your request has been submitted. The normal processing time is 7 working days. During this time the approval team may ask for more info on your request - you will receive these updates on email as well as on your seller dashboard.',
      bodyInput: {}
    })
  }

  $scope.perform_validations = function(){
    if ($scope.oem_data.apply_as_oem == 'true' && $scope.onlyOem != true){
      return $scope.validate_oem_data($scope.brand_file,$scope.oem_data) && $scope.validate_brand_params()
    } else if ($scope.onlyOem == true){
      return $scope.validate_oem_data($scope.brand_file,$scope.oem_data)
    } else {
      return $scope.validate_brand_params()
    }
  }

  $scope.addBrand = function(){
    if($scope.perform_validations()){
      params = {namespace: "brand", category_id: $scope.categoryId, value: $scope.brandName.value, link_hash: $scope.entered_links, file_hash: $scope.brand_file, bid_number: $scope.bid_data.bid_number, request_type: $scope.request_type(), oem_data: $scope.oem_data, brand_type: $scope.brand_type.value}
      return Upload.upload({
        url: "/api/v1/cat/catalog/create_brand_request.json",
        data: params
      }).then(function(response){
        if(response.data.meta.result == 'success'){
          $scope.showBrand = false
          $scope.showRequestSubmissionConfirmModal()
          $rootScope.$broadcast('BrandAddedRedirection');
        }
        else{
          confirmModal.show({headerText: 'Error', bodyText: response.data.meta.message, hideCloseButton: true})
        }
      },function(response){
          if(response && response.status == 302 )
            window.location.href = response.data.redirect_url
      })
    }
  }

  $scope.updateBrand = function(){
    if($scope.perform_validations()){
      params = {request_id: $scope.populateData.requestId, link_hash: $scope.entered_links, file_hash: $scope.brand_file, bid_number: $scope.bid_data.bid_number, oem_data: $scope.oem_data}
      return Upload.upload({
        url: "/api/v1/cat/catalog/update_brand_request.json",
        data: params
      }).then(function(response){
        if(response.data.meta.result == 'success'){
          $scope.showBrand = false
          $scope.showRequestSubmissionConfirmModal()
          $rootScope.$broadcast('BrandAddedRedirection');
        }
        else{
          confirmModal.show({headerText: 'Error', bodyText: response.data.meta.message, hideCloseButton: true})
        }
      },function(response){
          if(response && response.status == 302 )
            window.location.href = response.data.redirect_url
      })
    }
  }

  $scope.request_type = function(){
    var oemRequest = $scope.oem_data.apply_as_oem == 'true'
    var brandRequest = $scope.onlyOem != true
    if (brandRequest && oemRequest){
      return $scope.brand_type.value + 'OemRequest'
    } else if (oemRequest){
      return "OemRequest"
    } else {
      return "BrandRequest"
    }
  }

  $scope.brand_type_template = function(){
    return $scope.brand_type.value || "RegisteredBrand"
  }

  $scope.request_template_url = function(){
    return '/javascripts/angular_components/templates/'+_.snakeCase($scope.request_type())+'.html'
  }

  $scope.brand_type_template_url = function(){
    return '/javascripts/angular_components/templates/'+_.snakeCase($scope.brand_type_template())+'.html'
  }
  $scope.init_request_data = function(browse_node_id){
    gemUserRA.all('category_brand_requests').customGET('new',{browse_node_id: browse_node_id}).then(function(response){
      if(response.meta.result == 'success'){
        $scope.approved_brands_with_oem = response.data.brands_with_oem
        $scope.approved_brands = (response.data.approved_brands.sort())
        $scope.approved_brands.unshift("Existing Brands")
        $scope.brand_file_types = response.data.document_types
        $scope.seller_details = response.data.seller_details
        $scope.brand_types = response.data.brand_types
        $scope.allowed_brand_type_requests = response.data.allowed_brand_type_requests
        $scope.categorySellingAsOemConfig = response.data.category_selling_as_oem_config
        $scope.current_site_id = response.data.current_site
        $scope.disable_apply_for_brand_only = response.data.disable_apply_for_brand_only
      } else {
        notificationService.error(response.meta.message)
        $scope.showBrand = false
      }
    })
  }
  if($scope.onlyOem && !$scope.populateData){
    $scope.oem_data.apply_as_oem = 'true'
    $scope.brandName_disabled = true
    $scope.show_request_options = true
    $scope.set_oem_data()
  }
  $scope.applyAsOem = function(){
    if ($scope.oem_data.apply_as_oem != 'true'){
      $scope.selected_file_types = []
      $scope.brand_file = [{"type":""}]
      $scope.oem_data = {}
      $scope.oem_data.apply_as_oem = 'false'
      $scope.onlyOem = false
    }else {
      $scope.set_oem_data()
    }
  }

  $scope.ngInitOemData = function(){
    if($scope.disable_apply_for_brand_only){
      $scope.oem_data.apply_as_oem = "true"
      $scope.applyAsOem()
    }
  }

  $scope.onEnter = function($select,$event){
    if($event.which == 9 || $event.which == 13){
      $select.selected = $select.search
      $scope.findType($select.search)
    }
  }
  $scope.refreshModel = function($select,allowNew,isOpen){
    if(!isOpen && (!$select.selected || $select.search != $select.selected)){
      $select.selected = $select.search
      if($select.search){
        $scope.findType($select.search)
      }else{
        $scope.brand_selection_type = undefined
      }
    }
  }
  $scope.findType = function(brand){
    if ($scope.found_brand = _.find($scope.approved_brands_with_oem, {'brand': brand,'dashboard': true})){
      confirmModal.show({headerText: 'Note', bodyText: 'Brand and OEM already exists. Please use different brand', hideCloseButton: true})
      $scope.brand_selection_type = "oem_exist"
    }else if($scope.approved_brands.indexOf(brand) != -1){
      $scope.onlyOem = true
      $scope.set_oem_data()
      notificationService.success('Brand Already Present')
      $scope.brand_selection_type = "only_oem"
    }else{
      $scope.onlyOem = false
      $scope.brand_selection_type = "new_brand"
    }
  }
  $scope.onSelect = function($select){
    $select.search = $select.selected
    $scope.findType($select.search)
  }
  $scope.showConfirmSelection =function(){
    $scope.show_confirm_selection = true
    $scope.brandName_disabled = true
  }

  $scope.showRequestOptions = function(){
    $scope.show_request_options = true
    $scope.show_confirm_selection = false
  }

  $scope.sellerInOemWhitelist = function(){
    return ($scope.categorySellingAsOemConfig.all_sellers != false || _.includes(_.map($scope.categorySellingAsOemConfig.sellers,'site_id'),_.toString($scope.current_site_id)))
  }

  $scope.showProceedOnNewRequest = function(){
    if($scope.brand_selection_type == 'oem_exist'){
      return false;
    }else if($scope.brand_selection_type == 'only_oem'){
      return $scope.eligibleToBeOem && $scope.sellerInOemWhitelist();
    }else if($scope.brand_selection_type){
      return true
    }else{
      return false
    }
  }

  $scope.open_oem_docs_guidelines_modal = function(){
    $uibModal.open({
      size: 'lg oem_undertaking_modal',
      templateUrl: "/javascripts/angular_components/templates/oem_docs_guidelines_modal.html",
      controller: function($scope, $uibModalInstance){
        $scope.cancel = function() {
          $uibModalInstance.close();
        };
      }
    })
  }

  $scope.open_oem_undertaking_modal = function(){
    $uibModal.open({
      size: 'lg oem_undertaking_modal',
      templateUrl: "/javascripts/angular_components/templates/oem_undertaking_modal.html",
      controller: function($scope, $uibModalInstance){
        $scope.cancel = function() {
          $uibModalInstance.close();
        };
      }
    })
  }
  $scope.open_alert_unbranded_modal = function(){
    $uibModal.open({
      size: 'lg open_alert_unbranded_modal',
      templateUrl: "/javascripts/angular_components/templates/alert_unbranded_modal.html",
      controller: function($scope, $uibModalInstance){
        $scope.cancel = function() {
          $uibModalInstance.close();
        };
      }
    })
  }
  
  $scope.validate_oem_data = function(brandFile, oem_data){
    if (oem_data.apply_as_oem){
      var oem_doc_validation = true
      var oem_data_validation = true
      if($scope.isRegistered()){
        oem_doc_validation = _.some( brandFile ,function(file){ return (file.type == "Trademark certificate" && (file.value || file.doc_url))})
        if (!oem_doc_validation) {
          notificationService.error('Trademark certificate mandatory for OEM Request')
        }
        else if(oem_data.trademark_certificate_declaration != "true"){
          oem_data_validation = false
          notificationService.error('Please accept that you have trademark certificate for applicable category class')
        }
      }else if($scope.isUnregistered()){
        oem_doc_validation = _.some( brandFile ,function(file){ return (file.type == "Undertaking Document" && (file.value || file.doc_url))})
        if (!oem_doc_validation) {
          notificationService.error('Undertaking Document mandatory for Unregistered Brand OEM Request')
        }
      }
      if(!$scope.isRegistered() && $scope.assessmentExclusiveBasedOnTurnover){
        oem_doc_validation = _.some( brandFile, function(file){ return ((file.type == "Govt. order copy" || file.type == "Other documentary evidence") && (file.value || file.doc_url))})
        if (!oem_doc_validation){
          notificationService.error('Govt. order copy / Other documentary evidence mandatory for sellers exempted based on turnovers')
        }
      }
      if(!oem_data.declaration){
        oem_data_validation = false
        notificationService.error('Accept Terms and Please click on the Undertaking link to read the OEM Undertaking')
      }

      return oem_doc_validation && oem_data_validation
    } else {
      return true
    }
  }
  $scope.add_more_docs = function(){
    if($scope.brand_file.length < 5){
      $scope.brand_file.push({"type":""})
    }
  }
  $scope.brandTypeChange = function(){
    $scope.brandName.value = null
    $scope.brandName.confirm_disable = true
    if(!$scope.isRegistered()){
      if(!$scope.eligibleToBeOem){
        $scope.brand_type.value = null
        notificationService.error('Vendor assessments or exemptions not provided to request as OEM')
      }else{
        $scope.set_oem_data()
      }
    }
  }
  $scope.disableBrandSelection = function(){
    return ($scope.populateData && $scope.populateData.brandName) || $scope.brandName_disabled || $scope.show_request_options
  }
  $scope.disableBrandTypes = function(brand_type){
    $scope.can_request_for_brand_type = null
    if (brand_type.value != 'RegisteredBrand') {
      $scope.can_request_for_brand_type = $scope.allowed_brand_type_requests[brand_type.value]
    }
    return $scope.populateData || $scope.show_confirm_selection || $scope.show_request_options || $scope.can_request_for_brand_type
  }
  $scope.disableApplyAsOemSelection = function(){
    return $scope.isUnbranded() || $scope.isUnregistered()
  }
  $scope.disableRegisteredBrandOemRequest = function(){
    return $scope.allowed_brand_type_requests['RegisteredBrand']
  }
  $scope.disableUnregisteredBrandRequest = function(){
    return $scope.allowed_brand_type_requests['UnregisteredBrand']
  }
  $scope.disableUnbrandedRequest = function(){
    return $scope.allowed_brand_type_requests['Unbranded']
  }
}])
.directive('customUiSelect', function() {
  return {
    require: 'uiSelect',
    link: function(scope, element, attrs, $select) {
      scope.$watch('$select.search', function (search) {
        if (search) {
          scope.brandName.confirm_disable = false
        }else{
          scope.brandName.confirm_disable = true
        }
      });
    }
  };
})
angular.module('chained_bn_dir',['siteApp'])
.directive("chainedBn",function(){
  return{
    restrict: 'E',
    scope:{
      childBnId: '=',
      lastLevel: '=',
      selectedCategory: '=',
      searchedBn: '=',
      pickable: '=',
      siteSpecific: '=',
      userSpecific: '=',
      cacheRequest: '=?',
      cfetch: '=?',
      cfetchType: '=?',
      exemptNonSpecCategories: '=?',
      dontRedirect: '=?'
    },
   link: function(scope, element, attrs) {
          scope.$watch('searchedBn', function(newValue, oldValue) {
              if (newValue)
              {
                scope.update_bn_level_tab()
              }
          }, true);
      },
    controller: 'chainedBnCtrl',
    templateUrl: '/javascripts/angular_components/templates/chained_bn.html'
  }
})

// .service('chainedBnService',['catRA',function(catRA){
//   return catRA.all("browse_node_mapper").customGET('get_allowed_categories').then(function(response){
//     return response
//   })
// }])



.controller('chainedBnCtrl',['$scope','bnRA','$state',function($scope,bnRA,$state) {

  $scope.allowed_categories = {}
  $scope.selectedCategory = {}
  $scope.bn_disabled = {}
  $scope.restConfig = $scope.cacheRequest ? {cache: true} : {}
  $scope.bn_disabled[1] = false
  $scope.total_levels = [1,2,3,4]
  // cfetch is to fetch from varnish cache if possible
  params = {
    pickable: $scope.pickable,
    site_specific: $scope.siteSpecific,
    user_specific: $scope.userSpecific,
    cfetch: $scope.cfetch,
    cfetchType: $scope.cfetchType
  }

  bnRA.all("categories").withHttpConfig($scope.restConfig).customGET('get_allowed_categories',params).then(function(response){
    if(response.allowed_categories)
    {
      $scope.flatten_allowed_categories = response.allowed_categories
      if($scope.exemptNonSpecCategories == 'true'){
        var exemptionCategoriesList = response.ids_to_blacklist_from_search || ['home_univ_univ_univ_univ', 'home_boq_boql_boql_boq']
        $scope.filtered_flatten_allowed_categories = _.filter($scope.flatten_allowed_categories, function(cat){return !exemptionCategoriesList.includes(cat.browse_node_id)})
        $scope.flatten_allowed_categories = $scope.filtered_flatten_allowed_categories
      }
      $scope.allowed_categories = _.groupBy($scope.flatten_allowed_categories, "level");
      $scope.selectedCategory[0] = _.find($scope.allowed_categories[0],{browse_node_id: response.root_id})
      $scope.disable_bn_tab(1)
    }
  })

  $scope.enable_next_level = function (current_level) {

     $scope.disable_bn_tab(current_level)
     if($scope.selectedCategory[current_level])
     {
       $scope.childBnId = $scope.selectedCategory[current_level].browse_node_id
       $scope.lastLevel = current_level
       $scope.bn_disabled[current_level+1] = false
     }
     else{
      if(current_level > 1)
      {
        $scope.childBnId = $scope.selectedCategory[current_level-1].browse_node_id
        $scope.lastLevel = current_level - 1
      }
     }
  }


  $scope.disable_bn_tab = function(current_level){
    for(cl=current_level+1;cl<=$scope.total_levels.length;cl++)
      {
        $scope.selectedCategory[cl] = null
        $scope.bn_disabled[cl] = true
      }
  }


  $scope.update_bn_level_tab = function(){
    $scope.disable_bn_tab(1)
    searched_bn = _.find($scope.flatten_allowed_categories,{'browse_node_id' : $scope.searchedBn})
    if(searched_bn){
      $scope.lastLevel = searched_bn.level
      $scope.selectedCategory[$scope.lastLevel] = searched_bn
      $scope.childBnId = $scope.selectedCategory[$scope.lastLevel].browse_node_id

      for(l=$scope.lastLevel;l <= $scope.lastLevel && l > 1; l--)
      {
        $scope.bn_disabled[l] = false
        browse_node_id = $scope.selectedCategory[l].browse_node_id
        sub_string_index = browse_node_id.lastIndexOf('_');
        parent_bn_id = browse_node_id.substring(0,sub_string_index)
        $scope.selectedCategory[l-1] = _.find($scope.allowed_categories[l-1],{'browse_node_id': parent_bn_id })
      }

      if($scope.lastLevel < 4)
      {
        $scope.bn_disabled[$scope.lastLevel+1]=false
      }

      if($scope.lastLevel == 4 && $state.current.name != 'init'){
        if(!$scope.dontRedirect){
          $state.go('init',{bn_id: $scope.searchedBn})
        }
      }
      $scope.searchedBn = null
    }
    else{
      alert("Invalid category")
    }

  }

}])

angular.module('siteApp')
.directive('clickToEdit', ['$timeout',function($timeout) {
  return {
    require: 'ngModel',
    scope: {
      model: '=ngModel',
      type: '@type'
    },
    replace: true,
    transclude: false,
    template:
    '<div class="templateRoot">'+
    '<div class="hover-edit-trigger" title="click to edit">'+
    '<div class="hover-text-field" ng-show="!editState" ng-click="toggle()">{{model}}<div class="edit-pencil fa fa-pencil"></div></div>'+
    '<input class="inputText" type="text" ng-model="localModel" ng-enter="save()" ng-show="editState && type == \'inputText\'" />' +
    '</div>'+
    '<div class="edit-button-group pull-right" ng-show="editState">'+
    '<div class="fa fa-check"  ng-click="save()"></div> | '+
    '<div class="fa fa-times" ng-click="cancel()"></div>'+
    '</div>'+
    '</div>',
    link: function (scope, element, attrs) {
      scope.editState = false;
      scope.localModel = scope.model;
      scope.save = function(){
        scope.model = scope.localModel;
        scope.toggle();
      };
      scope.cancel = function(){
        scope.localModel = scope.model;
        scope.toggle();
      }
      scope.toggle = function () {
        scope.editState = !scope.editState;
        var x1 = element[0].querySelector("."+scope.type);
        $timeout(function(){
          scope.editState ? x1.focus() : x1.blur();
        }, 0);
      }
    }
  }
}])

.directive('ngEnter', [function () {
  return function (scope, element, attrs) {
    element.bind("keydown keypress", function (event) {
      if(event.which === 13) {
        scope.$apply(function (){
          scope.$eval(attrs.ngEnter);
        });
        event.preventDefault();
      }
    });
  };
}])

.directive('tagManager', ['$compile', function($compile) {
  return {
    restrict: 'E',
    scope: { tags: '='},
    template: function(elem,attr){
      var input = ''
      if(attr.inputType == "number"){
        input = '<input type="number" ng-number-only class="" placeholder="Add a tag..." ng-model="new_value"></input> '
      }else{
        input = '<input type="text" class="" placeholder="Add a tag..." ng-model="new_value"></input> '
      }
      var template = '<div class="tags">' +
        '<a ng-repeat="(idx, tag) in tags" class="tag">{{tag}} <fieldset class="fa fa-times" ng-click="remove(idx)" ng-disabled="isDisabled()"></fieldset></a>' +
        '</div>' + input
      return template;
    },
    link: function ( $scope, $element, $attr ) {
      var input = angular.element( $element.children()[1] );
      $scope.add = function() {
        if($scope.tags && (!_.isNil($scope.new_value) && (_.isNumber($scope.new_value) || !_.isEmpty($scope.new_value)))){
          var dtags = _.map($scope.tags,function(i){return _.toLower(i)})
          if(dtags.indexOf(_.toLower($scope.new_value)) == -1){
            $scope.tags.push( $scope.new_value );
            $scope.new_value = "";
          }
        }
      };

      $scope.remove = function ( idx ) {
        if($attr.isDisabled !== 'true'){
          $scope.tags.splice( idx, 1 );
        }
      };

      $scope.isDisabled = function(){
        return $attr.isDisabled === 'true'
      }

      input.bind( 'keypress', function ( event ) {
        if ( event.keyCode == 13 ) {
          $scope.$apply( $scope.add );
        }
      });
    }
  }
}])

.directive("formatDate", [function() {
    return {
        require: 'ngModel',
        link: function(scope, elem, attr, modelCtrl) {
            modelCtrl.$formatters.push(function(modelValue) {
                if (modelValue){
                    return new Date(modelValue);
                }
                else {
                    return null;
                }
            });
        }
    };
}])

.filter('csvToArray',function(){
  return function(input) {
     input = input || '';
     return input.split(',') 
  }
})


.filter('capitalize', function() {
  return function(input, scope) {
    if (input!=null){
      input = input.toLowerCase();
      return input.substring(0,1).toUpperCase()+input.substring(1);
    }else{
      return input;
    }
  }
})

.directive('noSpecialCharacterInputExceptSpace',[function() {
  return {
    restrict: 'ECA',
    require: 'ngModel',
    link: function(scope, element, attr, ngModelCtrl) {
      function fromUser(text) {
        if(text && text.length>0){
          var transformedInput = text.replace(/[^a-zA-Z0-9 ]/g, '');
          if (transformedInput !== text) {
            ngModelCtrl.$setViewValue(transformedInput);
            ngModelCtrl.$render();
          }
          return transformedInput;
        }
        else{
          return text;
        }
      }
      ngModelCtrl.$parsers.push(fromUser);
    }
  };
}])

.directive('noSpecialCharacterInput',[function() {
  return {
    restrict: 'ECA',
    require: 'ngModel',
    link: function(scope, element, attr, ngModelCtrl) {
      function fromUser(text) {
        if(text && text.length>0){
          var transformedInput = text.replace(/[^a-zA-Z0-9]/g, '');
          if (transformedInput !== text) {
            ngModelCtrl.$setViewValue(transformedInput);
            ngModelCtrl.$render();
          }
          return transformedInput;
        }
        else{
          return text;
        }
      }
      ngModelCtrl.$parsers.push(fromUser);
    }
  };
}])

// pass array of chars to be allowed in `except`
.directive('noSpecialCharacterInputWithExclusion',[function() {
  return {
    restrict: 'ECA',
    require: 'ngModel',
    scope: {
      except: '<?'
    },
    link: function(scope, element, attr, ngModelCtrl) {
      function fromUser(text) {
        if(text && text.length>0){
          const excludeAlphanumericAndSpace = "^a-zA-Z0-9 ";
          var excludeAdditional;
          if(scope.except && !_.isEmpty(scope.except))
            excludeAdditional = scope.except.join("");
          const regExp = new RegExp("[" + excludeAlphanumericAndSpace + excludeAdditional + "]", "g");

          var transformedInput = text.replace(regExp, '');
          if (transformedInput !== text) {
            ngModelCtrl.$setViewValue(transformedInput);
            ngModelCtrl.$render();
          }
          return transformedInput;
        }
        else{
          return text;
        }
      }
      ngModelCtrl.$parsers.push(fromUser);
    }
  };
}])

.directive('onlyLettersInput',[function() {
  return {
    restrict: 'ECA',
    require: 'ngModel',
    link: function(scope, element, attr, ngModelCtrl) {
      function fromUser(text) {
        var transformedInput = text.replace(/[^a-zA-Z]/g, '');
        if (transformedInput !== text) {
          ngModelCtrl.$setViewValue(transformedInput);
          ngModelCtrl.$render();
        }
        return transformedInput;
      }
      ngModelCtrl.$parsers.push(fromUser);
    }
  };
}])

.directive('onlyLettersInputWithSpace',[function() {
  return {
    restrict: 'ECA',
    require: 'ngModel',
    link: function(scope, element, attr, ngModelCtrl) {
      function fromUser(text) {
        var transformedInput = text.replace(/[^a-zA-Z\s]/g, '');
        if (transformedInput !== text) {
          ngModelCtrl.$setViewValue(transformedInput);
          ngModelCtrl.$render();
        }
        return transformedInput;
      }
      ngModelCtrl.$parsers.push(fromUser);
    }
  };
}])

.directive('onlyNumberInput',[function() {
  return{
    restrict: 'AEC',
    require: 'ngModel',
    link: function(scope, element, attr, ngModelCtrl) {
      function fromUser(text) {
        if(text && (text.length>0)){
          var transformedInput = text.replace(/[^0-9]/g, '');
          if (transformedInput !== text) {
            ngModelCtrl.$setViewValue(transformedInput);
            ngModelCtrl.$render();
          }
          return transformedInput;
        }else{
          return text;
        }
      }
      ngModelCtrl.$parsers.push(fromUser);
    }
  };
}])

.directive('inputNumberMaxlength', [function() {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function (scope, element, attrs, ngModelCtrl) {
      var maxlength = Number(attrs.inputNumberMaxlength);
      function fromUser(text) {
        //<input type="number" input-number-maxlength=10> pass flag like this
        if(text){
          text = text.toString()
            if (text.length > maxlength) {
             var transformedInput = text.substring(0, maxlength);
              ngModelCtrl.$setViewValue(transformedInput);
              ngModelCtrl.$render();
              return transformedInput;
            }
        }
        return text;
      }
      ngModelCtrl.$parsers.push(fromUser);
    }
  }; 
}])

.directive('decimalMaxlength', [function() {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function (scope, element, attrs, ngModelCtrl) {
      var decimalmaxlength = Number(attrs.decimalMaxlength);
      function fromUser(text) {
        //<input type="number" input-number-maxlength=10> pass flag like this
        if(text){
          numberSplit = text.toString().split(".")
          decimalText = numberSplit[1]
          if(decimalText && decimalText.length > decimalmaxlength){
            var transformedInput = numberSplit[0] + "." +decimalText.substring(0, decimalmaxlength);
            ngModelCtrl.$setViewValue(transformedInput);
            ngModelCtrl.$render();
            return transformedInput;
          }
        }
        return text;
      }
      ngModelCtrl.$parsers.push(fromUser);
    }
  };
}])

.directive('stringToNumber', [function() {
  return {
    require: 'ngModel',
    link: function(scope, element, attrs, ngModel) {
      ngModel.$parsers.push(function(value) {
        return '' + value;
      });
      ngModel.$formatters.push(function(value) {
        return parseFloat(value);
      });
    }
  };
}])

//convert to upper case
.directive('convertToUpperCase', [function() {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function(scope, element, attrs, modelCtrl) {
      modelCtrl.$parsers.push(function(input) {
        return input ? input.toUpperCase() : "";
      });
      element.css("text-transform","uppercase");
    }
  }
}])

.directive('ngConfirmClick', [
  function(){
    return {
      priority: -1,
      restrict: 'A',
      link: function(scope, element, attrs){
        element.bind('click', function(e){
          var message = attrs.ngConfirmClick;
          var no_popup = attrs.disableConfirm == "true" ? true : false
          var no_click = attrs.disableClick == "true" ? true : false
          if(no_click || !no_popup && message && !confirm(message)){
            e.stopImmediatePropagation();
            e.preventDefault();
          }
        });
      }
    }
  }
])

.directive('ngConfirmModal', [
  function(){
    return {
      restrict: 'A',
      scope: {
        'ngConfirmModalOk': '&',
        'ngConfirmModalCancel': '&',
        'ngConfirmModalTitle': '=',
        'ngConfirmModalBody': '=',
        'ngConfirmModalConfirmText': '@',
        'ngConfirmModalCancelText': '@'
      },
      link: function(scope, element, attrs){
        angular.element(element).unbind().bind('click', function(event){
          event.preventDefault();
          event.stopImmediatePropagation();
          scope.openConfirmModal(this)
          return false
        });
      },

      controller: ['$scope','$uibModal',function($parentScope,$modal,){

        $parentScope.openConfirmModal = function(){
          var modal = $modal.open({
            templateUrl: '/javascripts/angular_components/templates/ng_confirm_modal.html',
            controller: ['$scope','$uibModalInstance',function($scope,$uibModalInstance){
              $scope.asd = "asd"
              $scope.popupHeader = $parentScope.ngConfirmModalTitle || "Are you sure?"
              $scope.popupMsg = $parentScope.ngConfirmModalBody || "Do you want to continue?"
              $scope.okButtonText = $parentScope.ngConfirmModalConfirmText || "Ok"
              $scope.cancelButtonText = $parentScope.ngConfirmModalCancelText || "Cancel"
              $scope.ok = function() {
                $parentScope.ngConfirmModalOk()
                $uibModalInstance.close()
              };
              $scope.cancel = function() {
                $parentScope.ngConfirmModalCancel()
                $uibModalInstance.dismiss()
              };
            }]
          });
        }
      }]
    }
  }
  ])

.directive('goBack', ['$window',
  function($window){
    return {
      restrict: 'E',
      template: '<button class="btn btn-sm btn-default clearfix"><span class="glyphicon glyphicon-arrow-left"></span>&nbsp;<span translate="$a$.g.go_back.back.text">Back</span></button>',
      link: function(scope, element, attrs){
        element.bind('click', function(e){
          if($window.history && $window.history.back){
            $window.history.back();
          }
        });
      }
    }
  }
])

.directive('ngNumberOnly',[
  function(){
    return {
      priority: -1,
      restrict: 'A',
      scope: {
        onlyInt: '=',
        isNonNegative: '=',
        disableExponent: '=?'
      },
      link: function(scope, element, attrs){
        element.bind('keydown', function(e){
          var keyCode = (e.keyCode ? e.keyCode : e.which);
          var allowedKeyCodes=[]
          if(e.ctrlKey || e.shiftKey){
            if(e.ctrlKey)
              allowedKeyCodes = [65,90,82]
            if(e.shiftKey){
              if (scope.disableExponent != true){
                allowedKeyCodes = [61,187,9]
              }else{
                allowedKeyCodes = [9]
              }
            }
            if(e.shiftKey && e.ctrlKey)
              allowedKeyCodes = [82]
          }
          else{
            allowedKeyCodes = [8,46,96,97,98,99,100,101,102,103,104,105,48,49,50,51,52,53,54,55,56,57,9,109,190,18,37,38,39,40,144,13,189,187,173,187,110,35,36]
            if(scope.disableExponent != true){
              allowedKeyCodes.push(69,107)
            }
            if(scope.onlyInt){
              //<input type="number" ng-number-only only_int=true> pass flag like this
              allowedKeyCodes = _.difference(allowedKeyCodes,[190,110]) //not allowing dot
            }
            if (scope.isNonNegative) {
              //<input type="number" ng-number-only is_non_negative=true> pass flag like this
              if (e.keyCode === 109 || e.keyCode === 189 || e.keyCode === 173) {
                allowedKeyCodes = _.difference(allowedKeyCodes,[109,189,173]) // not allowing negative symbol
              }
            }
          }
          if(allowedKeyCodes.length > 0 && allowedKeyCodes.indexOf(keyCode) < 0){
            e.preventDefault()
          }
        });
      }
    }
  }
  ])

.directive('mask', [function() {
  return {
    restrict : 'A',
    transclude : true,
    scope:{
      mask : '=mask',
      reveal : '@reveal'
    },
    link: function(scope, element, attr) {
      scope.getMaskedValue = function(){
        var s="*";
        if(((!scope.mask) || (scope.mask.length==0)))
          return "";
        if((!scope.reveal)||(scope.reveal && (scope.mask.length<=scope.reveal)))
          scope.reveal=2;
        return s.repeat(scope.mask.length-scope.reveal)+scope.mask.slice(-scope.reveal);
      }
    },
    template : "{{getMaskedValue()}}<span ng-transclude></span>"
  }
}])

.directive('maskInput', [function() {
  return {
    restrict : 'A',
    require : 'ngModel',
    scope:{
      reveal : '@reveal'
    },
    link: function(scope, element, attr, ngModelCtrl) {
      ngModelCtrl.$parsers.push(function(value) {
        return '' + value;
      });
      ngModelCtrl.$formatters.push(function(value) {
        var s="*";
        if(((!value) || (value.length==0)))
          return value;
        if((!scope.reveal)||(scope.reveal && (value.length<=scope.reveal)))
          scope.reveal=2;
        return s.repeat(value.length-scope.reveal)+value.slice(-scope.reveal);
      });
    }
  }
}])

.directive("sticky", function($window) {
  return {
    link: function(scope, element, attrs) {

      var $win = angular.element($window);

      if (scope._stickyElements === undefined) {
        scope._stickyElements = [];

        $win.bind("scroll.sticky", function(e) {
          var pos = $win.scrollTop();
          for (var i=0; i<scope._stickyElements.length; i++) {

            var item = scope._stickyElements[i];

            if (!item.isStuck && pos > item.start) {
              item.element.addClass("stuck");
              item.isStuck = true;

              if (item.placeholder) {
                item.placeholder = angular.element("<div></div>")
                    .css({height: item.element.outerHeight() + "px"})
                    .insertBefore(item.element);
              }
            }
            else if (item.isStuck && pos < item.start) {
              item.element.removeClass("stuck");
              item.isStuck = false;

              if (item.placeholder) {
                item.placeholder.remove();
                item.placeholder = true;
              }
            }
          }
        });

        var recheckPositions = function() {
          for (var i=0; i<scope._stickyElements.length; i++) {
            var item = scope._stickyElements[i];
            if (!item.isStuck) {
              item.start = item.element.offset().top;
            } else if (item.placeholder) {
              item.start = item.placeholder.offset().top;
            }
          }
        };
        $win.bind("load", recheckPositions);
        $win.bind("resize", recheckPositions);
      }

      var item = {
        element: element,
        isStuck: false,
        placeholder: attrs.usePlaceholder !== undefined,
        start: element.offset().top
      };

      scope._stickyElements.push(item);

    }
  };
})

.filter('words', function() {
  function isInteger(x) {
    return x % 1 === 0;
  }
  function toWords(s)
  {
    var th = ['','thousand','million', 'billion','trillion'];
    var dg = ['zero','one','two','three','four', 'five','six','seven','eight','nine'];
    var tn = ['ten','eleven','twelve','thirteen', 'fourteen','fifteen','sixteen', 'seventeen','eighteen','nineteen'];
    var tw = ['twenty','thirty','forty','fifty', 'sixty','seventy','eighty','ninety'];
    s = s.toString();
    s = s.replace(/[\, ]/g,'');
    if (s != parseFloat(s)) return 'not a number';
    var x = s.indexOf('.');
    if (x == -1) x = s.length; 
    if (x > 15) return 'too big';
    var n = s.split('');
    var str = '';
    var sk = 0;
    for (var i=0; i < x; i++)
    {
      if ((x-i)%3==2)
      {
        if (n[i] == '1')
        {
          str += tn[Number(n[i+1])] + ' ';
          i++;
          sk=1;
        }
        else if (n[i]!=0)
        {
          str += tw[n[i]-2] + ' ';
          sk=1;
        }
      }
      else if (n[i]!=0)
      {
        str += dg[n[i]] +' ';
        if ((x-i)%3==0) str += 'hundred ';
        sk=1;
      }

      if ((x-i)%3==1)
      {
        if (sk) str += th[(x-i-1)/3] + ' ';
        sk=0;
      }
    }
    if (x != s.length)
    {
        var y = s.length;
        str += 'point ';
        for (var i=x+1; i<y; i++) str += dg[n[i]] +' ';
    }
    return str.replace(/\s+/g,' ');
  }
  function convertNumberToWords(amount) {
    var words = new Array();
    words[0] = '';
    words[1] = 'One';
    words[2] = 'Two';
    words[3] = 'Three';
    words[4] = 'Four';
    words[5] = 'Five';
    words[6] = 'Six';
    words[7] = 'Seven';
    words[8] = 'Eight';
    words[9] = 'Nine';
    words[10] = 'Ten';
    words[11] = 'Eleven';
    words[12] = 'Twelve';
    words[13] = 'Thirteen';
    words[14] = 'Fourteen';
    words[15] = 'Fifteen';
    words[16] = 'Sixteen';
    words[17] = 'Seventeen';
    words[18] = 'Eighteen';
    words[19] = 'Nineteen';
    words[20] = 'Twenty';
    words[30] = 'Thirty';
    words[40] = 'Forty';
    words[50] = 'Fifty';
    words[60] = 'Sixty';
    words[70] = 'Seventy';
    words[80] = 'Eighty';
    words[90] = 'Ninety';
    amount = amount.toString();
    var atemp = amount.split(".");
    var number = atemp[0].split(",").join("");
    var n_length = number.length;
    var words_string = "";
    if (n_length <= 9) {
        var n_array = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0);
        var received_n_array = new Array();
        for (var i = 0; i < n_length; i++) {
            received_n_array[i] = number.substr(i, 1);
        }
        for (var i = 9 - n_length, j = 0; i < 9; i++, j++) {
            n_array[i] = received_n_array[j];
        }
        for (var i = 0, j = 1; i < 9; i++, j++) {
            if (i == 0 || i == 2 || i == 4 || i == 7) {
                if (n_array[i] == 1) {
                    n_array[j] = 10 + parseInt(n_array[j]);
                    n_array[i] = 0;
                }
            }
        }
        value = "";
        for (var i = 0; i < 9; i++) {
            if (i == 0 || i == 2 || i == 4 || i == 7) {
                value = n_array[i] * 10;
            } else {
                value = n_array[i];
            }
            if (value != 0) {
                words_string += words[value] + " ";
            }
            if ((i == 1 && value != 0) || (i == 0 && value != 0 && n_array[i + 1] == 0)) {
                words_string += "Crores ";
            }
            if ((i == 3 && value != 0) || (i == 2 && value != 0 && n_array[i + 1] == 0)) {
                words_string += "Lakhs ";
            }
            if ((i == 5 && value != 0) || (i == 4 && value != 0 && n_array[i + 1] == 0)) {
                words_string += "Thousand ";
            }
            if (i == 6 && value != 0 && (n_array[i + 1] != 0 && n_array[i + 2] != 0)) {
                words_string += "Hundred and ";
            } else if (i == 6 && value != 0) {
                words_string += "Hundred ";
            }
        }
        words_string = words_string.split("  ").join(" ");
    }
    return words_string;
  }
  function convertNumToWordIndian(Num=0){
    var Table_0_19 = ["","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"],
    Table_20_90= ["","","Twenty","Thirty","Forty","Fifty","Sixty","Seventy","Eighty","Ninety"],
    Table_Scale= ["","Thousand","Lakh","Crore"];

    if (Num===0) return "Zero";
    let NumWords="";
    Num = ("0".repeat(6*(Num+="").length % 7) +Num).match(/.{7}/g); // Create Siptlets Array
    return Num.forEach((Siptlet, ScalePos) => {               // Return Commmon-Use Numbering System text
      let [Scale,SWords] = [(Table_Scale[3]+" ").repeat(Num.length-ScalePos-1).trimRight(), Siptlets(Siptlet)];
      NumWords +=(NumWords && SWords ? ", " : "") +SWords +(Scale ? " " : "") +Scale;
    }), NumWords;
    function Siptlets(Num, NumWords="") {                 // Core function (Called for both Systems)
      (Num+="").length-3 & 1 && (Num="0"+Num);
      Num = Num> 999 ? [...Num.slice(0,-3).match(/.{2}/g).map(e => "0"+e),(Num.slice(-3))]:[("00"+Num).substr(-3)];
      return Num.forEach((Duplet,ScalePos) => {if (+Duplet) {
      let [Hyphen,Hundreds,Tens,Scale] = [+Duplet[2] ? "-" : "",+Duplet[0],+Duplet.substr(1),Table_Scale[Num.length-ScalePos-1]];
      NumWords  += (NumWords          ? " " : "") + (Hundreds ? Table_0_19[Hundreds] + " Hundred" :"") +
                   (Hundreds && Tens  ? " " : "") + (Tens< 20 ? Table_0_19[Tens] :
                   Table_20_90[+(Duplet[1])]      + Hyphen    + Table_0_19[+Duplet[2]]);
      NumWords  += (NumWords && Scale ? " " : "") + Scale;
      }}), NumWords;
    }
  }
  return function(value) {
    if (value && isInteger(value))
     return convertNumToWordIndian(value);
    return value;
  };

})
.directive('customGrid', ['uiGridConstants','notificationService',function(uiGridConstants,$notify) {
  return{
    restrict: 'E',
    scope:{
      externalPaging: '=',
      cols: '=',
      getData: '=',
      batchEvent: '=',
      externalEvents: '=',
      showFooter: '=',
      filtering: '=',
      gridclass: '@',
      rowHeight: '@',
      fullRowSelection: '=',
    },
    controller: function($scope) {
      var paginationOptions = {
        pageNumber: 1,
        pageSize: 10
      }

      $scope.selectedRows = []

      $scope.gridOptions = {
        paginationPageSizes: [10, 20, 50],
        paginationPageSize: $scope.pageSize || 10,
        enableSorting: $scope.sorting || false,
        enableRowSelection: false,
        enableFullRowSelection: $scope.fullRowSelection || false,
        enableSelectionBatchEvent: $scope.batchEvent || false,
        enableFiltering: $scope.filtering || false,
        useExternalPagination: $scope.externalPaging || false,
        columnDefs: $scope.cols,
        rowHeight: $scope.rowHeight || '',
        showGridFooter: $scope.showFooter || false,
        onRegisterApi: function(gridApi) {
          $scope.gridApi = gridApi
          gridApi.pagination.on.paginationChanged($scope, function (newPage, pageSize) {
            paginationOptions.pageNumber = newPage;
            paginationOptions.pageSize = pageSize;
            $scope.getPage()
          })
          gridApi.cellNav.on.navigate($scope,function(newRowcol, oldRowCol){
            var callback = newRowcol.col.colDef.cellCallback
            if(callback) callback(newRowcol)
          })
          gridApi.selection.on.rowSelectionChanged($scope,function(row){
            $scope.selectedRows = gridApi.selection.getSelectedRows()
          })
          gridApi.core.on.filterChanged($scope, function(){
            // getFilters()
            $scope.getPage(true)
          })
        }
      }

      var getFilters = function(){
      	$scope.filters = _.filter($scope.cols,function(col){
          if(col.filter){
            var selectOptions = $scope.gridOptions.filters[col.field].select_options
            if(!col.filter.selectOptions.length) col.filter.selectOptions = selectOptions
            if(!col.filter.term && selectOptions.length) col.filter.term = selectOptions[0].value
            return {field:col.field, filter:col.filter.term}
          }
        })
      }

      $scope.getPage = function(onFilterChange){
        column_filters = $scope.getColumnFilters()
        $scope.getData(paginationOptions.pageNumber,paginationOptions.pageSize,column_filters,onFilterChange).then(function(res){
          // var firstRow = (paginationOptions.pageNumber - 1) * paginationOptions.pageSize
          // $scope.gridOptions.data = res.data.slice(firstRow, firstRow + paginationOptions.pageSize)
          $scope.gridOptions.data = res.data
          $scope.gridOptions.totalItems = res.total_items
          $scope.gridOptions.filters = res.filters
          if(res.show_last_seller_authorization){
            if(_.chain($scope.cols).filter(function(f){return f.field == 'last_seller_authorization'}).size().value() == 0)
            $scope.cols.push({field:'last_seller_authorization',displayName:'Authorization Code', enableFiltering: false})
          }
          // $scope.gridApi.core.refresh()
          // $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.ALL)
          if($scope.gridApi) $scope.gridApi.selection.clearSelectedRows()
          $scope.selectedRows=[]
          getFilters()
        })
      }

      $scope.performAction = function(event){
        event.action($scope.selectedRows).then(function(response){
          msg = "Successfully Done"          
          try {
            msg = response.msg
          }
          catch(error){
          }
          $notify.success(msg)
          $scope.getPage()
        })
      }

      $scope.showButton = function(event){
        if(!_.has(event,'condition')) return true
        else{
          var allowed_events = {}
          if($scope.gridOptions.filters)
            allowed_events = $scope.gridOptions.filters.status.events
          return event.condition($scope.filters,allowed_events,event.value)
        }
      }

      $scope.getColumnFilters = function () {
        init_filters = {}
        _.forEach($scope.cols, function(value) {
          if(value.hasOwnProperty('filter') && value.filter.term)
            init_filters[value.field] = value.filter.term
        });
        return init_filters
      }

      $scope.getPage()
    },
    template: '<div class="{{gridclass}}"><div ui-grid="gridOptions" ui-grid-pagination ui-grid-selection ui-grid-cellnav class="grid"></div><span ng-repeat="event in externalEvents" class="external-events"><button type="button" class="btn {{event.css || \'btn-primary\'}}" ng-click="performAction(event)" ng-disabled="selectedRows.length==0" ng-if="showButton(event)">{{event.label}}</button></span></div>'
  }
}])

.filter('currencyInWords', function() {
  function Rs(amount){
    var words = new Array();
    words[0] = 'Zero';words[1] = 'One';words[2] = 'Two';words[3] = 'Three';words[4] = 'Four';words[5] = 'Five';words[6] = 'Six';words[7] = 'Seven';words[8] = 'Eight';words[9] = 'Nine';words[10] = 'Ten';words[11] = 'Eleven';words[12] = 'Twelve';words[13] = 'Thirteen';words[14] = 'Fourteen';words[15] = 'Fifteen';words[16] = 'Sixteen';words[17] = 'Seventeen';words[18] = 'Eighteen';words[19] = 'Nineteen';words[20] = 'Twenty';words[30] = 'Thirty';words[40] = 'Forty';words[50] = 'Fifty';words[60] = 'Sixty';words[70] = 'Seventy';words[80] = 'Eighty';words[90] = 'Ninety';var op;
    amount = amount.toString();
    var atemp = amount.split(".");
    var number = atemp[0].split(",").join("");
    var n_length = number.length;
    var words_string = ""; 
    if(n_length > 7){
      crore_val = number.substr(0,number.length -7)
      if(crore_val.length > 1){
        words_string += (Rs(crore_val) + " Crores ")
      }
      else{
        words_string +=  (crore_val + " Crores ")
      }
    }
    var n_array = new Array(0, 0, 0, 0, 0, 0, 0);
    var received_n_array = new Array();
    for (var i = 0; i < n_length; i++){
    received_n_array[i] = number.substr(i, 1);}
    for (var i = 7 - n_length, j = 0; i < 7; i++, j++){
    n_array[i] = received_n_array[j];}
    for (var i = 0, j = 1; i < 7; i++, j++){
    if(i == 0 || i == 2 || i == 5 ){
    if(n_array[i] == 1){
    n_array[j] = 10 + parseInt(n_array[j]);
    n_array[i] = 0;}}}
    value = "";
    for (var i = 0; i < 7; i++){
    if(i == 0 || i == 2 || i == 5){
    value = n_array[i] * 10;} else {
    value = n_array[i];}
    if(value != 0){
    words_string += words[value] + " ";}
    if((i == 1 && value != 0) || (i == 0 && value != 0 && n_array[i + 1] == 0)){
    words_string += "Lakhs ";}
    if((i == 3 && value != 0) || (i == 2 && value != 0 && n_array[i + 1] == 0)){
    words_string += "Thousand ";}
    if(i == 4 && value != 0 && (n_array[i + 1] != 0 && n_array[i + 2] != 0)){
    words_string += "Hundred and ";} else if(i == 4 && value != 0){
    words_string += "Hundred ";}}
    words_string = words_string.split(" ").join(" ");
    return words_string;
  }

  function RsPaise(n){
    nums = n.toString().split('.')
    if(nums[0].length > 16)
      return "Number too big"
    var whole = Rs(nums[0])
    if(whole=='nil') return "";
    if(nums[1]==null)nums[1]=0;
    if(nums[1].length == 1 )nums[1]=nums[1]+'0';
    if(nums[1].length> 2){nums[1]=nums[1].substring(2,length - 1)}
    if(nums.length == 2){
    if(nums[0]<=9){nums[0]=nums[0]*10} else {nums[0]=nums[0]};
    var fraction = Rs(nums[1])
    if(whole=='' && fraction==''){op= 'Zero only';}
    if(whole=='' && fraction!=''){op= 'paise ' + fraction + ' only';}
    if(whole!='' && fraction==''){op='Rupees ' + whole + ' only';}
    if(whole!='' && fraction!=''){op='Rupees ' + whole + 'and paise ' + fraction + ' only';}
    return op;}
  }
  return function(str){
    if(!str) return "";
    str=""+str;
    amt=parseFloat(str);
    if(isNaN(amt) == true) return "";
    return RsPaise(Math.round(amt*100)/100)
  }
})

.filter('asIndianCurrency', function(){
  function formatCurrency(x){
    var beforePoint = ''
    if(x.indexOf('.')>0)
      beforePoint = x.substring(0,x.indexOf('.'))
    else
      beforePoint = x
    if(beforePoint.length>10)
      return x;
    var afterPoint = '';
    if(x.indexOf('.') > 0)
       afterPoint = x.substring(x.indexOf('.'),x.length);
    x = Math.floor(x);
    x=x.toString();
    var lastThree = x.substring(x.length-3);
    var otherNumbers = x.substring(0,x.length-3);
    if(otherNumbers != '')
        lastThree = ',' + lastThree;
    var res = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
    return res;
  }

  return function(str){
    if(!str && str != 0) return "";
    return "₹"+formatCurrency(""+str);
  }
})

.directive('movableElement', ['$document',function($document) {
  return {
    restrict: 'AC',
    link: function(scope, iElement, iAttrs) {
      var startX = 0, startY = 0, x = 0, y = 0;
      var dialogWrapper = iElement.parent();

      dialogWrapper.css({
          position: 'relative'
      });

      dialogWrapper.on('mousedown', function(event) {
          event.preventDefault();
          startX = event.pageX - x;
          startY = event.pageY - y;
          $document.on('mousemove', mousemove);
          $document.on('mouseup', mouseup);
      });

      function mousemove(event) {
          y = event.pageY - startY;
          x = event.pageX - startX;
          dialogWrapper.css({
              top: y + 'px',
              left: x + 'px'
          });
      }

      function mouseup() {
          $document.unbind('mousemove', mousemove);
          $document.unbind('mouseup', mouseup);
      }
    }
  }
}])

.directive('renderBrowseNode', ['debounceNetService', function(debounceNetService){
  return {
    restrict: 'E',
    scope: {
      browseNodeId: "="
    },
    templateUrl: "/javascripts/angular_components/templates/render_browse_node.html",
    controller: ['$scope', 'cachedPublicRA', function($scope, cachedPublicRA){
      $scope.loaded = false
      $scope.browseNode = {}
      // @TODO, make namespace implcit to debounce as f(remote)
      debounceNetService({
        namespace: 'browse_node.autocomplete.summary',
        remote: cachedPublicRA.one("categories"),
        waitTime: 800,
        action: function(remote){
          console.log("N/W called.", (new Date()).getMilliseconds())
          return remote
            .customGET("summary", {id: $scope.browseNodeId})
            .then(function(resp){
              if(resp && (resp.browse_node || resp.service)){
                $scope.loaded = true
                $scope.type = resp.browse_node ? 'product' : 'service'
                $scope.browseNode = resp.browse_node || resp.service
                $scope.browseNode.site_home_url = BAB.endpoints.app_url('site', $scope.browseNode.home_url || "")
              }
            })
        }
      })

    }]
  }
}])

.directive('onlyPrintableAsciiCharactersInput',[function() {
  return{
    restrict: 'AEC',
    require: 'ngModel',
    link: function(scope, element, attr, ngModelCtrl) {
      function fromUser(text) {
        if(text && (text.length>0)){
          var transformedInput = text.replace(/[^\x00-\x7F]/g, '');
          if (transformedInput !== text) {
            ngModelCtrl.$setViewValue(transformedInput);
            ngModelCtrl.$render();
          }
          return transformedInput;
        }else{
          return text;
        }
      }
      ngModelCtrl.$parsers.push(fromUser);
    }
  };
}])


.directive('progressIndicator', function() {
  return{
    restrict: 'E',
    scope: {
      activities: '<'
    },
    template: '<ul class="progress-indicator"><li ng-class="{\'not-completed\': activity.status==\'not_done\', \'partial-completed\': activity.status==\'partially_done\', \'completed\': activity.status==\'done\'}" ng-repeat="activity in activities"><a><span class="bubble"></span>{{::activity.display_name}}</a></li></ul>'
  }
})

.directive('renderVariant', [function(){
  return {
    restrict: 'E',
    scope: {
      "variant": "="
    },
    templateUrl: "/javascripts/angular_components/templates/render_variant.html",
    controller: ['$scope', function($scope){
      $scope.variant.site_url = BAB.endpoints.app_url('site', $scope.variant.url || "")
    }]
  }
}])

.directive('oneClick', ['$timeout',function($timeout) {
  return {
    restrict: 'A',
    scope: {
      clickDisableTimeout : '@?',
    },
    link: function link(scope, element, attrs) {
      scope.clickDisableTimeout = scope.clickDisableTimeout || 2000
      $(element).click(function(){
        $(element).attr('disabled', true);
        $timeout(function(){
          $(element).removeAttr('disabled');
        }, scope.clickDisableTimeout);
      });
    }
  };
}])
// ADDING SLIDE TOGGLE ANIMATION TO THE .slide-toggle-js class
.animation('.slide-toggle-js', function(){
  return {
    enter: function(element, done) {
      $(element).hide().slideDown(function(){
          done();
        });
    },
    leave: function(element, done) {
      $(element).slideUp(function(){
          done();
        });      
    }
  }
})
.directive('autoFocus', function($timeout) {
    return {
        restrict: 'AC',
        link: function(_scope, _element) {
            $timeout(function(){
                _element[0].focus();
            }, 0);
        }
    }
})
angular.module('siteApp')
.directive('documentUpload',function(){
  return{
    restrict: 'E',
    scope:{
      documents: '=',
      allowedTypes: '<',
      onSelect: '&',
      readonly: '<'
    },
    controller: 'documentUploadCtrl',
    templateUrl:'/javascripts/angular_components/templates/document_upload.html'
  }
})
.controller('documentUploadCtrl',['$scope','notificationService', function($scope,notificationService){
  $scope.docTypes = _.map($scope.allowedTypes,'type')
  $scope.defaultType = $scope.docTypes[0]
  $scope.typeDefinitions = {}
  _.each($scope.allowedTypes,function(e){
    $scope.typeDefinitions[e.type] = _.clone(e.restrictions)
    $scope.typeDefinitions[e.type]['formats'] = _.chain(e.restrictions.formats).map(function(str){ return "."+str }).join(",").value()
  })
  $scope.selectedDocTypes = {}
  $scope.docActive = function(doc){
    return (doc.document_type && (doc.status == 'active' || doc.id))
  }
  $scope.activeDocs = function(){
    return _.chain($scope.documents).filter(function(e){ return $scope.docActive(e)}).value()
  }
  $scope.onTypeSelect = function(){
    $scope.selectedDocTypes = {}
    $scope.docTypes = _.map($scope.allowedTypes,'type')
    $scope.defaultType = $scope.docTypes[0]
    _.each($scope.activeDocs(),function(e){
      if(!e.document_type || !$scope.typeDefinitions[e.document_type]){
        e.status = "inactive"; delete e.document_type; return
      }
      $scope.selectedDocTypes[e.document_type] = $scope.selectedDocTypes[e.document_type] || 0
      $scope.selectedDocTypes[e.document_type] = $scope.selectedDocTypes[e.document_type] + 1
      if($scope.typeDefinitions[e.document_type] && $scope.typeDefinitions[e.document_type].max_count){
        if($scope.selectedDocTypes[e.document_type] >= $scope.typeDefinitions[e.document_type].max_count){
          _.remove($scope.docTypes,function(type){return type == e.document_type})
          if(e.document_type == $scope.defaultType){$scope.defaultType = $scope.docTypes[0]}
          if($scope.selectedDocTypes[e.document_type] > $scope.typeDefinitions[e.document_type].max_count){
            $scope.selectedDocTypes[e.document_type] = $scope.selectedDocTypes[e.document_type] - 1
            e.status = 'inactive'
          }
        }
        if($scope.selectedDocTypes[e.document_type] < $scope.typeDefinitions[e.document_type].max_count){
          $scope.docTypes.push(e.document_type)
        }
      }
    })
    $scope.docTypes = _.uniq($scope.docTypes)
  }
  $scope.onTypeSelect()
  $scope.availableTypes = function(doc){
    return _.uniq($scope.docTypes.concat([doc.document_type]))
  }
  $scope.selectFile = function(file,index){
    if(file && !file.$error){
      $scope.documents[index].status = 'active'
      delete $scope.documents[index].error
      $scope.onSelect()(file,index)
    }
    else{
      if(index != null){
        $scope.documents[index].error = "Please upload document in valid format & size"
      }
    }
  }
  $scope.removeDocument = function(index){
    if($scope.documents[index].id){
      $scope.documents[index] = _.pick($scope.documents[index], 'id')
      $scope.documents[index].status = 'inactive'
      $scope.documents.push($scope.documents[index])
    }
    $scope.documents.splice(index,1)
    $scope.onTypeSelect()
    if($scope.activeDocs().length < 1){
      $scope.addNewDocument()
    }
  }
  $scope.fileExists = function(doc){
    return ($scope.documents[index] && ($scope.documents[index].file || $scope.documents[index].doc_url))
  }
  $scope.canShowNewDocument = function(){
    return ($scope.docTypes.length > 0 && _.every($scope.activeDocs(),function(e){ return $scope.hasFile(e) }))
  }
  $scope.hasFile = function(doc){
    return (doc.file || doc.doc_url || doc.path)
  }
  $scope.addNewDocument = function($event){
    if($event)
      $event.preventDefault();
    index = $scope.activeDocs().length
    $scope.documents.splice(index, 0, {'document_type':$scope.defaultType, 'status': 'active'})
    $scope.onTypeSelect()
  }
  $scope.displayName = function(type){
    if(type)
      return _.find($scope.allowedTypes,['type', type]).name
  }
  $scope.allowedTypesForDocument = function(index){
    $scope.display_file_types = _.difference($scope.brand_file_types[$scope.request_type()], $scope.selected_file_types)
    $scope.display_file_types = _.concat($scope.display_file_types, $scope.constant_file_types)
    if($scope.selected_file_types[index])
      $scope.display_file_types.push($scope.selected_file_types[index])
    return _.uniq($scope.display_file_types)
  }
  if(_.isEmpty($scope.activeDocs())){
    $scope.addNewDocument()
  }
}])

angular.module('siteApp')
.directive('editRejectionReasons',function(){
  return{
    restrict: 'E',
    scope:{
      rejectionReasonsList: '=',
      rejectionReasonObj: '=',
      data: '=?'
    },
    controller: 'rejectionReasonsCtrl',
    templateUrl: '/javascripts/angular_components/templates/catalog/edit_rejection_reasons.html'
  }
})

.controller('rejectionReasonsCtrl',['$scope','$interpolate', function($scope,$interpolate){
  if(_.isNil($scope.rejectionReasonObj)){
    $scope.rejectionReasonObj = []
  }
  $scope.toggleSelectedReason = function(index,reason_obj,reasonList,singleTemplate){
    if(reason_obj[index].display_string){
      var template_array = _.result(_.find(reasonList,['display_string',reason_obj[index].display_string]),'template');
      _.forEach(template_array,function(template_obj,template_index){
        var interpolationObject = $interpolate(template_obj["template"])
        if(!reason_obj[index].template){
          reason_obj[index].template = []
        }
        if(singleTemplate){
          reason_obj[index].template[template_index] = interpolationObject($scope.data)
        }else{
          if(reason_obj[index].template_selected[template_index]){
            reason_obj[index].template[template_index] = interpolationObject($scope.data)
          }else{
            delete reason_obj[index].template[template_index]
          }
        }
      })
    }else{
      delete reason_obj[index]
    }
  };
}])

.filter('interpolateTemplate',['$interpolate',function($interpolate){
  return function(template){
    return $interpolate(template)(this.data)
  }
}])
app=angular.module('createFormApp')
app.filter('matchBoostedFilter', function($filter) {
	var standardFilter = $filter('filter');
	return function(input, filter) {
		var filtered = standardFilter(input, filter);
		var extactMatchedItem = standardFilter(filtered, filter, function(actual, expected){
			return _.lowerCase(actual) == _.lowerCase(expected)
		})[0];

		if(extactMatchedItem){
			_.remove(filtered, extactMatchedItem);
			filtered.unshift(extactMatchedItem);
		}

		return filtered ;
	};
});
app.directive('formBuilder',['ruleService', function(ruleService){
	var formBuilder = {}
	formBuilder.restrict = 'E'
	formBuilder.scope = {
		svc: '=',
		units: '=',
		validate: '=',
		golden: '=?',
		suggestion: '=?',
		scnReasons: '=?'
	}
	formBuilder.templateUrl = "/javascripts/angular_components/templates/create_form_templates/form_builder.html"
	formBuilder.controller = ["$scope","ruleService", function($scope,ruleService){
		$scope.specEnabled = ($scope.svc.data.role && $scope.svc.data.role.toLowerCase() == 'tpapprover')
		$scope.renderGroup = function(group){
			if(typeof $scope.golden === 'boolean'){
				return _.filter(group.fields, function(field) {return !!field.golden == $scope.golden}).length
			}
			else{
				return true
			}
		}

		$scope.renderField = function(schema){
			if(typeof $scope.golden === 'boolean'){
				return (!!schema.golden == $scope.golden)
			}
			else{
				return true
			}	
		}

		$scope.isArray = angular.isArray
		$scope.$watch('specs',function(newVal,oldVal){
			if (oldVal && newVal && !$scope.svc.initSpec){
				$scope.svc.initSpec = true
				_.each($scope.groups, function(g){
					_.each(g.fields,function(field){
						if(field.data_type === 'Groupedordinal')
							field.value =  _.chain(field.value).map('data').flatten().value()
					})})

				ruleService.evalRule(null,$scope.groups,$scope.specs.value,$scope.dependencies,$scope.units)
			}
		},true)

		return function() {
		  return {specs: $scope.specs, validate: $scope.validate, formsvc: $scope.svc}
		}
	}]
	formBuilder.link = function($scope, el, attr,ctrl, transclude){
		$scope.groups = $scope.svc.bn_configs ? $scope.svc.bn_configs.groups : $scope.svc.data.groups
		$scope.dependencies = $scope.svc.bn_configs ? $scope.svc.bn_configs.dependencies : undefined
		$scope.specs = $scope.svc.data && $scope.svc.data.catalog ? $scope.svc.data.catalog.specifications : undefined
		$scope.suggested_specs = $scope.svc.data && $scope.svc.data.catalog ? $scope.svc.data.catalog.suggested_specifications : undefined
	}
	return formBuilder
}])

app.directive('element', ['$filter','helperService','ruleService', function($filter,helperService,ruleService){
	var element = {}
	element.restrict = 'E'
	element.scope = {
		groups: '=',
		schema: '=',
		spec: '=?',
		validate: '=',
		dependencies: '=',
		units: '=',
		suggestion: '=',
		specEnabled: '=',
		forceDisabled: '=?'
	}
	element.template = '<div ng-include="getTemplateUrl()"></div>'
	element.require = '^formBuilder'
	element.controller = ['$scope', function($scope){
		$scope.isArray = angular.isArray
		$scope.datepicker = {
			opened: false,
			options: {
 				formatYear: 'yy',
 				startingDay: 1,
 				minDate: $scope.schema.start_date,
 				maxDate: $scope.schema.end_date
			},
			open: function(){
 				$scope.datepicker.opened = true;
			}
		}

		$scope.get_unit_list = function(measure_for_unit,base_unit){
			var units = $scope.units[measure_for_unit]
			if(_.isArray(units)){
				return units
			}
			else{
				return _.map(units[base_unit],function(v,k){return k})
			}
		}

		$scope.isEditable = function(){
			if($scope.forceDisabled){
				return true
			}
			if($scope.specEnabled == true || !$scope.validate || !$scope.dependencies || !$scope.dependencies.length){
				return false
			}
			return ($scope.spec.disabled || $scope.spec.isDisabled)
		}

		$scope.update = function(){
			if($scope.schema.data_type === 'Date'){
				$scope.spec.value[0].data = $filter('date')($scope.spec.value[0].data,'yyyy-MM-dd')
			}
			if ($scope.validate){
				$scope.formsvc.saveDraft()
				ruleService.evalRule($scope.schema.code,$scope.groups,$scope.specs.value,$scope.dependencies,$scope.units)
			}
			if($scope.schema.data_type === 'Measurable' && $scope.schema.range){
      	$scope.schema.placeholder = helperService.getPlaceholder($scope.schema,$scope.spec,$scope.units)
			}
    }

    $scope.selectAll = function(){
    	if($scope.spec.select_all_flag){
    		if($scope.schema.data_type === 'Measurable'){
    			$scope.spec.value = _.map($scope.schema.value, function(v){return {data:v,unit:$scope.schema.unit}})
    		}
    		else if($scope.schema.data_type === 'Numeric'){
    			$scope.spec.value = _.map($scope.schema.value, function(v){return {data:v}})
    		}
    		else{
    			$scope.spec.value = $scope.schema.value
    		}
    	}
    	else{
    		$scope.spec.value = []	
    	}
    }
	}]
	element.link = function($scope, el, attr,ctrl, transclude){

		var settings = {
			'value': {
				'Numeric' : {'createElement' : createDropDown},
				'Measurable': {'createElement' : createMeasurableInput},
				'Enumerable' : {'createElement' : createDropDown},
				'Ordinal': {'createElement': createDropDown},
				'Groupedordinal': {'createElement': createDropDown}
			},
			'range': {
				'Date' : {'createElement' : createDateTime},
				'Numeric': {'createElement': createNumberBox},
				'Measurable' : {'createElement' : createMeasurableInput},
			},
			'any': {
				'Date' : {'createElement' : createDateTime},
				'Numeric': {'createElement' : createNumberBox},
				'Measurable': {'createElement' : createMeasurableInput},
				'Text': {'createElement': createTextBox},
				'Boolean': {'createElement' : createRadioButton}
			}
		}
		
		$scope.specs = ctrl().specs
		$scope.formsvc = ctrl().formsvc
		if (!$scope.validate || !$scope.dependencies.length || !$scope.schema.is_dependency){
			$scope.schema.placeholder = helperService.getPlaceholder($scope.schema,$scope.spec,$scope.units)
		}

		$scope.getTemplateUrl = function(){
			var spec = $scope.schema
			$scope.restriction_type = spec.restriction_type
			if (spec.data_type === 'Text' || spec.data_type === 'Boolean'){
				$scope.restriction_type = $scope.restriction_type ? $scope.restriction_type : 'any'
			}
			$scope.schema.select_type = $scope.schema.select_type || 'single'
			var createElement = settings[$scope.restriction_type][$scope.schema.data_type]['createElement']
			var url = createElement()
			return url
		}

		function createTextBox(){
			return "/javascripts/angular_components/templates/create_form_templates/text-box.html"
		}

		function createNumberBox(){
			return "/javascripts/angular_components/templates/create_form_templates/number-box.html"	
		}

		function createDropDown(){
			return "/javascripts/angular_components/templates/create_form_templates/drop-down.html"
		}

		function createGroupedordinalDropDown(){
			if(!$scope.schema.rendered){
				$scope.schema.value =  _.chain($scope.schema.value).map('data').flatten().value()
				$scope.schema.rendered = true
			}
			return "/javascripts/angular_components/templates/create_form_templates/drop-down.html"
		}

		function createRadioButton(){
			var val = $scope.schema.value
			if (!val || !val.length || val[0] === 'true' || val[1] === 'false'){
				$scope.schema.value = [['Yes','true'],['No','false']]
			}
			return "/javascripts/angular_components/templates/create_form_templates/radio-button.html"
		}

		function createDateTime(){
			$scope.schema.range = $scope.schema.range || [$scope.schema.start_date, $scope.schema.end_date]
			return "/javascripts/angular_components/templates/create_form_templates/date-picker.html"
		}

		function createMeasurableInput(){
			return "/javascripts/angular_components/templates/create_form_templates/measurable-input.html"
		}
	}
	return element
}])

app.directive('customValidate',['helperService', function(helperService){
	var customValidate = {}
	customValidate.restrict = 'A'
	customValidate.scope = false
	customValidate.require = 'ngModel'
	customValidate.link = function($scope, el, attr,ngModel, transclude){
		function getData(){
			var modelVal = ngModel.$$rawModelValue
			if(modelVal == undefined)
				return null
			var isArray = modelVal && angular.isArray(modelVal) && modelVal.length > 0
			var data = modelVal ? (isArray ? (modelVal[0].hasOwnProperty('data') ? _.map(modelVal, function(x){ return x.data}) : _.map(modelVal, function(x){ return x})) : modelVal.hasOwnProperty('data') ? modelVal.data : modelVal) : modelVal
			return data
		}

		function isValidRange(data,range,conversionFactor){
			var count = 0
			if(!_.isArray(range[0])) range = [range]

			_.each(range, function(r){
				if($scope.schema.data_type === 'Date'){
					data = new Date(data)
					r[0] = new Date(r[0])
					r[1] = new Date(r[1])
				}
				var min = r[0]*conversionFactor.toFixed(2) || r[0]
				var max = r[1]*conversionFactor.toFixed(2) || r[1]
				if(isValidData(data,[min,max])){
					count += 1
				}
			})
			return count ? true : false
		}

		function isInSet(data,lovs){
			data = _.isArray(data) ? data : [data]
			return _.difference(data,lovs).length == 0
		}

		function isValidData(data,range){
			var min = range[0]
			var max = range[1]
			var flag = true
			if(data || data == 0){
				if(min || min == 0){
					if(data < min){
						flag = false
					}
				}
				if(max || max==0){
					if(data > max){
						flag = false
					}
				}
			}
			return flag
		}

		function checkValidity(){
			var isValid = true
			var data = getData()
			if($scope.schema.data_type === 'Date') data = new Date(data)

			if($scope.schema.restriction_type === 'value' || $scope.schema.data_type === 'Boolean'){
				var universe = $scope.schema.value
				if(universe[0].hasOwnProperty('data')){
					universe = _.map(universe,function(o){return o.data})
				}
				else if(_.isArray(universe[0])){
					universe = _.map(universe, function(o){return o[1]})	
				}
				
				isValid = isInSet(data,universe)
			}
			else if($scope.schema.data_type === 'Date')
				isValid = isValidRange(data,$scope.schema.range,1)
			else if($scope.schema.restriction_type === 'range' || $scope.schema.restriction_type === 'any'){
				var conversionFactor = helperService.getUnit($scope.spec,$scope.schema,$scope.units).conversionFactor
				isValid = isValidRange(data,$scope.schema.range,conversionFactor)
			}
			ngModel.$setValidity('custom-validation', isValid)
		}

		$scope.$watch('schema.value', function(newVal,oldVal) {
			if(newVal && oldVal != newVal && ($scope.schema.restriction_type === 'value' || $scope.schema.data_type === 'Boolean') && newVal.length){
				checkValidity()
			}
		})

		$scope.$watch('schema.range', function(newVal,oldVal) {
			if(newVal && oldVal != newVal && ($scope.schema.restriction_type === 'range' || $scope.schema.restriction_type === 'any') && newVal.length){
				checkValidity()
			}
		}, true)

		$scope.$watch('spec.value[0].data', function(newVal,oldVal) {
			if(newVal && oldVal != newVal){
				checkValidity()
			}
		})

		$scope.$watchGroup(['schema.start_date','schema.end_date'], function(newVal,oldVal) {
			if(newVal && oldVal != newVal && $scope.schema.data_type === 'Date'){
				checkValidity()
			}
		})
	}
	return customValidate
}])

angular.module('siteApp')
.directive('locationPicker',function(){
  return{
    restrict: 'E',
    scope:{
      universe: '<',
      location: '=',
      locType: '='
    },
    controller: 'locationPickerCtrl',
    templateUrl: '/javascripts/angular_components/templates/location_picker.html'
  }
})

.controller('locationPickerCtrl',['$scope','notificationService','$filter',function($scope,$notify,$filter) {
  $scope.state_list = $scope.universe.state
  $scope.district_list = $scope.universe.district
  $scope.zipcode_list = $scope.universe.zipcode
  $scope.total_states = $scope.state_list.length;
  $scope.isStateOpen = true;
  $scope.isDistrictOpen = true;
  $scope.isPincodeOpen = true;
  $scope.checkAllStates = function(){
    return $scope.location.value.selected_state.length == $scope.total_states
  }
  $scope.$watch(function(){return [$scope.location.value.selected_state,$scope.location.value.selected_district];},function(newvalue,oldvalue){
    var filter_district_list = $scope.universe.district
    var filter_zipcode_list = $scope.universe.zipcode
    if(newvalue[0]){
      if(_.isArray($scope.location.value.selected_state)){
        _.forEach($scope.location.value.selected_state,function(loc){
          filter_district_list = _.filter(filter_district_list,function(d){
            return _.toLower(d[0]).indexOf(_.toLower(loc[0])) == -1
          })
          filter_zipcode_list = _.filter(filter_zipcode_list,function(d){
            return _.toLower(d[0]).indexOf(_.toLower(loc[0])) == -1
          })
        })
      }
      if ($scope.checkAllStates()){
        $scope.locType.value = 'ALL-INDIA';
      }
    }
    if(newvalue[1]){
      if(_.isArray($scope.location.value.selected_district)){
        _.forEach($scope.location.value.selected_district,function(loc){
          filter_zipcode_list = _.filter(filter_zipcode_list,function(d){
            return _.toLower(d[0]).indexOf(_.toLower(loc[0])) == -1
          })
        })
      }
    }
    $scope.district_list = filter_district_list
    $scope.zipcode_list = filter_zipcode_list
  },true);
  $scope.$watch(function(){return $scope.locType.value},function(newvalue,oldvalue){
    if(newvalue == 'ALL-INDIA'){
      $scope.location.value.selected_state = $scope.state_list;
      $scope.location.value.selected_district = [];
      $scope.location.value.selected_zipcode = [];
    }
  },true)

  $scope.onselect_action = function(item,selection_type){
    var found_hit = false
    var found_data = {}
    var confirm_val = true;
    var affected_types = selection_type == 'state' ? ['district','zipcode'] : ['zipcode']
    var affected_types_for_ui = selection_type == 'state' ? ['district','pincode'] : ['pincode']
    var message = $filter('translate')("$a$.g.catalog.upload.location.picker.confirm", {selected_value : item[0], affected_types_slash : affected_types_for_ui.join("/"), affected_types_and : affected_types_for_ui.join(" and ")})
    $scope[selection_type+'_notify'] = false
    _.forEach(affected_types,function(type){
      if (_.isArray($scope.location.value['selected_'+type])){
        found_data[type] = []
        _.forEach($scope.location.value['selected_'+type],function(val){
        if(_.toLower(val[0]).indexOf(_.toLower(item[0])) != -1){
            found_hit = true
            found_data[type].push(val[0])
          }
        })
      }
    })
    if(found_hit){
      if(!(confirm_val = confirm(message))){
        if(_.isArray($scope.location.value['selected_'+selection_type])){
          _.remove($scope.location.value['selected_'+selection_type],function(val){
           return _.toLower(val[0]) == _.toLower(item[0])
          })
        }
      }else{
        _.forEach(affected_types,function(type){
          if (_.isArray($scope.location.value['selected_'+type])){
            _.remove($scope.location.value['selected_'+type],function(val){
              return found_data[type].indexOf(val[0]) != -1
            })
          }
        })
      }
    }else{
      if (!$scope[selection_type+'_notify']){
        $notify.warning("All the "+ affected_types_for_ui.join("/") +" under added location are automatically added!")
        $scope[selection_type+'_notify'] = true
      }
    }
    return (!found_hit || (found_hit && confirm_val))
  }
  $scope.startsWith = function (actual, expected) {
    var lowerStr = (actual + "").toLowerCase();
    return lowerStr.indexOf(expected.toLowerCase()) === 0;
  }
}])
angular.module('siteApp')
.directive('requestManagementLink',function(){
  return{
    restrict: 'E',
    transclude: true,
    scope:{
      namespace: '<?'
    },
    controller: 'requestManagementLinkCtrl',
    templateUrl: '/javascripts/angular_components/templates/request_management_link.html'
  }
})

.controller('requestManagementLinkCtrl',['$scope','notificationService','gemUsersRA','$uibModal','$sce',function($scope,$notify,gemUsersRA,$uibModal,$sce) {
  gemUsersRA.all('configs').customGET('request_management_url',{'namespace':$scope.namespace}).then(function(response){
    $scope.iframe_url = response.url;
  })

  $scope.trustSrc = function(src) {
    return $sce.trustAsResourceUrl(src);
  }

  $scope.open_category_request_iframe = function(){
    $uibModal.open({
      scope: $scope,
      size: 'lg request_management_modal',
      templateUrl: "category_request_iframe.html",
      controller: function($scope, $uibModalInstance){
        $scope.ok = function () {
          $uibModalInstance.close();
        };

        $scope.cancel = function () {
          $uibModalInstance.close();
        };
      }
    })
  }

}])
angular.module('search_bn_dir',['siteApp'])
.directive("searchBn",['$compile', '$parse', '$templateRequest', function($compile, $parse, $templateRequest){
  return{
    restrict: 'E',
    scope:{
      searchedBn: '=',
      searchedCategory: '=?',
      filter: '=',
      level: '=?',
      pickable: '=',
      siteSpecific: '=',
      userSpecific: '=',
      clearInput: '=?',
      displayName: '@?',
      searchRequired: '=?',
      searchType: '=?',
      showCharCount: '=?',
      searchLeafBn: '=?',
      popupTemplateUrl: '<?',
      onSelect: '=?',
      placeholderText: '@?',
      searchResults: '=?',
      searchTerm: '=?',
      onNoRelevantResults: '=?',
      searchOptions: '=?',
      textHold:'=?'
    },
    link: function(scope, element, attrs){
      var templateUrl ='/javascripts/angular_components/templates/search_bn.html',
        popupTemplateRegexp = /{{TYPEAHEAD_POPUP_ATTR}}/g
      $templateRequest(templateUrl).then(function(resp) {
        var markup = resp
        if(scope.popupTemplateUrl){
          markup = markup.replace(popupTemplateRegexp, ' typeahead-popup-template-url="'+scope.popupTemplateUrl+'" ')
        }
        var tplEl = angular.element(markup.trim());
        element.replaceWith(tplEl);
        $compile(tplEl)(scope);
      });
    },
    controller: 'searchBnCtrl',
  }
}])

.service('searchBnService',['bnRA',function(bnRA){
  this.search_bn = function(params){
    return bnRA.all("categories").customGET('search_category',params).then(function(data){
      return data.search_results
    })
  }
}])


.controller('searchBnCtrl',['$scope', '$parse', 'searchBnService', '$filter',function($scope,$parse,searchBnService,$filter) {
  $scope.filter_status_list = [{display_name: 'Pending Migration',status: 'pending_migration'},{display_name: 'Migrated',status: 'active'}]

  $scope.search_category = function(search_term){
    params = $scope.construct_params(search_term)
    $scope.searchTerm = search_term;
    return searchBnService.search_bn(params).then(function(response){
      $scope.searchResults = response;
      if($scope.onNoRelevantResults){
        $scope.searchResults.push({noRelevantResults: true})
      }
      return $scope.searchResults
    })
  }
  $scope.$on("noRelevanceEvent", function(evt,data){ 
    $scope.handleNoReleventResult(data.searchTerm)
  });
  $scope.handleNoReleventResult = function(search_term){
    if($scope.onNoRelevantResults) $scope.onNoRelevantResults(search_term)
  }

  $scope.construct_params = function(search_term){
    type = $scope.searchType ? $scope.searchType == 'services' ? 'services' : 'products' : null
    return _.merge({term: search_term,status: $scope.filtered_status,pickable: $scope.pickable,level: $scope.level,site_specific: $scope.siteSpecific,user_specific: $scope.userSpecific,search_leaf_bn: $scope.searchLeafBn,search_type: type},$scope.searchOptions)
  }


  $scope.set_default_value = function(){
    if(!$scope.displayName){
     $scope.displayName = "category"
    }
    if($scope.clearInput == false && $scope.searchedCategory){
      $scope.searched_category = $scope.searchedCategory
    }
    if(!$scope.searchRequired)
    {
      $scope.searchRequired = false
    }
    if(!$scope.searchType){
      $scope.searchType =  'products'
    }
    if(!$scope.searchLeafBn){
      $scope.searchLeafBn = false
    }
    if(!$scope.placeholderText){
     $scope.placeholderText = $filter('translate')("$a$.g.search.bn.placeholder.default")
    }
    if(!$scope.textHold){
      $scope.textHold = false
    }
  }

  $scope.set_default_value()


  $scope.set_selected_bn = function() {
    if(!$scope.searched_category.noRelevantResults && ($scope.searched_category.bn_name || $scope.searched_category.bn_id))
    {
      $scope.searchedBn = $scope.searched_category.bn_id
      $scope.searchedCategory = $scope.searched_category
      if($scope.textHold !=false) 
        $scope.searched_category=$scope.searchedCategory.bn_name
      if($scope.onSelect) $scope.onSelect($scope.searched_category)
      if($scope.clearInput != false) 
        $scope.searched_category = '' 
    }
    else
    {
      manual_input  = $scope.searched_category
      $scope.searchedBn = null
      $scope.searchedCategory = {}
      $scope.searchedCategory.bn_id = null
      $scope.searchedCategory.category = null
      $scope.searchedCategory.bn_name = manual_input
      if($scope.searched_category && $scope.searched_category.noRelevantResults == true){
        $scope.searched_category = $scope.searchTerm
        $scope.handleNoReleventResult($scope.searchTerm)
      }
    }
  }

}])

angular.module('services_common',['siteApp'])

.directive('searchSvc',[function() {
  return {
    restrict: 'EC',
    scope: {
    	source: '=',
      callbak: '&'
    },
    templateUrl: '/javascripts/angular_components/templates/search_service.html',
    controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs){
    }]
  }
}])

angular.module('siteApp')
.directive('showCaptcha', function(){
  return{
    restrict: 'E',
    scope:{
      enteredCaptcha: '=',
      captchaKey: '='
    },
    controller: ['$scope', 'gemUserRA', function($scope, gemUserRA){
      $scope.captcha = {}
      $scope.captcha.can_show = false

      $scope.createCaptchaUrl = function(){
        $scope.captcha.can_show = false
        gemUserRA.all('captcha').customPOST().then(function(resp){
          $scope.captcha.url = resp.url
          $scope.captchaKey = resp.captcha_key
          $scope.captcha.can_show = true
        })
      }

      $scope.createCaptchaUrl();
    }],
    templateUrl: '/javascripts/angular_components/templates/show_captcha.html'
  }
})
angular.module('siteApp')
.directive('specDataGrid', [function() {
  return {
    restrict: 'E',
    templateUrl: "/javascripts/angular_components/templates/spec_data_grid.html",
    scope: {  
      specDefn: '=',
      ngRows: '=',
      specColumns: '=',
      otherColumns: '=',
      onRowChangeCallback: '=',
      isSrvc:'=',
      depIndex: '='
    },
    controller: ['$scope', function($scope){
      $scope.new_row = {};
    }]
  }
}])
.directive('specRow', [function() {
  return {
    restrict: 'E',
    controller: ['$scope', function($scope){
	    $scope.ngRows = $scope.ngRows || []

      $scope.addRow = function(){
        $scope.ngRows.push({});
        $scope.new_row = {};
      }
      $scope.deleteRow = function(index){
        $scope.ngRows.splice(index,1);
      }
      if($scope.row){
        $scope.$watch(function(){return $scope.row},function(newvalue,oldvalue){
          if($scope.onRowChangeCallback){
            $scope.row = $scope.onRowChangeCallback($scope.row);
          }
        },true)
      }
    }]
  }
}])
.directive('specCeil',['$compile', function($compile) {
  return {
    restrict: 'EC',
    replace:false,
    scope: {  specData: '=',rowData: '=', isSrvc: '=' },
    compile: function(scope, element, attributes){
      var linkFunction =  function(scope, element, attrs){
        var template = ''
        var dataType = _.toLower(scope.specData.data_type)
        if((dataType == "measurable") || (dataType == "numeric")){
          if(scope.specData.restriction_type === 'any' || scope.specData.restriction_type == 'range' || scope.specData.constraint_type === 'range'){
            template = '<spec-range spec-data=specData column-data="rowData"></spec-range >'
          }
          else if(scope.specData.restriction_type === 'value' || scope.specData.constraint_type === 'value'){
            template = '<spec-set spec-data=specData column-data="rowData"></spec-set>'
          }
        }else if((dataType == "ordinal") || (dataType == "enumerable") || (dataType === 'groupedordinal')){
          if(dataType==='ordinal' && scope.isSrvc) template = '<spec-bol spec-data=specData column-data="rowData"></spec-bol>'
            else template = '<spec-set spec-data=specData column-data="rowData"></spec-set>'
          }
        else if(dataType == "boolean"){
          template = '<spec-bol spec-data=specData column-data="rowData"></spec-bol>'
        }else if(dataType == "date"){
          template = '<spec-date spec-data=specData column-data="rowData"></spec-date>'
        }else if(dataType == "text"){
          template = '<input type="text" ng-model="rowData.value">'
        }
        element.replaceWith($compile(template)(scope));
      }
      return linkFunction;
    }
  }
}])
.directive('specRange',['notificationService', function(notify) {
  return {
    restrict: 'EC',
    scope: {  specData: '=',columnData: '=' },
    templateUrl:"range.html",
    controller: ['$scope', function($scope){
      $scope.columnData = $scope.columnData || {}
      $scope.validate_range = function(input_type){
      var r = $scope.columnData
      var r_data = $scope.specData.range && $scope.specData.range
      if(_.isEmpty(r)) {
        notify.error("Range is empty")
        return false;
      }
      var e0 = (!_.isNumber(r.min) && _.isEmpty(r.min) )
      var e1 = (!_.isNumber(r.max) && _.isEmpty(r.max) )
      var er0 = (!_.isNumber(r_data[0]) && _.isEmpty(r_data[0]) )
      var er1 = (!_.isNumber(r_data[1]) && _.isEmpty(r_data[1]) )
      if(e0 && e1) {
        notify.error("Range is empty")
        return false;
      }
      if(!e0 && !e1 && _.toNumber(r.min) > _.toNumber(r.max)) {
        notify.error("Min value cannot be greater than max")
        return false;
      }
      if(!er0 && !e0 && _.toNumber(r.min) < _.toNumber(r_data[0])){
        notify.error("Min value cannot be less than min value of range")
        return false;
      }
      if(!er1 && !e1 && _.toNumber(r.max) > _.toNumber(r_data[1])){
        notify.error("Max value cannot be greater than max value of range")
        return false;
      }
      return true;
    }
    }]
  }
}])
.directive('specSet',[function() {
  return {
    restrict: 'EC',
    scope: {  specData: '=',columnData: '=' },
    templateUrl:"value.html",
    controller:['$scope', function($scope){

      if(!$scope.specData.value) $scope.specData.value = []
      $scope.set = angular.copy($scope.specData.value)

      if($scope.specData.data_type === 'Groupedordinal'){
        $scope.set = _.chain($scope.specData.value).map('data').flatten().value()
      }
      $scope.isSpecDataHash = _.has($scope.set[0],'data')
      
      if($scope.isSpecDataHash){
        $scope.set = _.filter($scope.set, 'dictionary_id')
      }

      $scope.selectAll = false
      $scope.$watch(function(){return $scope.selectAll;},function(newvalue,oldvalue){
        if(newvalue){
          $scope.columnData = $scope.columnData || {}
          $scope.columnData.value = $scope.set || []
        }
      });
      $scope.unselectall = function(val){
        if(!val){
          $scope.columnData = $scope.columnData || {}
          $scope.columnData.value = []
        }
      }
      $scope.$watch(function(){return $scope.columnData;},function(newvalue,oldvalue){
        $scope.columnData = $scope.columnData || {}
        if(newvalue){
          if(_.difference($scope.set,  newvalue.value).length > 0){
            $scope.selectAll = false; 
          }else{
            $scope.selectAll = true; 
          }
        }else{
          $scope.selectAll = false; 
        }
      },true);
    }]
  }
}])
.directive('specBol',[function() {
  return {
    restrict: 'EC',
    scope: {  specData: '=',columnData: '=' },
    templateUrl:"boolean.html",
    controller:['$scope', function($scope){
      $scope.columnData = $scope.columnData || {}
      $scope.columnData.value = $scope.columnData.value || []
	    $scope.specData.value = ['true', 'false']
      $scope.display_value = {'true':"Yes",'false':"No"}
      $scope.selectAll = false
      $scope.$watch(function(){return $scope.selectAll;},function(newvalue,oldvalue){
        if(newvalue){
          $scope.columnData = $scope.columnData || {}
          $scope.columnData.value = $scope.specData.value || []
        }
      });
      $scope.unselectall = function(val){
        if(!val){
          $scope.columnData = $scope.columnData || {}
          $scope.columnData.value = []
        }
      }
      $scope.$watch(function(){return $scope.columnData;},function(newvalue,oldvalue){
        $scope.columnData = $scope.columnData || {}
        if(newvalue){
          if(_.difference($scope.specData.value,  newvalue.value).length > 0){
            $scope.selectAll = false;
          }else{
            $scope.selectAll = true;
          }
        }else{
          $scope.selectAll = false;
        }
      },true);
    }]
  }
}])
.directive('specDate',[function() {
  return {
    restrict: 'EC',
    scope: {  specData: '=',columnData: '=' },
    templateUrl:"date.html",
    controller:['$scope','$filter', function($scope,$filter){
      $scope.datepicker = {
        startDateOpened: false,
        endDateOpened: false,
        options: {
          formatYear: 'yy',
          startingDay: 1,
          minDate: $scope.specData.start_date,
          maxDate: $scope.specData.end_date
        },
        startDateOpen: function(){
          $scope.datepicker.startDateOpened = true;
        },
        endDateOpen: function(){
          $scope.datepicker.endDateOpened = true;
        }
    }

      $scope.formatDate = function(){
        $scope.columnData.min = $scope.columnData.min ? $filter('date')($scope.columnData.min,'yyyy-MM-dd') : $scope.columnData.min
        $scope.columnData.max = $scope.columnData.max ? $filter('date')($scope.columnData.max,'yyyy-MM-dd') : $scope.columnData.max
      }
    }]
  }
}])
angular.module('spec_suggestion_list',['siteApp'])
.component('suggestionListComponent',{
  controller: 'suggestionListCtrl',
  templateUrl: "/javascripts/angular_components/templates/suggestion_list.html"
})

.controller('suggestionListCtrl',['$scope','$stateParams','cmsOthersRA','$state','$uibModal','notificationService', function($scope,$stateParams,cmsOthersRA,$state,$uibModal,notificationService){
  $scope.pagination = {per_page: 10,current_page:1}
  $scope.app = $stateParams['app']
  $scope.status_list = ['pending','accepted','rejected']
  $scope.search = {}
  $scope.search.status = 'pending'
  $scope.get_suggestions = function(status){
      params={
        page: $scope.pagination.current_page,
        per_page: $scope.pagination.per_page,
        status: status
      }
    if($scope.app == 'cms'){
      params['bnid']=$stateParams['bn_id']
      cmsOthersRA.all('suggestions').customGET('get_suggestions_for_browse_node',params).then(function(response){
        $scope.suggestion_list = response.suggestion_list
        $scope.total_items = response.total_items
      })      
    }
    else if($scope.app == 'admin'){
      cmsOthersRA.all('suggestions').customGET('get_suggestions_for_seller',params).then(function(response){
        $scope.suggestion_list = response.suggestion_list
        $scope.total_items = response.total_items
      })      
    }
  }
  $scope.get_suggestions($scope.search.status)

  $scope.open = function (suggestion,index) {
    suggestion.showmodal = true
    var modalInstance = $uibModal.open({
      templateUrl: '/javascripts/angular_components/templates/suggestion_view.html',
      controller: ['$scope','$uibModalInstance','suggestion','app',function($scope,$uibModalInstance,suggestion,app) {
        $scope.suggestion = suggestion
        $scope.app = app
        $scope.getDisplayName= function(code){
          var display_name = code 
          if($scope.suggestion.browse_node.schema){
            _.each($scope.suggestion.browse_node.schema,function(spec){
              _.filter(spec, function(feature) { 
                if(feature.code == code){
                  display_name = feature.display_name
                  return
                }
              })
            })
          }
          return display_name
        }
        $scope.close = function () {
          $scope.suggestion.showmodal = false
          $uibModalInstance.dismiss('cancel')
        };
        $scope.acceptSuggestion = function(){
          $scope.suggestion['action'] = 'accept_suggestion'
          $uibModalInstance.close($scope.suggestion);
        }

        $scope.rejectSuggestion = function(){
          $scope.suggestion['action'] = 'reject_suggestion'
          $uibModalInstance.close($scope.suggestion);
        }
      }],
      size: 'lg',
      resolve: {
        suggestion: function(){
          return suggestion
        },
        app: function(){
          return $scope.app
        }
      }
    });

    modalInstance.result.then(function (suggestion) {
      params['suggestion_id'] = suggestion.id
      cmsOthersRA.all('suggestions').customPUT(params,suggestion.action).then(function(result){
        if(result.success){
          suggestion.status = result.suggestion.suggestion.status
          notificationService.success(result.message)
          $scope.suggestion_list[index] = suggestion
        }
        else{
          notificationService.error(result.message)
        }
      })
    },function () {
      //dismiss modal
    });
  };

}])
angular.module('siteApp')
.filter('titleCase', function() {
    return function(input) {
      input = input || '';
      return _.startCase(input);
    }
})
.directive('zoneLocationPicker',['$filter',function($filter){
  return{
    restrict: 'E',
    require: '^^locationPicker',
    scope:{
      universe: '<',
      location: '=',
      locType: '='
    },
    link: function($scope, element, attrs, locationPickerCtrl){
      $scope.state_list = $scope.universe.state
      $scope.state_list = _.map($scope.state_list, function(val) {
          return [_.toLower(val[0]),val[1]];
      });
      console.log("state_list",$scope.state_list);
      $scope.zone = {}
      $scope.zone_checkbox = {}
      // getZones($scope.zone,$scope.state_list)

      $scope.zone["north"] = [  ["jammu & kashmir", "JAMMUKASHMIR"],
                                ["haryana", "HARYANA"],
                                ["delhi", "DELHI"],
                                ["punjab", "PUNJAB"],
                                ["himachal pradesh", "HIMACHALPRADESH"],
                                ["chandigarh", "CHANDIGARH"],
                                ["rajasthan", "RAJASTHAN"]];

      $scope.zone["central"] = [ ["uttar pradesh", "UTTARPRADESH"],
                                 ["madhya pradesh", "MADHYAPRADESH"],
                                 ["chhattisgarh", "CHHATTISGARH"],
                                 ["uttarakhand", "UTTARAKHAND"]];

      $scope.zone["east"] = [   ["bihar", "BIHAR"],
                                ["odisha", "ODISHA"],
                                ["jharkhand", "JHARKHAND"],
                                ["west bengal", "WESTBENGAL"],
                                ["sikkim", "SIKKIM"]];


      $scope.zone["west"] = [   ["gujarat", "GUJARAT"],
                                ["daman & diu", "DAMANDIU"],
                                ["maharashtra", "MAHARASHTRA"],
                                ["dadra & nagar haveli","DADRANAGARHAVELI"],
                                ["goa", "GOA"]];

      $scope.zone["south"] = [  ["karnataka", "KARNATAKA"],
                                ["kerala", "KERALA"],
                                ["andhra pradesh", "ANDHRAPRADESH"],
                                ["telangana", "TELANGANA"],
                                ["tamil nadu", "TAMILNADU"],
                                ["puducherry", "PUDUCHERRY"],
                                ["andaman & nicobar", "ANDAMANNICOBAR"],
                                ["lakshadweep", "LAKSHADWEEP"]] ;

      $scope.zone["northeast"] = [["manipur", "MANIPUR"],
                                  ["mizoram", "MIZORAM"],
                                  ["tripura", "TRIPURA"],
                                  ["nagaland", "NAGALAND"],
                                  ["meghalaya", "MEGHALAYA"],
                                  ["assam", "ASSAM"],
                                  ["arunachal pradesh", "ARUNACHALPRADESH"]];

      var isEqualCustom = function(val,val_b){
        return _.isEqual([_.toLower(val_b[0]),val_b[1]],[_.toLower(val[0]),val[1]])
      }
      $scope.indexOfState = function(state_list,state){
        return _.findIndex(state_list, function(x) { return isEqualCustom(x,state) })
      }
      $scope.toggleState = function($event,state){
        var state_exists = $scope.indexOfState($scope.location.value.selected_state,state)
        if(state_exists == -1){
          $scope.location.value.selected_state.push(state);
          var confirm = $scope.$parent.onselect_action(state,'state')
          if (!confirm) $event.preventDefault();
        }else{
          $scope.location.value.selected_state.splice(state_exists,1);
          $scope.locType.value = "STATE-LEVEL"
        }
      }
      $scope.stateCheck = function(state){
        if ($scope.indexOfState($scope.location.value.selected_state,state) == -1){
          return false;
        }else{
          return true;
        }
      }
      
      $scope.onSelectZone = function(zone){
        var found_hit = false
        var found_data = {'district': [],'zipcode':[]}
        var affected_types = ['district','zipcode'] 
        _.forEach($scope.zone[zone],function(state){
          _.forEach(affected_types,function(type){
            if (_.isArray($scope.location.value['selected_'+type])){
              _.forEach($scope.location.value['selected_'+type],function(val){
                if(_.toLower(val[0]).indexOf(_.toLower(state[0])) != -1){
                    found_hit = true
                    found_data[type].push(val[0])
                }
              })
            }
          })
        })
        if(found_hit){
          _.forEach(affected_types,function(type){
            if (_.isArray($scope.location.value['selected_'+type])){
              _.remove($scope.location.value['selected_'+type],function(val){
                return found_data[type].indexOf(val[0]) != -1
              })
            }
          })
        }
      }
      $scope.toggleZone = function($event,zone){
        var message = $filter('translate')("$a$.g.catalog.upload.location.zone.confirm")
        var zone_checkbox = $scope.zoneCheck(zone)
        if(zone_checkbox != true){
          if(confirm(message)){
            _.forEach($scope.zone[zone],function(value){
              if($scope.indexOfState($scope.location.value.selected_state,value) == -1){
                $scope.location.value.selected_state.push(value)
              }
            })
            $scope.onSelectZone(zone);
          }else {
            $scope.zone_checkbox[zone] = false
            $event.preventDefault();
          }
        }else{
          $scope.location.value.selected_state = _.differenceWith($scope.location.value.selected_state,$scope.zone[zone],function(arrValue,othValue){ return isEqualCustom(arrValue,othValue); })
          $scope.locType.value = "STATE-LEVEL"
        }
      }
      $scope.zoneCheck = function(zone){
         var zoneCheck =  (_.differenceWith($scope.zone[zone],$scope.location.value.selected_state,function(arrValue,othValue){ return isEqualCustom(arrValue,othValue); }).length == 0)
         return zoneCheck;
      }
    },
    templateUrl: '/javascripts/angular_components/templates/zone_location_picker.html'
  }
}])
!function(){"use strict";function a(a){var b='<div class="ngn" ng-class="ngNotify.notifyClass"><span ng-if="ngNotify.notifyHtml" class="ngn-message" ng-bind-html="ngNotify.notifyMessage"></span><span ng-if="!ngNotify.notifyHtml" class="ngn-message" ng-bind="ngNotify.notifyMessage"></span><span ng-show="ngNotify.notifyButton" class="ngn-dismiss" ng-click="dismiss()">&times;</span></div>';a.put(f,b)}function b(a){function b(a,b,c){this.scope=a,this.options=c,this.template=d(b)}var c;b.prototype={show:function(a){this.template.fadeIn(q,a)},dismiss:function(){this.template.fadeOut(m,this.destroy.bind(this))},destroy:function(){a.cancel(c),this.options&&this.options.userCallback&&this.options.userCallback(),this.scope&&this.scope.$destroy(),this.template&&this.template.el.remove(),this.scope=null,this.options=null,this.template=null}};var d=function(a){return new d.fn(a)};return d.fn=function(a){this.el=a},d.fn.prototype._fade=function(b,d,e,f){var g=n/e,h=this.el;h.css("opacity",d);var i=function(){d+=b*g,h.css("opacity",d),(r>=d||d>=s)&&(a.cancel(c),r>=d&&h.css("display","none"),f&&f())};c=a(i,n)},d.fn.prototype.fadeIn=function(a,b){this.el.css("display","block"),this._fade(o,r,a,b)},d.fn.prototype.fadeOut=function(a,b){this._fade(p,s,a,b)},b}function c(){this.$get=["$document","$compile","$log","$rootScope","$timeout","$templateCache","NgNotifyFactory",function(a,b,c,d,m,n,o){var p,q,r={theme:"pure",position:"bottom",duration:l,type:"info",sticky:!1,button:!0,html:!1,target:k},s={notifyClass:"",notifyMessage:""},t={pure:g,prime:"ngn-prime",pastel:"ngn-pastel",pitchy:"ngn-pitchy"},u={info:"ngn-info",error:"ngn-error",success:"ngn-success",warn:"ngn-warn",grimace:"ngn-grimace"},v={bottom:"ngn-bottom",top:"ngn-top"},w=function(){var a=d.$new();return a.ngNotify=angular.extend({},s),a.dismiss=function(){J()},a},x=function(a,c,d){var e={},g=w();"object"==typeof c?e=c:e.type=c;var h=H(e),i={isSticky:C(e),duration:B(e),userCallback:d};angular.extend(g.ngNotify,{notifyHtml:F(e),notifyClass:G(e,i.isSticky,h.found),notifyButton:D(e,i.isSticky),notifyMessage:a});var j=b(n.get(f))(g);return h.target.append(j),new o(g,j,i)},y=function(a){var b=a.type||r.type;return(u[b]||u.info)+h},z=function(a){var b=a.theme||r.theme;return(t[b]||t.pure)+h},A=function(a){var b=a.position||r.position;return(v[b]||v.bottom)+h},B=function(a){var b=a.duration||r.duration;return angular.isNumber(b)?b:l},C=function(a){var b=void 0!==a.sticky?a.sticky:r.sticky;return!!b},D=function(a,b){var c=void 0!==a.button?a.button:r.button;return c&&b},E=function(a){return a.target||r.target},F=function(a){if((a.html||r.html)&&!e)return c.debug("ngNotify warning:\nngSanitize couldn't be located.  In order to use the 'html' option, be sure the ngSanitize source is included in your project."),!1;var b=void 0!==a.html?a.html:r.html;return!!b},G=function(a,b,c){var d=y(a)+z(a)+A(a);return d+=b?i+h:g,d+=E(a)!==k&&c?j+h:g},H=function(a){var b=document.querySelector(E(a));return b?{target:angular.element(b),found:!0}:{target:angular.element(document.querySelector(k)),found:!1}},I=function(){p.options.isSticky||(q=m(function(){p.dismiss()},p.options.duration))},J=function(){p&&p.dismiss()},K=function(a){m.cancel(q),a&&(a.scope&&a.destroy(),a=null)};return{config:function(a){a=a||{},angular.extend(r,a)},set:function(a,b,c){a&&(K(p),p=x(a,b,c),p.show(I))},dismiss:function(){J()},addTheme:function(a,b){a&&b&&(t[a]=b)},addType:function(a,b){a&&b&&(u[a]=b)}}}]}var d=angular.module("ngNotify",[]);d.run(["$templateCache",a]),d.factory("NgNotifyFactory",["$interval",b]),d.provider("ngNotify",c);var e=!1,f="templates/ng-notify/ng-notify.html",g="",h=" ",i="ngn-sticky",j="ngn-component",k="body",l=3e3,m=500,n=25,o=1,p=-1,q=200,r=0,s=1;try{angular.module("ngSanitize")&&(angular.module("ngNotify").requires.push("ngSanitize"),e=!0)}catch(t){}}();
//# sourceMappingURL=ng-notify.min.js.map
//! moment.js
//! version : 2.15.2
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        var k;
        for (k in obj) {
            // even if its not own property I'd still call it non-empty
            return false;
        }
        return true;
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    function isUndefined(input) {
        return input === void 0;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (utils_hooks__hooks.deprecationHandler != null) {
                utils_hooks__hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (utils_hooks__hooks.deprecationHandler != null) {
            utils_hooks__hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;
    utils_hooks__hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function get_set__set (mom, unit, value) {
        if (mom.isValid()) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return this._months;
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return this._monthsShort;
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function units_month__handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = create_utc__createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return units_month__handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (typeof value !== 'number') {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        //the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        if (!m) {
            return this._weekdays;
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] :
            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function day_of_week__handleStrictParse(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = create_utc__createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = create_utc__createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        ordinalParse: defaultOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    // treat as if there is no base config
                    deprecateSimple('parentLocaleUndefined',
                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, parentConfig = baseConfig;
            // MERGE
            if (locales[name] != null) {
                parentConfig = locales[name]._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function locale_locales__listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(utils_hooks__hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (isDate(input)) {
            config._d = input;
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!valid__isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date(utils_hooks__hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = local__createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return valid__createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = local__createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return valid__createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = ((string || '').match(matcher) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
            } else if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);

            if (tZone === 0) {
                this.utcOffset(0, true);
            } else {
                this.utcOffset(offsetFromString(matchOffset, this._i));
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input,units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input,units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            delta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 local__createLocal(time).isValid())) {
            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 local__createLocal(time).isValid())) {
            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
            case 'date':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }

        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
            units = 'day';
        }

        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIOROITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add               = add_subtract__add;
    momentPrototype__proto.calendar          = moment_calendar__calendar;
    momentPrototype__proto.clone             = clone;
    momentPrototype__proto.diff              = diff;
    momentPrototype__proto.endOf             = endOf;
    momentPrototype__proto.format            = format;
    momentPrototype__proto.from              = from;
    momentPrototype__proto.fromNow           = fromNow;
    momentPrototype__proto.to                = to;
    momentPrototype__proto.toNow             = toNow;
    momentPrototype__proto.get               = stringGet;
    momentPrototype__proto.invalidAt         = invalidAt;
    momentPrototype__proto.isAfter           = isAfter;
    momentPrototype__proto.isBefore          = isBefore;
    momentPrototype__proto.isBetween         = isBetween;
    momentPrototype__proto.isSame            = isSame;
    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
    momentPrototype__proto.isValid           = moment_valid__isValid;
    momentPrototype__proto.lang              = lang;
    momentPrototype__proto.locale            = locale;
    momentPrototype__proto.localeData        = localeData;
    momentPrototype__proto.max               = prototypeMax;
    momentPrototype__proto.min               = prototypeMin;
    momentPrototype__proto.parsingFlags      = parsingFlags;
    momentPrototype__proto.set               = stringSet;
    momentPrototype__proto.startOf           = startOf;
    momentPrototype__proto.subtract          = add_subtract__subtract;
    momentPrototype__proto.toArray           = toArray;
    momentPrototype__proto.toObject          = toObject;
    momentPrototype__proto.toDate            = toDate;
    momentPrototype__proto.toISOString       = moment_format__toISOString;
    momentPrototype__proto.toJSON            = toJSON;
    momentPrototype__proto.toString          = toString;
    momentPrototype__proto.unix              = unix;
    momentPrototype__proto.valueOf           = to_type__valueOf;
    momentPrototype__proto.creationData      = creationData;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var prototype__proto = Locale.prototype;

    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto.ordinal         = ordinal;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months            =        localeMonths;
    prototype__proto.monthsShort       =        localeMonthsShort;
    prototype__proto.monthsParse       =        localeMonthsParse;
    prototype__proto.monthsRegex       = monthsRegex;
    prototype__proto.monthsShortRegex  = monthsShortRegex;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    prototype__proto.weekdaysRegex       =        weekdaysRegex;
    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;
    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = lists__get(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = locale_locales__getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return lists__get(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = lists__get(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function lists__listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function lists__listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function lists__listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function lists__listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes <= 1           && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   <= 1           && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    <= 1           && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  <= 1           && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   <= 1           && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.15.2';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.now                   = now;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.updateLocale          = updateLocale;
    utils_hooks__hooks.locales               = locale_locales__listLocales;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    utils_hooks__hooks.calendarFormat        = getCalendarFormat;
    utils_hooks__hooks.prototype             = momentPrototype;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
angular.module('siteApp').service('confirmModal', ['$uibModal', function ($uibModal) {

  var modalDefaults = {
    backdrop: true,
    keyboard: true,
    modalFade: true,
    templateUrl: '/javascripts/angular_components/templates/confirm-modal.html'
  };

  var modalOptions = {
    closeButtonText: 'Cancel',
    actionButtonText: 'OK',
    headerText: 'Confirm?',
    bodyText: 'Perform this action?',
		bodyInput: {},
    hideCloseButton: false
  };

  this.show = function (customModalOptions, customModalDefaults) {
    if (!customModalDefaults) customModalDefaults = {};
    customModalDefaults.backdrop = 'static';

    var tempModalDefaults = {};
    var tempModalOptions = {};

    //Map angular-ui modal custom defaults to modal defaults defined in service
    angular.extend(tempModalDefaults, modalDefaults, customModalDefaults);

    //Map modal.htm $scope custom properties to defaults defined in service
    angular.extend(tempModalOptions, modalOptions, customModalOptions);

    if (!tempModalDefaults.controller) {
      var defaultCtrl = function ($scope, $uibModalInstance) {
      	$scope.data = {}
        $scope.modalOptions = tempModalOptions;
        $scope.modalOptions.ok = function (result) {
          $uibModalInstance.close($scope.data);
        };
        $scope.modalOptions.close = function (result) {
          $uibModalInstance.dismiss('cancel');
        };
      }
      defaultCtrl.$inject = ['$scope', '$uibModalInstance'];
      tempModalDefaults.controller = defaultCtrl;
    }

    return $uibModal.open(tempModalDefaults).result;
  };

}]);
/*! ng-csv 10-10-2015 */
!function(a){angular.module("ngCsv.config",[]).value("ngCsv.config",{debug:!0}).config(["$compileProvider",function(a){angular.isDefined(a.urlSanitizationWhitelist)?a.urlSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/):a.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/)}]),angular.module("ngCsv.directives",["ngCsv.services"]),angular.module("ngCsv.services",[]),angular.module("ngCsv",["ngCsv.config","ngCsv.services","ngCsv.directives","ngSanitize"]),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ngCsv"),angular.module("ngCsv.services").service("CSV",["$q",function(a){var b="\r\n",c="﻿",d={"\\t":"	","\\b":"\b","\\v":"","\\f":"\f","\\r":"\r"};this.stringifyField=function(a,b){return"locale"===b.decimalSep&&this.isFloat(a)?a.toLocaleString():"."!==b.decimalSep&&this.isFloat(a)?a.toString().replace(".",b.decimalSep):"string"==typeof a?(a=a.replace(/"/g,'""'),(b.quoteStrings||a.indexOf(",")>-1||a.indexOf("\n")>-1||a.indexOf("\r")>-1)&&(a=b.txtDelim+a+b.txtDelim),a):"boolean"==typeof a?a?"TRUE":"FALSE":a},this.isFloat=function(a){return+a===a&&(!isFinite(a)||Boolean(a%1))},this.stringify=function(d,e){var f=a.defer(),g=this,h="",i="",j=a.when(d).then(function(a){if(angular.isDefined(e.header)&&e.header){var d,j;d=[],angular.forEach(e.header,function(a){this.push(g.stringifyField(a,e))},d),j=d.join(e.fieldSep?e.fieldSep:","),i+=j+b}var k=[];if(angular.isArray(a)?k=a:angular.isFunction(a)&&(k=a()),angular.isDefined(e.label)&&e.label&&"boolean"==typeof e.label){var l,m;l=[],angular.forEach(k[0],function(a,b){this.push(g.stringifyField(b,e))},l),m=l.join(e.fieldSep?e.fieldSep:","),i+=m+b}angular.forEach(k,function(a,c){var d,f,h=angular.copy(k[c]);f=[];var j=e.columnOrder?e.columnOrder:h;angular.forEach(j,function(a){var b=e.columnOrder?h[a]:a;this.push(g.stringifyField(b,e))},f),d=f.join(e.fieldSep?e.fieldSep:","),i+=c<k.length?d+b:d}),e.addByteOrderMarker&&(h+=c),h+=i,f.resolve(h)});return"function"==typeof j["catch"]&&j["catch"](function(a){f.reject(a)}),f.promise},this.isSpecialChar=function(a){return void 0!==d[a]},this.getSpecialChar=function(a){return d[a]}}]),angular.module("ngCsv.directives").directive("ngCsv",["$parse","$q","CSV","$document","$timeout",function(b,c,d,e,f){return{restrict:"AC",scope:{data:"&ngCsv",filename:"@filename",header:"&csvHeader",columnOrder:"&csvColumnOrder",txtDelim:"@textDelimiter",decimalSep:"@decimalSeparator",quoteStrings:"@quoteStrings",fieldSep:"@fieldSeparator",lazyLoad:"@lazyLoad",addByteOrderMarker:"@addBom",ngClick:"&",charset:"@charset",label:"&csvLabel"},controller:["$scope","$element","$attrs","$transclude",function(a,b,e){function f(){var b={txtDelim:a.txtDelim?a.txtDelim:'"',decimalSep:a.decimalSep?a.decimalSep:".",quoteStrings:a.quoteStrings,addByteOrderMarker:a.addByteOrderMarker};return angular.isDefined(e.csvHeader)&&(b.header=a.$eval(a.header)),angular.isDefined(e.csvColumnOrder)&&(b.columnOrder=a.$eval(a.columnOrder)),angular.isDefined(e.csvLabel)&&(b.label=a.$eval(a.label)),b.fieldSep=a.fieldSep?a.fieldSep:",",b.fieldSep=d.isSpecialChar(b.fieldSep)?d.getSpecialChar(b.fieldSep):b.fieldSep,b}a.csv="",angular.isDefined(a.lazyLoad)&&"true"==a.lazyLoad||angular.isArray(a.data)&&a.$watch("data",function(){a.buildCSV()},!0),a.getFilename=function(){return a.filename||"download.csv"},a.buildCSV=function(){var g=c.defer();return b.addClass(e.ngCsvLoadingClass||"ng-csv-loading"),d.stringify(a.data(),f()).then(function(c){a.csv=c,b.removeClass(e.ngCsvLoadingClass||"ng-csv-loading"),g.resolve(c)}),a.$apply(),g.promise}}],link:function(b,c){function d(){var c=b.charset||"utf-8",d=new Blob([b.csv],{type:"text/csv;charset="+c+";"});if(a.navigator.msSaveOrOpenBlob)navigator.msSaveBlob(d,b.getFilename());else{var g=angular.element('<div data-tap-disabled="true"><a></a></div>'),h=angular.element(g.children()[0]);h.attr("href",a.URL.createObjectURL(d)),h.attr("download",b.getFilename()),h.attr("target","_blank"),e.find("body").append(g),f(function(){h[0].click(),h.remove()},null)}}c.bind("click",function(){b.buildCSV().then(function(){d()}),b.$apply()})}}}])}(window,document);